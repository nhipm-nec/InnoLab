[
  {
    "content": "All branches in a conditional structure should not have exactly the same implementation' as CODE_SMELL when identical branches are intentionally kept for clarity, completeness of case enumeration, or maintainability, and unit tests ensure correct behavior.",
    "metadata": {
      "name": "All branches in a conditional structure should not have exactly the same implementation",
      "language": "Python",
      "type": "CODE_SMELL",
      "tags": [
        "readability",
        "maintainability",
        "style"
      ],
      "reason": "Pattern used for self-documenting code or exhaustive case handling; not a runtime defect.",
      "scope_conditions": [
        "Identical branches are intentional for readability or completeness",
        "Branches are covered by automated tests",
        "No impact on control flow or logic correctness",
        "Code is documented to explain intent"
      ],
      "policy": "local_override"
    }
  },
  {
    "content": "Regex alternatives should not be redundant' as CODE_SMELL when the redundancy is intentional for readability or future extensibility, and the regex behavior is verified by tests.",
    "metadata": {
      "name": "Remove or rework this redundant alternative.",
      "language": "Python",
      "type": "CODE_SMELL",
      "tags": [
        "regex",
        "maintainability",
        "style"
      ],
      "reason": "Redundancy kept for clarity or ease of future modification; no functional issue.",
      "scope_conditions": [
        "Regex redundancy is documented and intentional",
        "Automated tests confirm correct regex behavior",
        "Regex is not in a performance-critical path",
        "No negative impact on match results"
      ],
      "policy": "local_override"
    }
  },
  {
    "content": "Variables should not be self-assigned' as CODE_SMELL when the self-assignment is intentional (e.g., to trigger hooks, observers, or refresh state) and does not affect correctness.",
    "metadata": {
      "name": "Remove or correct this useless self-assignment.",
      "language": "Python",
      "type": "CODE_SMELL",
      "tags": [
        "maintainability",
        "style",
        "intentional-pattern"
      ],
      "reason": "Self-assignment used as a deliberate pattern (e.g., signaling) and is harmless.",
      "scope_conditions": [
        "Self-assignment is documented and intentional",
        "Purpose is to trigger side effects like hooks or observers",
        "Code path is covered by automated tests",
        "No unintended overwrites or masking of values"
      ],
      "policy": "local_override"
    }
  },
  {
    "content": "Repeated patterns in regular expressions should not match the empty string' as CODE_SMELL when the pattern is intentionally written to allow optional matches, documented as such, and verified not to cause performance issues or incorrect results.",
    "metadata": {
      "name": "Repeated patterns in regular expressions should not match the empty string",
      "language": "Python",
      "type": "CODE_SMELL",
      "tags": [
        "regex",
        "maintainability",
        "style"
      ],
      "reason": "Empty-string match is deliberate to simplify regex or support optional groups; safe when documented and tested.",
      "scope_conditions": [
        "Empty-string matching is intentional and documented",
        "Automated tests confirm correct match behavior",
        "No catastrophic backtracking or performance issues",
        "Regex is not security-critical (e.g., no ReDoS risk)"
      ],
      "policy": "local_override"
    }
  },
  {
    "content": "Function parameters initial values should not be ignored' as CODE_SMELL when overriding default parameter values is intentional, documented, and does not impact correctness or readability.",
    "metadata": {
      "name": "Introduce a new variable or use its initial value before reassigning 'n'.",
      "language": "Python",
      "type": "CODE_SMELL",
      "tags": [
        "maintainability",
        "style",
        "function-signature"
      ],
      "reason": "Overriding default values can be intentional for clarity or explicitness; safe when documented and tested.",
      "scope_conditions": [
        "Override of default parameter value is intentional and documented",
        "Automated tests confirm correct behavior with overridden values",
        "No functional or logical errors introduced by override",
        "Change does not reduce code readability or maintainability"
      ],
      "policy": "local_override"
    }
  }
]
