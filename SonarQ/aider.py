#!/usr/bin/env python3
"""
Simple Aider-like command line tool using Gemini API
Usage: python aider.py [file_path] [--fix] [--analyze] [--question "your question"]
"""

import google.generativeai as genai
import os
import sys
import argparse
from pathlib import Path
from dotenv import load_dotenv
import glob

def setup_gemini():
    """Setup Gemini API"""
    # Load environment variables from root directory
    root_env_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
    load_dotenv(root_env_path)
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå L·ªói: GEMINI_API_KEY kh√¥ng t√¨m th·∫•y trong file .env")
        sys.exit(1)
    
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-1.5-flash')

def analyze_file(model, file_path):
    """Analyze a code file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code_content = f.read()
        
        prompt = f"""
Ph√¢n t√≠ch file code n√†y v√† cung c·∫•p:
1. ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng code
2. C√°c v·∫•n ƒë·ªÅ ti·ªÅm ·∫©n
3. ƒê·ªÅ xu·∫•t c·∫£i thi·ªán

File: {file_path}

```
{code_content}
```

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† s√∫c t√≠ch.
"""
        
        response = model.generate_content(prompt)
        return response.text
        
    except FileNotFoundError:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}"
    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"

def fix_file(model, file_path):
    """Fix issues in a code file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            code_content = f.read()
        
        prompt = f"""
H√£y s·ª≠a c√°c v·∫•n ƒë·ªÅ trong code n√†y v√† cung c·∫•p code ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán:

File: {file_path}

```
{code_content}
```

Vui l√≤ng:
1. S·ª≠a c√°c l·ªói syntax n·∫øu c√≥
2. C·∫£i thi·ªán code quality
3. Th√™m comments n·∫øu c·∫ßn
4. T·ªëi ∆∞u h√≥a performance

Ch·ªâ tr·∫£ v·ªÅ code ƒë√£ s·ª≠a, kh√¥ng c·∫ßn gi·∫£i th√≠ch d√†i d√≤ng.
"""
        
        response = model.generate_content(prompt)
        return response.text
        
    except FileNotFoundError:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}"
    except Exception as e:
        return f"‚ùå L·ªói: {str(e)}"

def ask_question(model, question):
    """Ask a coding question"""
    prompt = f"""
C√¢u h·ªèi l·∫≠p tr√¨nh: {question}

Vui l√≤ng tr·∫£ l·ªùi ng·∫Øn g·ªçn v·ªõi v√≠ d·ª• code c·ª• th·ªÉ (n·∫øu c√≥).
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
"""
    
    response = model.generate_content(prompt)
    return response.text

def get_code_files(path):
    """Get all code files from a path (file or directory)"""
    code_extensions = ['.py', '.js', '.ts', '.java', '.cpp', '.c', '.cs', '.php', '.rb', '.go', '.rs', '.swift', '.kt']
    
    if os.path.isfile(path):
        return [path]
    
    elif os.path.isdir(path):
        code_files = []
        for ext in code_extensions:
            pattern = os.path.join(path, f"**/*{ext}")
            code_files.extend(glob.glob(pattern, recursive=True))
        return code_files
    
    else:
        return []

def analyze_directory(model, dir_path):
    """Analyze all code files in a directory"""
    code_files = get_code_files(dir_path)
    
    if not code_files:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y file code n√†o trong: {dir_path}"
    
    results = []
    results.append(f"üìÅ Ph√¢n t√≠ch th∆∞ m·ª•c: {dir_path}")
    results.append(f"üîç T√¨m th·∫•y {len(code_files)} file code:")
    
    for file_path in code_files:
        results.append(f"\n{'='*50}")
        results.append(f"üìÑ File: {os.path.relpath(file_path, dir_path)}")
        results.append(f"{'='*50}")
        
        try:
            analysis = analyze_file(model, file_path)
            results.append(analysis)
        except Exception as e:
            results.append(f"‚ùå L·ªói khi ph√¢n t√≠ch {file_path}: {str(e)}")
    
    return "\n".join(results)

def fix_directory(model, dir_path):
    """Fix all code files in a directory"""
    code_files = get_code_files(dir_path)
    
    if not code_files:
        return f"‚ùå Kh√¥ng t√¨m th·∫•y file code n√†o trong: {dir_path}"
    
    results = []
    results.append(f"üìÅ S·ª≠a l·ªói th∆∞ m·ª•c: {dir_path}")
    results.append(f"üîß ƒêang x·ª≠ l√Ω {len(code_files)} file code:")
    
    for file_path in code_files:
        results.append(f"\n{'='*50}")
        results.append(f"üìÑ File: {os.path.relpath(file_path, dir_path)}")
        results.append(f"{'='*50}")
        
        try:
            fixed_code = fix_file(model, file_path)
            results.append(fixed_code)
            
            # Optionally save the fixed code to a new file
            fixed_file_path = file_path.replace('.py', '_fixed.py').replace('.js', '_fixed.js')
            # Uncomment the next lines if you want to save fixed files
            # with open(fixed_file_path, 'w', encoding='utf-8') as f:
            #     f.write(fixed_code)
            # results.append(f"üíæ ƒê√£ l∆∞u code ƒë√£ s·ª≠a v√†o: {fixed_file_path}")
            
        except Exception as e:
            results.append(f"‚ùå L·ªói khi s·ª≠a {file_path}: {str(e)}")
    
    return "\n".join(results)

def main():
    parser = argparse.ArgumentParser(description='Gemini AI Coding Assistant')
    parser.add_argument('file', nargs='?', help='File path to analyze or fix')
    parser.add_argument('--analyze', action='store_true', help='Analyze the file')
    parser.add_argument('--fix', action='store_true', help='Fix issues in the file')
    parser.add_argument('--question', type=str, help='Ask a coding question')
    
    args = parser.parse_args()
    
    # Setup Gemini
    model = setup_gemini()
    
    if args.question:
        print("ü§î ƒêang suy nghƒ©...")
        result = ask_question(model, args.question)
        print("\nüí° Tr·∫£ l·ªùi:")
        print(result)
    
    elif args.file:
        if os.path.isdir(args.file):
            # Handle directory
            if args.analyze:
                print(f"üîç ƒêang ph√¢n t√≠ch th∆∞ m·ª•c {args.file}...")
                result = analyze_directory(model, args.file)
                print("\nüìã K·∫øt qu·∫£ ph√¢n t√≠ch:")
                print(result)
            
            elif args.fix:
                print(f"üîß ƒêang s·ª≠a l·ªói th∆∞ m·ª•c {args.file}...")
                result = fix_directory(model, args.file)
                print("\nüõ†Ô∏è K·∫øt qu·∫£ s·ª≠a l·ªói:")
                print(result)
            
            else:
                # Default to analyze for directory
                print(f"üîç ƒêang ph√¢n t√≠ch th∆∞ m·ª•c {args.file}...")
                result = analyze_directory(model, args.file)
                print("\nüìã K·∫øt qu·∫£ ph√¢n t√≠ch:")
                print(result)
        
        else:
            # Handle single file
            if args.analyze:
                print(f"üîç ƒêang ph√¢n t√≠ch {args.file}...")
                result = analyze_file(model, args.file)
                print("\nüìã K·∫øt qu·∫£ ph√¢n t√≠ch:")
                print(result)
            
            elif args.fix:
                print(f"üîß ƒêang s·ª≠a l·ªói {args.file}...")
                result = fix_file(model, args.file)
                print("\nüõ†Ô∏è Code ƒë√£ s·ª≠a:")
                print(result)
            
            else:
                # Default to analyze
                print(f"üîç ƒêang ph√¢n t√≠ch {args.file}...")
                result = analyze_file(model, args.file)
                print("\nüìã K·∫øt qu·∫£ ph√¢n t√≠ch:")
                print(result)
    
    else:
        print("ü§ñ Gemini AI Coding Assistant")
        print("\nC√°ch s·ª≠ d·ª•ng:")
        print("  python aider.py file.py --analyze    # Ph√¢n t√≠ch file")
        print("  python aider.py file.py --fix        # S·ª≠a l·ªói file")
        print('  python aider.py --question "c√¢u h·ªèi" # H·ªèi v·ªÅ l·∫≠p tr√¨nh')
        print("\nV√≠ d·ª•:")
        print("  python aider.py test.py")
        print("  python aider.py test.py --fix")
        print('  python aider.py --question "C√°ch s·ª≠ d·ª•ng list comprehension?"')

if __name__ == "__main__":
    main()