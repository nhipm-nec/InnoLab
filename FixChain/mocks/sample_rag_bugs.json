{
  "bugs": [
    {
      "name": "Source files should not have any duplicated blocks",
      "description": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:DuplicatedBlocks"
      }
    },
    {
      "name": "Failed unit tests should be fixed",
      "description": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:FailedUnitTests"
      }
    },
    {
      "name": "Branches should have sufficient coverage by tests",
      "description": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:InsufficientBranchCoverage"
      }
    },
    {
      "name": "Source files should have a sufficient density of comment lines",
      "description": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:InsufficientCommentDensity"
      }
    },
    {
      "name": "Lines should have sufficient coverage by tests",
      "description": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:InsufficientLineCoverage"
      }
    },
    {
      "name": "Skipped unit tests should be either removed or fixed",
      "description": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "common-py:SkippedUnitTests"
      }
    },
    {
      "name": "Backticks should not be used",
      "description": "<p>Backticks are a deprecated alias for <code>repr()</code>. Don’t use them any more, the syntax was removed in Python 3.0.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn `num`  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn repr(num)\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:BackticksUsage"
      }
    },
    {
      "name": "Increment and decrement operators should not be used",
      "description": "<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,\n<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n++x # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx += 1\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:PreIncrementDecrement"
      }
    },
    {
      "name": "Lines should not end with trailing whitespaces",
      "description": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1131"
      }
    },
    {
      "name": "Track uses of \"FIXME\" tags",
      "description": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef divide(numerator, denominator):\n  return numerator / denominator              # FIXME denominator value might be 0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/546\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1134"
      }
    },
    {
      "name": "Track uses of \"TODO\" tags",
      "description": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef doSomething:\n  # TODO : Complete function\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/546\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1135"
      }
    },
    {
      "name": "Functions should not contain too many return statements",
      "description": "<p>Having too many return statements in a function increases the function’s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\ndef fun():          # Noncompliant as there are 4 return statements\n  if condition1:\n    return True\n  elif condition2:\n    return False\n  else:\n    return True\n  return False\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1142"
      }
    },
    {
      "name": "Break, continue and return statements should not occur in \"finally\" blocks",
      "description": "<p>Using <code>return</code>, <code>break</code> or <code>continue</code> in a <code>finally</code> block suppresses the propagation of any unhandled\nexception which was raised in the <code>try</code>, <code>else</code> or <code>except</code> blocks. It will also ignore their return statements.</p>\n<p><code><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\">SystemExit</a></code> is raised when <code>sys.exit()</code> is\ncalled. <code><a href=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\">KeyboardInterrupt</a></code> is raised when the user asks\nthe program to stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops. It is ok to catch them when\na clean-up is necessary but they should be raised again immediately. They should never be ignored.</p>\n<p>If you need to ignore every other exception you can simply catch the <code>Exception</code> class. However you should be very careful when you do\nthis as it will ignore other important exceptions such as <code><a\nhref=\"https://docs.python.org/3/library/exceptions.html#MemoryError\">MemoryError</a></code></p>\n<p>In python 2 it is possible to raise old style classes. You can use a bare <code>except:</code> statement to catch every exception. Remember to\nstill reraise <code>SystemExit</code> and <code>KeyboardInterrupt</code>.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>) would force the control flow to\nleave a finally block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            # \"open\" will raise IsADirectoryError if the provided path is a directory but it will be stopped by the  \"return\" and \"continue\"\n            file = open(path, 'r')\n            actual_content = file.read()\n        except FileNotFoundError as exception:\n            # This exception will never pass the \"finally\" block because of \"return\" and \"continue\"\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            file.close()\n            if actual_content != expected_content:\n                # Note that \"continue\" is allowed in a \"finally\" block only since python 3.8\n                continue  # Noncompliant. This will prevent exceptions raised by the \"try\" block and \"except\" block from raising.\n            else:\n                return path # Noncompliant. Same as for \"continue\"\n    return None\n\n# This will return None instead of raising ValueError from the \"except\" block\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This will return None instead of raising IsADirectoryError from the \"try\" block\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise\n    finally:\n        break  # This will prevent SystemExit from raising\n\ndef continue_whatever_happens_noncompliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        finally:\n            continue  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# Note that using \"with open(...) as\" would be better. We keep the example as is just for demonstration purpose.\n\ndef find_file_which_contains(expected_content, paths):\n    file = None\n    for path in paths:\n        try:\n            file = open(path, 'r')\n            actual_content = file.read()\n            if actual_content != expected_content:\n                continue\n            else:\n                return path\n        except FileNotFoundError as exception:\n            raise ValueError(f\"'paths' should only contain existing files. File ${path} does not exist.\")\n        finally:\n            if file:\n                file.close()\n    return None\n\n# This raises ValueError\nfind_file_which_contains(\"some content\", [\"file_which_does_not_exist\"])\n\n# This raises IsADirectoryError\nfind_file_which_contains(\"some content\", [\"a_directory\"])\n\nimport sys\n\nwhile True:\n    try:\n        sys.exit(1)\n    except (SystemExit) as e:\n        print(\"Exiting\")\n        raise # SystemExit is re-raised\n\nimport logging\n\ndef continue_whatever_happens_compliant():\n    for i in range(10):\n        try:\n            raise ValueError()\n        except Exception:\n            logging.exception(\"Failed\")  # Ignore all \"Exception\" subclasses yet allow SystemExit and other important exceptions to pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1143"
      }
    },
    {
      "name": "Unused class-private methods should be removed",
      "description": "<p>\"Class-Private\" methods that are never executed inside their enclosing class are dead code: unnecessary, inoperative code that should be removed.\nCleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being\nintroduced.</p>\n<p>Python has no real private methods. Every method is accessible. There are however two conventions indicating that a method is not meant to be\n\"public\":</p>\n<ul>\n  <li> methods with a name starting with a single underscore (ex: <code>_mymethod</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" methods have a name which starts with at least two underscores and ends with at most one underscore. These methods' names will\n  be automatically mangled to avoid collision with subclasses' methods. For example <code>__mymethod</code> will be renamed as\n  <code>_classname__mymethod</code>, where <code>classname</code> is the method’s class name without its leading underscore(s). These methods\n  shouldn’t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a class-private method (two leading underscores, max one underscore at the end) is never called inside the class.\nClass methods, static methods and instance methods will all raise an issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Noncompliant:\n\n    @classmethod\n    def __mangled_class_method(cls):  # Noncompliant\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():  # Noncompliant\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):  # Noncompliant\n        print(\"__mangled_instance_method\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Compliant:\n\n    def __init__(self):\n        Compliant.__mangled_class_method()\n        Compliant.__mangled_static_method()\n        self.__mangled_instance_method()\n\n    @classmethod\n    def __mangled_class_method(cls):\n        print(\"__mangled_class_method\")\n\n    @staticmethod\n    def __mangled_static_method():\n        print(\"__mangled_static_method\")\n\n    def __mangled_instance_method(self):\n        print(\"__mangled_instance_method\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation – Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP8 – Designing for Inheritance</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1144"
      }
    },
    {
      "name": "Boolean checks should not be inverted",
      "description": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif not a == 2:        # Noncompliant\n    b = not i &lt; 10    # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif a != 2 :\n    b = i &gt;= 10\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1940"
      }
    },
    {
      "name": "A secure password should be used when connecting to a database",
      "description": "<p>When relying on the password authentication mode for the database connection, a secure password should be chosen.</p>\n<p>This rule raises an issue when an empty password is used.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Flask-SQLAlchemy</p>\n<pre>\ndef configure_app(app):\n    app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://user:@domain.com\" # Noncompliant\n</pre>\n<p>Django</p>\n<pre>\n# settings.py\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': '', # Noncompliant\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<p>mysql/mysql-connector-python</p>\n<pre>\nfrom mysql.connector import connection\n\nconnection.MySQLConnection(host='localhost', user='sonarsource', password='')  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask-SQLAlchemy</p>\n<pre>\ndef configure_app(app, pwd):\n    app.config['SQLALCHEMY_DATABASE_URI'] = f\"postgresql://user:{pwd}@domain.com\" # Compliant\n</pre>\n<p>Django</p>\n<pre>\n# settings.py\nimport os\n\nDATABASES = {\n    'postgresql_db': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'quickdb',\n        'USER': 'sonarsource',\n        'PASSWORD': os.getenv('DB_PASSWORD'),      # Compliant\n        'HOST': 'localhost',\n        'PORT': '5432'\n    }\n}\n</pre>\n<p>mysql/mysql-connector-python</p>\n<pre>\nfrom mysql.connector import connection\nimport os\n\ndb_password = os.getenv('DB_PASSWORD')\nconnection.MySQLConnection(host='localhost', user='sonarsource', password=db_password)  # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html\">OWASP Top 10 2017 Category A2</a> - Broken\n  Authentication </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521\">MITRE, CWE-521</a> - Weak Password Requirements </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2115"
      }
    },
    {
      "name": "Alternatives in regular expressions should be grouped when used with anchors",
      "description": "<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn’t be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"^a|b|c$\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"^(?:a|b|c)$\"\n</pre>\n<p>or</p>\n<pre>\nr\"^a$|^b$|^c$\"\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\nr\"(?:^a)|b|(?:c$)\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5850"
      }
    },
    {
      "name": "Regex alternatives should not be redundant",
      "description": "<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it’s a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"[ab]|a\"   # The \"|a\" is redundant because \"[ab]\" already matches \"a\"\nr\".*|a\"     # .* matches everything, so any other alternative is redundant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"[ab]\"\nr\".*\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5855"
      }
    },
    {
      "name": "Regular expressions should be syntactically valid",
      "description": "<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or methods that don’t use regular\nexpressions should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nre.compile(r\"([\")\nre.sub(r\"([\", input, \"{\")\nre.compile(r\"(\\w+-(\\d+)\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nre.compile(r\"\\(\\[\")\ninput.replace(\"([\", \"{\")\nre.compile(r\"(\\w+)-(\\d+)\")\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5856"
      }
    },
    {
      "name": "Character classes should be preferred over reluctant quantifiers in regular expressions",
      "description": "<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code> should be\nreplaced with <code>&lt;[^&gt;]*&gt;</code> or <code>&lt;[^&gt;]+&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr'&lt;.+?&gt;'\nr'\".*?\"'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr'&lt;[^&gt;]+&gt;'\nr'\"[^\"]*\"'\n</pre>\n<h2>Exceptions</h2>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n/&lt;!--.*?--&gt;/\n-/\\*.*?\\*/-\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5857"
      }
    },
    {
      "name": "Type checks shouldn't be confusing",
      "description": "<p>Checking that variable X has type T with <a href=\"https://docs.python.org/3/library/typing.html\">type annotations</a> implies that X’s value is of\ntype T or a subtype of T. After such a check, it is a good practice to limit actions on X to those allowed by type T, even if a subclass of T allows\ndifferent actions. Doing otherwise will confuse your fellow developers.</p>\n<p>Just to be clear, it is common in python to perform an action without checking first if it is possible (see <a\nhref=\"https://docs.python.org/3/glossary.html#term-eafp\">\"Easier to ask for forgiveness than permission.\"</a>). However when type checks are\nperformed, they should not contradict the following actions.</p>\n<p>This rule raises an issue when an action performed on a variable might be possible, but it contradicts a previous type check. The list of checked\nactions corresponds to rules <a href='/coding_rules#rule_key=python%3AS2159'>S2159</a>, <a href='/coding_rules#rule_key=python%3AS3403'>S3403</a>, <a href='/coding_rules#rule_key=python%3AS5607'>S5607</a>, <a href='/coding_rules#rule_key=python%3AS5756'>S5756</a>, <a href='/coding_rules#rule_key=python%3AS5644'>S5644</a>,\n<a href='/coding_rules#rule_key=python%3AS3862'>S3862</a>, <a href='/coding_rules#rule_key=python%3AS5797'>S5797</a>, <a href='/coding_rules#rule_key=python%3AS5795'>S5795</a> and <a href='/coding_rules#rule_key=python%3AS5632'>S5632</a>. These other rules only detect cases where the type of a\nvariable is certain, i.e. it cannot be a subclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef add_the_answer(param: str):\n    return param + 42  # Noncompliant. Fix this \"+\" operation; Type annotation on \"param\" suggest that operands have incompatible types.\n    # Note: In practice it is possible to create a class inheriting from both \"str\" and \"int\", but this would be a very confusing design.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef add_the_answer(param: str):\n    return param + \"42\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#isinstance\">Python documentation - <code>isinstance</code> function</a> </li>\n  <li> <a href=\"https://docs.python.org/3/glossary.html#term-eafp\">Python glossary - \"Easier to ask for forgiveness than permission.\"</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5864"
      }
    },
    {
      "name": "Granting access to S3 buckets to all or authenticated users is security-sensitive",
      "description": "<p>Predefined permissions, also known as <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">canned ACLs</a>,\nare an easy way to grant large privileges to predefined groups or users.</p>\n<p>The following canned ACLs are security-sensitive:</p>\n<ul>\n  <li> <code>PUBLIC_READ</code>, <code>PUBLIC_READ_WRITE</code> grant respectively \"read\" and \"read and write\" privileges to everyone in the world\n  (<code>AllUsers</code> group). </li>\n  <li> <code>AUTHENTICATED_READ</code> grants \"read\" privilege to all authenticated users (<code>AuthenticatedUsers</code> group). </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css …​). </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to implement the least privilege policy, i.e., to grant necessary permissions only to users for their required tasks. In the\ncontext of canned ACL, set it to <code>PRIVATE</code> (the default one), and if needed more granularity then use an appropriate S3 policy.</p>\n<h2>Sensitive Code Example</h2>\n<p>All users (ie: anyone in the world authenticated or not) have read and write permissions with the <code>PUBLIC_READ_WRITE</code> access\ncontrol:</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PUBLIC_READ_WRITE     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>With the <code>PRIVATE</code> access control (default), only the bucket owner has the read/write permissions on the buckets and its ACL.</p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n\n# Another example\ns3deploy.BucketDeployment(self, \"DeployWebsite\",\n    access_control=s3.BucketAccessControl.PRIVATE       # Compliant\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">AWS Documentation</a> - Access control list (ACL)\n  overview (canned ACLs) </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/walkthrough1.html\">AWS Documentation</a> - Controlling access to a bucket with\n  user policies </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html\">AWS CDK version 2</a> - Class Bucket (construct) </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6265"
      }
    },
    {
      "name": "The \"exec\" statement should not be used",
      "description": "<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()</code> function can be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexec 'print 1' # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nexec('print 1')\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:ExecStatementUsage"
      }
    },
    {
      "name": "A field should not duplicate the name of its containing class",
      "description": "<p>It’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1700"
      }
    },
    {
      "name": "Return values from functions without side effects should not be ignored",
      "description": "<p>When the call to a function doesn’t have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn’t behave as expected.</p>\n<p>This rule raises an issue when a builtin function or methods which has no side effects is called and its result is not used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyvar = \"this is a multiline\"\n\"message from {}\".format(sender)  # Noncompliant. The formatted string is not used because the concatenation is not done properly.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyvar = (\"this is a multiline\"\n\"message from {}\".format(sender))\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when the function or method call is in a <code>try...except</code> body. This usually indicates that an exception is\nexpected, and this exception is the side-effect.</p>\n<pre>\ndef tryExcept():\n    d = {}\n    try:\n        d[1]\n    except IndexError as e:\n        pass\n\n    try:\n        divmod(1, 0)\n    except ZeroDivisionError as e:\n        pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html\">Python documentation - Built-in Functions</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2201"
      }
    },
    {
      "name": "Methods and properties that don't access instance data should be static",
      "description": "<p>Class methods that don’t access instance data can and should be static because they yield more performant code.</p>\n<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities:\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\n        #...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities:\n    @classmethod\n    def do_the_thing(cls, arg1, arg2, ...):\n        #...\n</pre>\n<p>or</p>\n<pre>\nclass Utilities:\n    @staticmethod\n    def do_the_thing(arg1, arg2, ...):\n        #...\n</pre>\n<h2>Exceptions</h2>\n<p>Methods which raise or may raise a <code>NotImplementedError</code> are ignored.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2325"
      }
    },
    {
      "name": "Cipher Block Chaining IVs should be unpredictable",
      "description": "<p>When encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is used to randomize the encryption, ie under a given\nkey the same plaintext doesn’t always produce the same ciphertext. The IV doesn’t need to be secret but should be unpredictable to avoid\n\"Chosen-Plaintext Attack\".</p>\n<p>To generate Initialization Vectors, NIST recommends to use a secure random number generator.</p>\n<h2>Noncompliant Code Example</h2>\n<p>For <a href=\"https://github.com/Legrandin/pycryptodome\">PyCryptodome</a> module:</p>\n<pre>\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad, unpad\n\nstatic_vector = b'x' * AES.block_size\ncipher = AES.new(key, AES.MODE_CBC, static_vector)\ncipher.encrypt(pad(data, AES.block_size))  # Noncompliant\n</pre>\n<p>For <a href=\"https://github.com/pyca/cryptography\">cryptography</a> module:</p>\n<pre>\nfrom os import urandom\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\nstatic_vector = b'x' * 16\ncipher = Cipher(algorithms.AES(key), modes.CBC(static_vector))\ncipher.encryptor()  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://github.com/Legrandin/pycryptodome\">PyCryptodome</a> module:</p>\n<pre>\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util.Padding import pad, unpad\n\nrandom_vector = get_random_bytes(AES.block_size)\ncipher = AES.new(key, AES.MODE_CBC, random_vector)\ncipher.encrypt(pad(data, AES.block_size))\n</pre>\n<p>For <a href=\"https://github.com/pyca/cryptography\">cryptography</a> module:</p>\n<pre>\nfrom os import urandom\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n\nrandom_vector = urandom(16)\ncipher = Cipher(algorithms.AES(key), modes.CBC(random_vector))\ncipher.encryptor()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\">Mobile AppSec\n  Verification Standard</a> - Cryptography Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">OWASP Mobile Top 10 2016 Category M5</a> -\n  Insufficient Cryptography </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/329\">MITRE, CWE-329</a> - Not Using an Unpredictable IV with CBC Mode </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3329"
      }
    },
    {
      "name": "Cognitive Complexity of functions should not be too high",
      "description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\">Cognitive Complexity</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3776"
      }
    },
    {
      "name": "A subclass should not be in the same \"except\" statement as a parent class",
      "description": "<p>Repeating an exception class in a single <code>except</code> statement will not fail but it is not what the developer intended. Either the class is\nnot the one which should be caught, or this is dead code.</p>\n<p>Having a subclass and a parent class in the same <code>except</code> statement is also useless. It is enough to keep only the parent class.</p>\n<p>This rule raises an issue when an exception class is duplicated in an <code>except</code> statement, or when an exception class has a parent class\nin the same <code>except</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry:\n    raise NotImplementedError()\nexcept (NotImplementedError, RuntimeError):  # Noncompliant. NotImplementedError inherits from RuntimeError\n    print(\"Foo\")\n\ntry:\n    raise NotImplementedError()\nexcept (RuntimeError, RuntimeError):  # Noncompliant.\n    print(\"Foo\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry:\n    raise NotImplementedError()\nexcept RuntimeError:\n    print(\"Foo\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html#handling-exceptions\">Handling Exceptions</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5713"
      }
    },
    {
      "name": "Bare \"raise\" statements should only be used in \"except\" blocks",
      "description": "<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope. If the \"raise\" statement is not in an <code>except</code> or <code>finally</code> block, no exception is active and a <code>RuntimeError</code>\nis raised instead.</p>\n<p>If the bare <code>raise</code> statement is in a function called in an <code>except</code> statement, the exception caught by the\n<code>except</code> will be raised. This works but is hard to understand and maintain. Nothing indicates in the parent <code>except</code> that the\nexception will be reraised, and nothing prevents a developer from calling the function in another context.</p>\n<p>Note also that using a bare <code>raise</code> in a <code>finally</code> block only works when an exception is active, i.e. when an exception from\nthe <code>try</code> block is not caught or when an exception is raised by an <code>except</code> block. It will fail in any other case and should not\nbe relied upon. This code smell is handled by rule <a href='/coding_rules#rule_key=python%3AS5704'>S5704</a>.</p>\n<p>This rule raises an exception when a bare <code>raise</code> statement is not in an <code>except</code> or <code>finally</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nraise  # Noncompliant\n\ndef foo():\n    raise  # Noncompliant\n    try:\n        raise  # Noncompliant\n    except ValueError as e:\n        handle_error()\n    except:\n        raise\n    else:\n        raise  # Noncompliant\n    finally:\n        raise\n\ndef handle_error():\n    raise  # Noncompliant. This works but is hard to understand.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nraise ValueError()\n\ndef foo():\n    raise ValueError()\n    try:\n        raise ValueError()\n    except:\n        raise\n    else:\n        raise ValueError()\n    finally:\n        raise\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5747"
      }
    },
    {
      "name": "Unicode Grapheme Clusters should be avoided inside regex character classes",
      "description": "<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c̈</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c̈]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn’t expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nre.sub(r\"[c̈d̈]\", \"X\", \"cc̈d̈d\") # Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nre.sub(r\"c̈|d̈\", \"X\", \"cc̈d̈d\") # print \"cXXd\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5868"
      }
    },
    {
      "name": "Character classes in regular expressions should not contain the same character twice",
      "description": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"[0-99]\" # Noncompliant, this won't actually match strings with two digits\nr\"[0-9.-_]\" # Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"[0-9]{1,2}\"\nr\"[0-9.\\\\-_]\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5869"
      }
    },
    {
      "name": "Variables, classes and functions should be either defined or imported",
      "description": "<p>Variables, Classes and functions should not be undefined, otherwise the code will fail with a NameError.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmy_var # Noncompliant (variable is never defined)\n\ndef noncompliant():\n    foo()  # Noncompliant\n    MyClass()  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom mod import my_var\n\nmy_var\n\ndef compliant():\n    foo = sum\n    foo()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5953"
      }
    },
    {
      "name": "Single-character alternations in regular expressions should be replaced with character classes",
      "description": "<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"a|b|c\" # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"[abc]\"\n# or\nr\"[a-c]\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6035"
      }
    },
    {
      "name": "Policies authorizing public access to resources are security-sensitive",
      "description": "<p>Resource-based policies granting access to all users can lead to information leakage.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The AWS resource stores or processes sensitive data. </li>\n  <li> The AWS resource is designed to be private. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to implement the least privilege principle, i.e. to grant necessary permissions only to users for their required tasks. In the\ncontext of resource-based policies, list the principals that need the access and grant to them only the required privileges.</p>\n<h2>Sensitive Code Example</h2>\n<p>This policy allows all users, including anonymous ones, to access an S3 bucket:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AnyPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AnyPrincipal()] # Sensitive\n))\n</pre>\n<h2>Compliant Solution</h2>\n<p>This policy allows only the authorized users:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, AccountRootPrincipal, Effect\nfrom aws_cdk.aws_s3 import Bucket\n\nbucket = Bucket(self, \"ExampleBucket\")\n\nbucket.add_to_resource_policy(PolicyStatement(\n  effect=Effect.ALLOW,\n  actions=[\"s3:*\"],\n  resources=[bucket.arn_for_objects(\"*\")],\n  principals=[AccountRootPrincipal()]\n))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6270"
      }
    },
    {
      "name": "Using unencrypted EBS volumes is security-sensitive",
      "description": "<p>Amazon Elastic Block Store (EBS) is a block-storage service for Amazon Elastic Compute Cloud (EC2). EBS volumes can be encrypted, ensuring the\nsecurity of both data-at-rest and data-in-transit between an instance and its attached EBS storage. In the case that adversaries gain physical access\nto the storage medium they are not able to access the data. Encryption can be enabled for specific volumes or for <a\nhref=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\">all new volumes and snapshots</a>. Volumes created\nfrom snapshots inherit their encryption configuration. A volume created from an encrypted snapshot will also be encrypted by default.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The disk contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to encrypt EBS volumes that contain sensitive information. Encryption and decryption are handled transparently by EC2, so no\nfurther modifications to the application are necessary. Instead of enabling encryption for every volume, it is also possible to enable encryption\nglobally for a specific region. While creating volumes from encrypted snapshots will result in them being encrypted, explicitly enabling this security\nparameter will prevent any future unexpected security downgrade.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=False  # Sensitive\n        )\n</pre>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"unencrypted-implicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1)\n        ) # Sensitive as encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.Volume.html\">aws_cdk.aws_ec2.Volume</a>:</p>\n<pre>\nfrom aws_cdk.aws_ec2 import Volume\n\nclass EBSVolumeStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        Volume(self,\n            \"encrypted-explicit\",\n            availability_zone=\"eu-west-1a\",\n            size=Size.gibibytes(1),\n            encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS encryption</a> </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6275"
      }
    },
    {
      "name": "Non-capturing groups without quantifier should not be used",
      "description": "<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"(?:number)\\d{2}\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"number\\d{2}\"\nr\"(?:number)?\\d{2}\"\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\nr\"(?:number|string)\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6395"
      }
    },
    {
      "name": "Superfluous curly brace quantifiers should be avoided",
      "description": "<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"ab{1,1}c\"\nr\"ab{1}c\"\nr\"ab{0,0}c\"\nr\"ab{0}c\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"abc\"\nr\"ac\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6396"
      }
    },
    {
      "name": "Character classes in regular expressions should not contain only one character",
      "description": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"a[b]c\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"abc\"\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6397"
      }
    },
    {
      "name": "Disabling CSRF protections is security-sensitive",
      "description": "<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application, the code is sensitive when,</p>\n<ul>\n  <li> <code>django.middleware.csrf.CsrfViewMiddleware</code> is not used in the <a\n  href=\"https://docs.djangoproject.com/en/3.0/topics/settings/\">Django settings</a>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] # Sensitive: django.middleware.csrf.CsrfViewMiddleware is missing\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\n@csrf_exempt # Sensitive\ndef example(request):\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application, the code is sensitive when,</p>\n<ul>\n  <li> the <code>WTF_CSRF_ENABLED</code> setting is set to <code>false</code>: </li>\n</ul>\n<pre>\napp = Flask(__name__)\napp.config['WTF_CSRF_ENABLED'] = False # Sensitive\n</pre>\n<ul>\n  <li> the application doesn’t use the <code>CSRFProtect</code> module: </li>\n</ul>\n<pre>\napp = Flask(__name__) # Sensitive: CSRFProtect is missing\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a view: </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app)\n\n@app.route('/example/', methods=['POST'])\n@csrf.exempt # Sensitive\ndef example():\n    return 'example '\n</pre>\n<ul>\n  <li> the CSRF protection is disabled on a form: </li>\n</ul>\n<pre>\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = False # Sensitive\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>Compliant Solution</h2>\n<p>For a <a href=\"https://docs.djangoproject.com/fr/3.0/ref/csrf/\">Django</a> application,</p>\n<ul>\n  <li> it is recommended to protect all the views with <code>django.middleware.csrf.CsrfViewMiddleware</code>: </li>\n</ul>\n<pre>\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware', # Compliant\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</pre>\n<ul>\n  <li> and to not disable the CSRF protection on specific views: </li>\n</ul>\n<pre>\ndef example(request): # Compliant\n    return HttpResponse(\"default\")\n</pre>\n<p>For a <a href=\"https://flask-wtf.readthedocs.io/en/latest/csrf.html\">Flask</a> application,</p>\n<ul>\n  <li> the <code>CSRFProtect</code> module should be used (and not disabled further with <code>WTF_CSRF_ENABLED</code> set to <code>false</code>):\n  </li>\n</ul>\n<pre>\napp = Flask(__name__)\ncsrf = CSRFProtect()\ncsrf.init_app(app) # Compliant\n</pre>\n<ul>\n  <li> and it is recommended to not disable the CSRF protection on specific views or forms: </li>\n</ul>\n<pre>\n@app.route('/example/', methods=['POST']) # Compliant\ndef example():\n    return 'example '\n\nclass unprotectedForm(FlaskForm):\n    class Meta:\n        csrf = True # Compliant\n\n    name = TextField('name')\n    submit = SubmitField('submit')\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4502"
      }
    },
    {
      "name": "\"<>\" should not be used to test inequality",
      "description": "<p>The forms <code>&lt;&gt;</code> and <code>!=</code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;</code> form is considered obsolete.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn a &lt;&gt; b # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn a != b\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:InequalityUsage"
      }
    },
    {
      "name": "Track uses of \"NOSONAR\" comments",
      "description": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor d in lib_dirs:\n    # NOSONAR: lib_dirs is undefined\n    pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:NoSonar"
      }
    },
    {
      "name": "Collapsible \"if\" statements should be merged",
      "description": "<p>Merging collapsible <code>if</code> statements increases the code’s readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif condition1:\n    if condition2:\n        # ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif condition1 and condition2:\n    # ...\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1066"
      }
    },
    {
      "name": "Redundant pairs of parentheses should be removed",
      "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y / 2)) + 1   # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y / 2 + 1\nx = (y / 2) + 1\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1110"
      }
    },
    {
      "name": "Unused function parameters should be removed",
      "description": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef do_something(a, b): # \"b\" is unused\n  return compute(a)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef do_something(a):\n  return compute(a)\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are ignored.</p>\n<pre>\nclass C(B):\n  def do_something(self, a, b): # no issue reported on b\n    return self.compute(a)\n}\n</pre>\n<p>Throwaway variables <code>_</code>.</p>\n<pre>\ndef do_something(a, _): # no issue reported on _\n  return compute(a)\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1172"
      }
    },
    {
      "name": "Functions and methods should not be empty",
      "description": "<p>There are several reasons for a function or a method not to have a body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef myfunc1(foo=\"Noncompliant\"):\n    pass\n\nclass MyClass:\n    def mymethod1(self, foo=\"Noncompliant\"):\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef myfunc1():\n    pass  # comment explaining why this function is empty\n\ndef myfunc2():\n    raise NotImplementedError()\n\ndef myfunc3():\n    \"\"\"\n    Docstring explaining why this function is empty.\n    \"\"\"\n\nclass MyClass:\n    def mymethod1(self):\n        pass  # comment explaining why this function is empty\n\n    def mymethod2(self):\n        raise NotImplementedError()\n\n    def mymethod3(self):\n        \"\"\"\n        Docstring explaining why this method is empty. Note that this is not recommended for classes\n        which are meant to be subclassed.\n        \"\"\"\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when the empty method is abstract and meant to be overriden in a subclass, i.e. it is decorated with\n<code>abc.abstractmethod</code>, <code>abc.abstractstaticmethod</code>, <code>abc.abstractclassmethod</code> or <code>abc.abstractproperty</code>.\nNote however that these methods should normally have a docstring explaining how subclasses should implement these methods.</p>\n<pre>\nimport abc\n\nclass MyAbstractClass(abc.ABC):\n    @abc.abstractproperty\n    def myproperty(self):\n        pass\n\n    @abc.abstractclassmethod\n    def myclassmethod(cls):\n        pass\n\n    @abc.abstractmethod\n    def mymethod(self):\n        pass\n\n    @abc.abstractstaticmethod\n    def mystaticmethod():\n        pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1186"
      }
    },
    {
      "name": "Unused local variables should be removed",
      "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant\n    print(name)\nfor i in range(10):\n    foo()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\nfor _ in range(10):\n    foo()\n</pre>\n<h2>Exceptions</h2>\n<p><code>_</code> as well as tuples will not raise an issue for this rule. The following examples are compliant:</p>\n<pre>\nfor _ in range(10):\n    do_something()\nusername, login, password = auth\ndo_something_else(username, login)\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1481"
      }
    },
    {
      "name": "Unused assignments should be removed",
      "description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(a, b, compute):\n    i = a + b  # Noncompliant; calculation result not used before value is overwritten\n    i = compute()\n    return i\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(a, b, compute):\n    i = a + b\n    i += compute()\n    return i\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>None</code>, <code>True</code>, <code>False</code> and <code>\"\"</code>.</p>\n<p>No issue will be raised on unpacked variables.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/563\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1854"
      }
    },
    {
      "name": "Related \"if/else if\" statements should not have the same condition",
      "description": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1862"
      }
    },
    {
      "name": "Silly equality checks should not be made",
      "description": "<p>In some cases a comparison with operators <code>==</code>, or <code>!=</code> will always return True or always return False. When this happens,\nthe comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing unrelated builtin types such as string and integer. </li>\n  <li> comparing class instances which do not implement <code>__eq__</code> or <code>__ne__</code> to an object of a different type (builtin or from\n  an unrelated class which also doesn’t implement <code>__eq__</code> or <code>__ne__</code>). </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo = 1 == \"1\"  # Noncompliant. Always False.\n\nfoo = 1 != \"1\"  # Noncompliant. Always True.\n\nclass A:\n    pass\n\nmyvar = A() == 1  # Noncompliant. Always False.\nmyvar = A() != 1  # Noncompliant. Always True.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo = 1 == int(\"1\")\n\nfoo = str(1) != \"1\"\n\nclass Eq:\n    def __eq__(self, other):\n        return True\n\nmyvar = Eq() == 1\nmyvar = 1 == Eq()\nmyvar = Eq() != 1  # Ok. \"__ne__\" calls \"__eq__\" by default\nmyvar = 1 != Eq()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2159"
      }
    },
    {
      "name": "Wildcard imports should not be used",
      "description": "<p>Importing every public name from a module using a wildcard (<code>from mymodule import *</code>) is a bad idea because:</p>\n<ul>\n  <li> It could lead to conflicts between names defined locally and the ones imported. </li>\n  <li> It reduces code readability as developers will have a hard time knowing where names come from. </li>\n  <li> It clutters the local namespace, which makes debugging more difficult. </li>\n</ul>\n<p>Remember that imported names can change when you update your dependencies. A wildcard import which works today might be broken tomorrow.</p>\n<p>There are two ways to avoid a wildcard import:</p>\n<ul>\n  <li> Replace it with <code>import mymodule</code> and access module members as <code>mymodule.myfunction</code>. If the module name is too long,\n  alias it to a shorter name. Example: <code>import pandas as pd</code> </li>\n  <li> List every imported name. If necessary import statements can be split on multiple lines using parentheses (preferred solution) or backslashes.\n  </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom math import *  # Noncompliant\ndef exp(x):\n    pass\nprint(exp(0))   # \"None\" will be printed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport math\ndef exp(x):\n    pass\nprint(math.exp(0))   # \"1.0\" will be printed\n</pre>\n<p>Or</p>\n<pre>\nfrom math import exp as m_exp\ndef exp(x):\n    pass\nprint(m_exp(0))   # \"1.0\" will be printed\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised in <code>__init__.py</code> files. Wildcard imports are a common way of populating these modules.</p>\n<p>No issue will be raised in modules doing only imports. Local modules are sometimes created as a proxy for third-party modules.</p>\n<pre>\n# file: mylibrary/pyplot.py\ntry:\n    from guiqwt.pyplot import *  # Ok\nexcept Exception:\n    from matplotlib.pyplot import *  # Ok\n</pre>\n<p>Just keep in mind that wildcard imports might still create issues in these cases. It’s always better to import only what you need.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/reference/simple_stmts.html#import\">Python documentation - The import statement</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2208"
      }
    },
    {
      "name": "String formatting should not lead to runtime errors",
      "description": "<p>Formatting strings, either with the <code>%</code> operator or <code>str.format</code> method, requires a valid string and arguments matching this\nstring’s replacement fields.</p>\n<p>This rule raises an issue when formatting a string will raise an exception because the input string or arguments are invalid. Rule\n<a href='/coding_rules#rule_key=python%3AS3457'>S3457</a> covers cases where no exception is raised and the resulting string is simply not formatted properly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprint('Error code %d' % '42')  # Noncompliant. Replace this value with a number as %d requires.\n\nprint('User {1} is not allowed to perform this action'.format('Bob'))  # Noncompliant. Replacement field numbering should start at 0.\n\nprint('User {0} has not been able to access {}'.format('Alice', 'MyFile'))  # Noncompliant. Use only manual or only automatic field numbering, don't mix them.\n\nprint('User {a} has not been able to access {b}'.format(a='Alice'))  # Noncompliant. Provide a value for field \"b\".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprint('Error code %d' % 42)\n\nprint('User {0} is not allowed to perform this action'.format('Bob'))\n\nprint('User {0} has not been able to access {1}'.format('Alice', 'MyFile'))\n\nprint('User {a} has not been able to access {b}'.format(a='Alice', b='MyFile'))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2275"
      }
    },
    {
      "name": "The first argument to class methods should follow the naming convention",
      "description": "<p>By convention, the first argument to class methods, i.e. methods decorated with <code>@classmethod</code>, is named <code>cls</code> as a\nrepresentation and a reminder that the argument is the class itself. Name the argument something else, and you stand a good chance of confusing both\nusers and maintainers of the code. It might also indicate that the <code>cls</code> parameter was forgotten, in which case calling the method will\nmost probably fail. This rule also applies to methods <code>__init_subclass__</code>, <code>__class_getitem__</code> and <code>__new__</code> as their\nfirst argument is always the class instead of \"self\".</p>\n<p>By default this rule accepts <code>cls</code> and <code>mcs</code>, which is sometime used in metaclasses, as valid names for class parameters. You\ncan set your own list of accepted names via the parameter <code>classParameterNames</code>.</p>\n<p>This rule raises an issue when the first parameter of a class method is not an accepted name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Rectangle(object):\n\n  @classmethod\n  def area(bob, height, width):  #Noncompliant\n    return height * width\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Rectangle(object):\n\n  @classmethod\n  def area(cls, height, width):\n    return height * width\n</pre>\n<h2>See</h2>\n<ul>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2710"
      }
    },
    {
      "name": "\"yield\" and \"return\" should not be used outside functions",
      "description": "<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError</code>. To break out of a loop, use <code>break</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    while True:\n        return False #Noncompliant\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2711"
      }
    },
    {
      "name": "\"return\" and \"yield\" should not be used in the same function",
      "description": "<p>Functions that use <code>yield</code> are known as \"generators\". Before Python 3.3, generators cannot <code>return</code> values. Similarly,\nfunctions that use <code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>\n<p>Either upgrade your version of Python to a version &gt;= 3.3, or don’t use both return and yield in a function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2712"
      }
    },
    {
      "name": "Only strings should be listed in \"__all__\"",
      "description": "<p><code>__all__</code> is used to define the list of module’s names that should be imported when <code>from package import *</code> is used. For that\nreason, it may only contain strings.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    pass\n\n__all__ = [\n    MyClass  # Noncompliant\n]\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    pass\n\n__all__ = [\n    \"MyClass\"\n]\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - Importing * From a Package</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2823"
      }
    },
    {
      "name": "Loops without \"break\" should not have \"else\" clauses",
      "description": "<p>The <code>else</code> clause of a loop is skipped when a <code>break</code> is executed in this loop. In other words, a loop with an\n<code>else</code> but no <code>break</code> statement will always execute the <code>else</code> part (unless of course an exception is raised or\n<code>return</code> is used). If this is what the developer intended, it would be much simpler to have the <code>else</code> statement removed and its\nbody unindented. Thus having a loop with an <code>else</code> and no <code>break</code> is most likely an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom typing import List\n\ndef search_first_number_without_break(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    else:  # Noncompliant. This will be executed every time\n        raise ValueError(\"List does not contain any number\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom typing import List\n\ndef search_first_number_with_break(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            break\n    else:\n        raise ValueError(\"List does not contain any number\")\n    return elt\n</pre>\n<p>or</p>\n<pre>\nfrom typing import List\n\ndef search_first_number_without_else(elements: List[str]):\n    for elt in elements:\n        if elt.isnumeric():\n            return elt\n    raise ValueError(\"List does not contain any number\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops\">Python documentation -\n  break and continue Statements, and else Clauses on Loops</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2836"
      }
    },
    {
      "name": "Conditional expressions should not be nested",
      "description": "<p>Just because you <em>can</em> do something, doesn’t mean you should, and that’s the case with nested conditional expressions. Nesting conditional\nexpressions results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future\nyou) scratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        return \"Running\" if job.is_running else \"Failed\" if job.errors else \"Succeeded\"  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Job:\n    @property\n    def readable_status(self):\n        if job.is_running:\n            return \"Running\"\n        return \"Failed\" if job.errors else \"Succeeded\"\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised on conditional expressions in comprehensions.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3358"
      }
    },
    {
      "name": "All branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having the same implementation in every branch of an <code>if</code> chain is an error. Either a copy-paste error was made and something different\nshould be executed, or there shouldn’t be an <code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif b == 0:  # Noncompliant\n    doOneMoreThing()\nelif b == 1:\n    doOneMoreThing()\nelse:\n    doOneMoreThing()\n\nb = 4 if a &gt; 12 else 4  # Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s.</p>\n<pre>\nif b == 0:  # no issue, this could have been done on purpose to make the code more readable\n    doOneMoreThing()\nelif b == 1:\n    doOneMoreThing()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3923"
      }
    },
    {
      "name": "Delivering code in production with debug features activated is security-sensitive",
      "description": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An application’s debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debug features on production servers or applications distributed to end users.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom django.conf import settings\n\nsettings.configure(DEBUG=True)  # Sensitive when set to True\nsettings.configure(DEBUG_PROPAGATE_EXCEPTIONS=True)  # Sensitive when set to True\n\ndef custom_config(config):\n    settings.configure(default_settings=config, DEBUG=True)  # Sensitive\n</pre>\n<p>Django’s \"settings.py\" or \"global_settings.py\" configuration file:</p>\n<pre>\n# NOTE: The following code raises issues only if the file is named \"settings.py\" or \"global_settings.py\". This is the default\n# name of Django configuration file\n\nDEBUG = True  # Sensitive\nDEBUG_PROPAGATE_EXCEPTIONS = True  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Active Debug Code </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/215\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4507"
      }
    },
    {
      "name": "Expanding archive files without controlling resource consumption is security-sensitive",
      "description": "<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular it’s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\ntfile = tarfile.open(\"TarBomb.tar\")\ntfile.extractall('./tmp/')  # Sensitive\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nzfile.extractall('./tmp/') # Sensitive\nzfile.close()\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3.5/library/tarfile.html\">tarfile</a> module:</p>\n<pre>\nimport tarfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\ntfile = tarfile.open(\"TarBomb.tar\")\nfor entry in tfile:\n  tarinfo = tfile.extractfile(entry)\n\n  totalEntryArchive += 1\n  sizeEntry = 0\n  result = b''\n  while True:\n    sizeEntry += 1024\n    totalSizeArchive += 1024\n\n    ratio = sizeEntry / entry.size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    chunk = tarinfo.read(1024)\n    if not chunk:\n      break\n\n    result += chunk\n\n  if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n    # too much entries in this archive, can lead to inodes exhaustion of the system\n    break\n\n  if totalSizeArchive &gt; THRESHOLD_SIZE:\n    # the uncompressed data size is too much for the application resource capacity\n    break\n\ntfile.close()\n</pre>\n<p>For <a href=\"https://docs.python.org/dev/library/zipfile.html\">zipfile</a> module:</p>\n<pre>\nimport zipfile\n\nTHRESHOLD_ENTRIES = 10000\nTHRESHOLD_SIZE = 1000000000\nTHRESHOLD_RATIO = 10\n\ntotalSizeArchive = 0;\ntotalEntryArchive = 0;\n\nzfile = zipfile.ZipFile('ZipBomb.zip', 'r')\nfor zinfo in zfile.infolist():\n    print('File', zinfo.filename)\n    data = zfile.read(zinfo)\n\n    totalEntryArchive += 1\n\n    totalSizeArchive = totalSizeArchive + len(data)\n    ratio = len(data) / zinfo.compress_size\n    if ratio &gt; THRESHOLD_RATIO:\n      # ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n      break\n\n    if totalSizeArchive &gt; THRESHOLD_SIZE:\n      # the uncompressed data size is too much for the application resource capacity\n      break\n\n    if totalEntryArchive &gt; THRESHOLD_ENTRIES:\n      # too much entries in this archive, can lead to inodes exhaustion of the system\n      break\n\nzfile.close()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> -\n  Security Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/409\">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5042"
      }
    },
    {
      "name": "Sending emails is security-sensitive",
      "description": "<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>\n<p><strong>Information Exposure</strong></p>\n<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>\n<p><strong>Spamming / Phishing</strong></p>\n<p>Malicious user can abuse email based feature to send spam or phishing content.</p>\n<p><strong>Dangerous Content Injection</strong></p>\n<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>\n<p><strong>Email Headers Injection</strong></p>\n<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email \"headers\".&nbsp;\nUsing unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.\nAlthough modern libraries are filtering new line character by default, user data used in&nbsp;email \"headers\" should always be validated.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801\">CVE-2017-9801</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803\">CVE-2016-4803</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Unvalidated user input are used to set email headers. </li>\n  <li> Email content contains data provided by users and it is not sanitized. </li>\n  <li> Email recipient list or body are based on user inputs. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use an email library which sanitizes headers (Flask-Mail or django.core.mail). </li>\n  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>\n  <li> Verify application logic to make sure that email base feature can not be abuse to:\n    <ul>\n      <li> Send arbitrary email for spamming or fishing </li>\n      <li> Disclose sensitive email content </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>smtplib</p>\n<pre>\nimport smtplib\n\ndef send(from_email, to_email, msg):\n  server = smtplib.SMTP('localhost', 1025)\n  server.sendmail(from_email, to_email, msg) # Sensitive\n</pre>\n<p>Django</p>\n<pre>\nfrom django.core.mail import send_mail\n\ndef send(subject, msg, from_email, to_email):\n  send_mail(subject, msg, from_email, [to_email]) # Sensitive\n</pre>\n<p>Flask-Mail</p>\n<pre>\nfrom flask import Flask\nfrom flask_mail import Mail, Message\n\napp = Flask(__name__)\n\ndef send(subject, msg, from_email, to_email):\n    mail = Mail(app)\n    msg = Message(subject, [to_email], body, sender=from_email)\n    mail.send(msg) # Sensitive{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.damonkohler.com/2008/12/email-injection.html\">Email Injection</a> </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/93\">MITRE, CWE-93</a> - Improper Neutralization of CRLF Sequences ('CRLF Injection') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/80\">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5300"
      }
    },
    {
      "name": "Encryption algorithms should be used with secure mode and padding scheme",
      "description": "<p>Encryption algorithms should use secure modes and padding schemes where appropriate to guarantee data confidentiality and integrity.</p>\n<ul>\n  <li> For block cipher encryption algorithms (like AES):\n    <ul>\n      <li> The ECB (Electronic Codebook) cipher mode doesn’t provide serious message confidentiality: under a given key any given plaintext block\n      always gets encrypted to the same ciphertext block. This mode should never be used. </li>\n      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality. This cipher mode is also vulnerable to <a\n      href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">padding oracle attacks</a> when used with padding. Using CBC along with Message\n      Authentication Code can provide data integrity and should prevent such attacks. In practice the implementation has many pitfalls and it’s\n      recommended to avoid CBC with padding completely. </li>\n      <li> The GCM (Galois Counter Mode) mode which <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works\n      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.\n      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>\n    </ul>  </li>\n  <li> For RSA encryption algorithm, the recommended padding scheme is OAEP. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodomex</a> library:</p>\n<pre>\nfrom Cryptodome.Cipher import AES, PKCS1_OAEP,  PKCS1_v1_5\nfrom Cryptodome.Random import get_random_bytes\nfrom Cryptodome.PublicKey import RSA\n\n# Example for a symmetric cipher: AES\nAES.new(key, AES.MODE_ECB)  # Noncompliant\nAES.new(key, AES.MODE_CBC)  # Noncompliant\n\n# Example for a asymmetric cipher: RSA\ncipher = PKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<p><a href=\"https://cryptography.io/en/latest/\">pyca</a> library:</p>\n<pre>\nimport os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\n\n# Example for a symmetric cipher: AES\naes = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())  # Noncompliant\naes = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())  # Noncompliant\n\n# Example for a asymmetric cipher: RSA\nciphertext = public_key.encrypt(\n  message,\n  padding.PKCS1v15() # Noncompliant\n)\n\nplaintext = private_key.decrypt(\n  ciphertext,\n  padding.PKCS1v15() # Noncompliant\n)\n</pre>\n<p><a href=\"https://pypi.org/project/pyDes/\">pydes</a> library:</p>\n<pre>\n# For DES cipher\ndes = pyDes.des('ChangeIt') # Noncompliant\ndes = pyDes.des('ChangeIt', pyDes.CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) # Noncompliant\ndes = pyDes.des('ChangeIt', pyDes.ECB, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) # Noncompliant\n</pre>\n<p><a href=\"https://pycrypto.readthedocs.io/en/latest/\">pycrypto</a> library is not maintained and therefore should not be used:</p>\n<pre>\n# https://pycrypto.readthedocs.io/en/latest/\nfrom Crypto.Cipher import *\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Util import Counter\nfrom Crypto.PublicKey import RSA\n\n# Example for a symmetric cipher: AES\nAES.new(key, AES.MODE_ECB)  # Noncompliant\nAES.new(key, AES.MODE_CBC, IV=iv)  # Noncompliant\n\n# Example for a asymmetric cipher: RSA\ncipher = PKCS1_v1_5.new(key) # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodomex</a> library:</p>\n<pre>\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Random import get_random_bytes\nfrom Cryptodome.PublicKey import RSA\n\n# AES is the recommended symmetric cipher with GCM mode\nAES.new(key, AES.MODE_GCM)  # Compliant\n\n# RSA is the recommended asymmetric cipher with OAEP padding\ncipher = PKCS1_OAEP.new(key) # Compliant\n</pre>\n<p><a href=\"https://cryptography.io/en/latest/\">pyca</a> library:</p>\n<pre>\nimport os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives import hashes\n\n# AES is the recommended symmetric cipher with GCM mode\naes = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())  # Compliant\n\n# RSA is the recommended asymmetric cipher with OAEP padding\nciphertext = public_key.encrypt(\n  message,\n  padding.OAEP( # Compliant\n    mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    algorithm=hashes.SHA256(),\n    label=None\n  )\n)\n\nplaintext = private_key.decrypt(\n  ciphertext,\n  padding.OAEP( # Compliant\n    mgf=padding.MGF1(algorithm=hashes.SHA256()),\n    algorithm=hashes.SHA256(),\n    label=None\n  )\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5542"
      }
    },
    {
      "name": "Cipher algorithms should be robust",
      "description": "<p><a href=\"https://en.wikipedia.org/wiki/Strong_cryptography\">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.</p>\n<p>A general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.</p>\n<p>More specifically for block cipher, it’s not recommended to use algorithm with a block size inferior than 128 bits.</p>\n<h2>Noncompliant Code Example</h2>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodomex</a> library:</p>\n<pre>\nfrom Cryptodome.Cipher import DES, DES3, ARC2, ARC4, Blowfish, AES\nfrom Cryptodome.Random import get_random_bytes\n\nkey = b'-8B key-'\nDES.new(key, DES.MODE_OFB) # Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\n\nkey = DES3.adjust_key_parity(get_random_bytes(24))\ncipher = DES3.new(key, DES3.MODE_CFB) # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\n\nkey = b'Sixteen byte key'\ncipher = ARC2.new(key, ARC2.MODE_CFB) # Noncompliant: RC2 is vulnerable to a related-key attack\n\nkey = b'Very long and confidential key'\ncipher = ARC4.new(key) # Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n\nkey = b'An arbitrarily long key'\ncipher = Blowfish.new(key, Blowfish.MODE_CBC) # Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks\n</pre>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodome</a> library:</p>\n<pre>\nfrom Crypto.Cipher import DES, DES3, ARC2, ARC4, Blowfish, AES\nfrom Crypto.Random import get_random_bytes\n\nkey = b'-8B key-'\nDES.new(key, DES.MODE_OFB) # Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\n\nkey = DES3.adjust_key_parity(get_random_bytes(24))\ncipher = DES3.new(key, DES3.MODE_CFB) # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\n\nkey = b'Sixteen byte key'\ncipher = ARC2.new(key, ARC2.MODE_CFB) # Noncompliant: RC2 is vulnerable to a related-key attack\n\nkey = b'Very long and confidential key'\ncipher = ARC4.new(key) # Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n\nkey = b'An arbitrarily long key'\ncipher = Blowfish.new(key, Blowfish.MODE_CBC) # Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks\n</pre>\n<p><a href=\"https://cryptography.io/en/latest/\">pyca</a> library:</p>\n<pre>\nimport os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\nkey = os.urandom(16)\niv = os.urandom(16)\n\ntdes4 = Cipher(algorithms.TripleDES(key), mode=None, backend=default_backend()) # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\nbf3 = Cipher(algorithms.Blowfish(key), mode=None, backend=default_backend()) # Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks\nrc42 = Cipher(algorithms.ARC4(key), mode=None, backend=default_backend()) # Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n</pre>\n<p><a href=\"https://pypi.org/project/pyDes/\">pydes</a> library:</p>\n<pre>\nimport pyDes;\n\ndes1 = pyDes.des('ChangeIt')  # Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\ndes2 = pyDes.des('ChangeIt', pyDes.CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) # Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\n\ntdes1 = pyDes.triple_des('ChangeItWithYourKey!!!!!')  # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\ntdes2 = pyDes.triple_des('ChangeItWithYourKey!!!!!', pyDes.CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=pyDes.PAD_PKCS5) # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\n</pre>\n<p><a href=\"https://pycrypto.readthedocs.io/en/latest/\">pycrypto</a> library is not maintained and therefore should not be used:</p>\n<pre>\nfrom Crypto.Cipher import *\n\ndes3 = DES.new('ChangeIt') # Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\ntdes3 = DES3.new('ChangeItChangeIt') # Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\nbf2 = Blowfish.new('ChangeItWithYourKey', Blowfish.MODE_CBC, 'ChangeIt') # Noncompliant: Blowfish use a 64-bit block size makes it\nrc21 = ARC2.new('ChangeItWithYourKey', ARC2.MODE_CFB, 'ChangeIt') # Noncompliant: RC2 is vulnerable to a related-key attack\nrc41 = ARC4.new('ChangeItWithYourKey') # Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodomex</a> library:</p>\n<pre>\nfrom Cryptodome.Cipher import AES\n\nkey = b'Sixteen byte key'\ncipher = AES.new(key, AES.MODE_CCM) # Compliant\n</pre>\n<p><a href=\"https://pycryptodome.readthedocs.io\">pycryptodome</a> library:</p>\n<pre>\nfrom Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\ncipher = AES.new(key, AES.MODE_CCM) # Compliant\n</pre>\n<p><a href=\"https://cryptography.io/en/latest/\">pyca</a> library:</p>\n<pre>\nimport os\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\n\nkey = os.urandom(16)\niv = os.urandom(16)\n\naes2 = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend()) # Compliant\n</pre>\n<p><a href=\"https://pycrypto.readthedocs.io/en/latest/\">pycrypto</a> library is not maintained and therefore should not be used:</p>\n<pre>\nfrom Crypto.Cipher import *\n\naes1 = AES.new('This is a key123', AES.MODE_CBC, 'This is an IV456') # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5547"
      }
    },
    {
      "name": "Function arguments should be passed only once",
      "description": "<p>When a function is called, it accepts only one value per parameter. Python interpreters will raise a SyntaxError when they see something like\n<code>myfunction(a=1, a=2)</code>, but there are other cases which will only fail at runtime:</p>\n<ul>\n  <li> An argument is provided by value and position at the same time. </li>\n  <li> Some arguments are provided via unpacking and the same argument is provided twice. </li>\n</ul>\n<p>This rule raises an issue when a function is called with multiple values for the same parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(a, b, c):\n    return a * b * c\n\nfunc(6, 93, 31, c=62) # Noncompliant: argument \"c\" is duplicated\n\nparams = {'c':31}\nfunc(6, 93, 31, **params) # Noncompliant: argument \"c\" is duplicated\nfunc(6, 93, c=62, **params) # Noncompliant: argument \"c\" is duplicated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(a, b, c):\n    return a * b * c\n\nprint(func(c=31, b=93, a=6)) # Compliant\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5549"
      }
    },
    {
      "name": "Unused scope-limited definitions should be removed",
      "description": "<p>When a class or function is defined in a parent function or method, it is only visible in this parent function or method’s scope. If the defined\nclass or function is not used within this scope it is dead code, i.e. unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef noncompliant():\n    def nested_function():  # Noncompliant\n        print(\"nested_function\")\n\n    class NestedClass:  # Noncompliant\n        def __init__(self):\n            print(\"NestedClass\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef compliant():\n    def nested_function():\n        print(\"nested_function\")\n\n    class NestedClass:\n        def __init__(self):\n            print(\"NestedClass\")\n\n    nested_function()\n    NestedClass()\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5603"
      }
    },
    {
      "name": "Operators should be used on compatible types",
      "description": "<p>Calling an operator in python is equivalent to calling a special method (except for the identity operator <code>is</code>). Python provides a set\nof built-in operations. It is for example possible to add two integers: <code>1 + 2</code>. It is however not possible to add a string and an integer:\n<code>1 + \"2\"</code> and such an operation will raise a <code>TypeError</code>.</p>\n<p>It is possible to define how an operator will behave with a custom class by defining the corresponding special method. See python documentation for\na complete list of operators and their methods: <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#emulating-numeric-types\">arithmetic and bitwise\noperators</a>, <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#object.__lt__\">comparison\noperators</a>.</p>\n<p>For symmetrical binary operators you need to define two methods so that the order of operands doesn’t matter, ex: <code>__add__</code> and\n<code>__radd__</code>.</p>\n<p>This rule raises an issue when an operator is used on incompatible types. Types are considered incompatible if no built-in operations between those\ntypes exist and none of the operands has implemented the corresponding special methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\n1 + 2\n1 + \"2\"  # Noncompliant\nEmpty() + 1  # Noncompliant\nAdd() + 1\n1 + Add()  # Noncompliant\nAdd() + Empty()\nEmpty() + Add()  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Empty:\n    pass\n\nclass Add:\n    def __add__(self, other):\n        return 42\n\n    def __radd__(self, other):\n        return 42\n\nAdd() + 1\n1 + Add()\nAdd() + Empty()\nEmpty() + Add()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#object.__lt__\">Rich\n  comparison methods</a> </li>\n  <li> Python documentation - <a\n  href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special%20methods#emulating-numeric-types\">Emulating numeric types</a>\n  </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5607"
      }
    },
    {
      "name": "Arguments given to functions should be of an expected type",
      "description": "<p>The CPython interpreter does not check arguments type when functions are called. However a function can express the type it expects for each\nargument in its documentation or by using <a href=\"https://www.python.org/dev/peps/pep-0484/\">Type Hints</a>. Calling such a function with an argument\nof a different type can easily create a bug. Even if it works right now it can fail later when APIs evolve or when type checks are added (ex: with\n<code>isinstance</code>).</p>\n<p>This rule raises an issue when a function or method is called with an argument of a different type than the one described in its type annotations.\nIt also checks argument types for builtin functions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(var: str):\n    pass\n\nfunc(42)  # Noncompliant\n\nlen(1)  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(var: str):\n    pass\n\nfunc(\"42\")\n\nlen(\"1\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#built-in-funcs\">Python documentation - builtins</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0484/\">PEP 484 — Type Hints</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python documentation - typing — Support for type hints</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5655"
      }
    },
    {
      "name": "JWT should be signed and verified",
      "description": "<p>If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user\nidentities.</p>\n<ul>\n  <li> Don’t use <code>none</code> algorithm to sign or verify the validity of a token. </li>\n  <li> Don’t use a token without verifying its signature before. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>For <a href=\"https://github.com/jpadilla/pyjwt\">pyjwt</a> module:</p>\n<pre>\njwt.decode(token, verify = False)  # Noncompliant\njwt.decode(token, key, options={\"verify_signature\": False})  # Noncompliant\n</pre>\n<p>For <a href=\"https://github.com/davedoesdev/python-jwt\">python_jwt</a> module:</p>\n<pre>\njwt.process_jwt(token)  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://github.com/jpadilla/pyjwt\">pyjwt</a> module:</p>\n<pre>\njwt.decode(token, key, algo)\n</pre>\n<p>For <a href=\"https://github.com/davedoesdev/python-jwt\">python_jwt</a> module:</p>\n<pre>\njwt.process_jwt(token)  #  Compliant because followed by verify_jwt()\njwt.verify_jwt(token, key, algo)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/347\">MITRE, CWE-347</a> - Improper Verification of Cryptographic Signature </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5659"
      }
    },
    {
      "name": "Some special methods should return \"NotImplemented\" instead of raising \"NotImplementedError\"",
      "description": "<p>In Python, special methods corresponding to numeric operators, rich comparison operators and the <code>__length_hint__</code> method should return\n<code>NotImplemented</code> when the operation is not supported. These methods should not raise <code>NotImplementedError</code> as callers don’t\nexpect it and won’t catch this exception.</p>\n<p>For example <code>A + B</code> is equivalent to calling <code>A.__add__(B)</code>. If this binary operation is not supported by class A,\n<code>A.__add__(B)</code> should return <code>NotImplemented</code>. The interpreter will then try the reverse operation, i.e.\n<code>B.__radd__(A)</code>. This enables adding new operations by changing only one class instead of two.</p>\n<p>This rule raises an issue when one of the following methods raises <code>NotImplementedError</code> instead of returning\n<code>NotImplemented</code>:</p>\n<ul>\n  <li> __lt__(self, other) </li>\n  <li> __le__(self, other) </li>\n  <li> __eq__(self, other) </li>\n  <li> __ne__(self, other) </li>\n  <li> __gt__(self, other) </li>\n  <li> __ge__(self, other) </li>\n  <li> __add__(self, other) </li>\n  <li> __sub__(self, other) </li>\n  <li> __mul__(self, other) </li>\n  <li> __matmul__(self, other) </li>\n  <li> __truediv__(self, other) </li>\n  <li> __floordiv__(self, other) </li>\n  <li> __mod__(self, other) </li>\n  <li> __divmod__(self, other) </li>\n  <li> __pow__(self, other[, modulo]) </li>\n  <li> __lshift__(self, other) </li>\n  <li> __rshift__(self, other) </li>\n  <li> __and__(self, other) </li>\n  <li> __xor__(self, other) </li>\n  <li> __or__(self, other) </li>\n  <li> __radd__(self, other) </li>\n  <li> __rsub__(self, other) </li>\n  <li> __rmul__(self, other) </li>\n  <li> __rmatmul__(self, other) </li>\n  <li> __rtruediv__(self, other) </li>\n  <li> __rfloordiv__(self, other) </li>\n  <li> __rmod__(self, other) </li>\n  <li> __rdivmod__(self, other) </li>\n  <li> __rpow__(self, other[, modulo]) </li>\n  <li> __rlshift__(self, other) </li>\n  <li> __rrshift__(self, other) </li>\n  <li> __rand__(self, other) </li>\n  <li> __rxor__(self, other) </li>\n  <li> __ror__(self, other) </li>\n  <li> __iadd__(self, other) </li>\n  <li> __isub__(self, other) </li>\n  <li> __imul__(self, other) </li>\n  <li> __imatmul__(self, other) </li>\n  <li> __itruediv__(self, other) </li>\n  <li> __ifloordiv__(self, other) </li>\n  <li> __imod__(self, other) </li>\n  <li> __ipow__(self, other[, modulo]) </li>\n  <li> __ilshift__(self, other) </li>\n  <li> __irshift__(self, other) </li>\n  <li> __iand__(self, other) </li>\n  <li> __ixor__(self, other) </li>\n  <li> __ior__(self, other) </li>\n  <li> __length_hint__(self) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    def __add__(self, other):\n        raise NotImplementedError()  # Noncompliant\n    def __radd__(self, other):\n        raise NotImplementedError()  # Noncompliant\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This will raise NotImplementedError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def __add__(self, other):\n        return NotImplemented\n    def __radd__(self, other):\n        return NotImplemented\n\nclass MyOtherClass:\n    def __add__(self, other):\n        return 42\n    def __radd__(self, other):\n        return 42\n\nMyClass() + MyOtherClass()  # This returns 42\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/constants.html#NotImplemented\">Built-in Constants - NotImplemented</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations\">Implementing the\n  arithmetic operations</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5712"
      }
    },
    {
      "name": "Boolean expressions of exceptions should not be used in \"except\" statements",
      "description": "<p>The only two possible types for an <code>except</code>'s expression are a class deriving from <code>BaseException</code>, or a tuple composed of\nsuch classes (or an old style class if you are using python 2, but this has been removed in python 3).</p>\n<p>This rule raises an issue when the expression used in an <code>except</code> block is a boolean expression of exceptions. The result of such\nexpression is a single exception class, which is valid but not what the developer intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry:\n    raise TypeError()\nexcept ValueError or TypeError:  # Noncompliant\n    print(\"Catching only ValueError\")\nexcept ValueError and TypeError:  # Noncompliant\n    print(\"catching only TypeError\")\nexcept (ValueError or TypeError) as exception:  # Noncompliant\n    print(\"Catching only ValueError\")\n\nfoo = ValueError or TypeError  # foo == ValueError\nfoo = ValueError and TypeError  # foo == TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry:\n    raise TypeError()\nexcept (ValueError, TypeError) as exception:\n    print(\"Catching all exceptions\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5714"
      }
    },
    {
      "name": "Function parameters' default values should not be modified or assigned",
      "description": "<p>In Python function parameters can have default values. These default values are expressions which are executed when the function is defined, i.e.\nonly once. The same default value will be used every time the function is called, thus modifying it will have an effect on every subsequent call. This\ncan create some very confusing bugs.</p>\n<p>It is also a bad idea to store mutable default value in another object (ex: as an attribute). Multiple instances will then share the same value and\nmodifying one objet will modify all of them.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a default value is either modified in the function or assigned to anything else than a variable and it has one of the following types:\n    <ul>\n      <li> builtins: set, dict, list. </li>\n      <li> <a href=\"https://docs.python.org/3/library/collections.html\">collections</a> module: deque, UserList, ChainMap, Counter, OrderedDict,\n      defaultdict, UserDict. </li>\n    </ul>  </li>\n  <li> or when an attribute of a default value is assigned. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>In the following example, the parameter \"param\" has <code>list()</code> as a default value. This list is created only once and then reused in every\ncall. Thus when it appends <code>'a'</code> to this list, the next call will have <code>['a']</code> as a default value.</p>\n<pre>\ndef myfunction(param=list()):  # Noncompliant.\n    param.append('a')  # modification of the default value.\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a', 'a']\nprint(myfunction()) # returns ['a', 'a', 'a']\n</pre>\n<p>In the following example the same list is used for multiple instances of MyClass.param.</p>\n<pre>\nclass MyClass:\n    def __init__(self, param=list()):  # Noncompliant.\n        self.param = param  # The same list is used for every instance of MyClass\n\n    def process(self, value):\n        self.param.append(value)  # modifying the same list\n\na1, a2 = (MyClass(), MyClass())\na1.process(\"value\")\nprint(a1.param)  # ['value']\nprint(a2.param)  # ['value']\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef myfunction(param=None):\n    if param is None:\n        param = list()\n    param.append('a')\n    return param\n\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\nprint(myfunction()) # returns ['a']\n</pre>\n<pre>\nclass MyClass:\n    def __init__(self, param=None):\n        if param is None:\n            self.param = list()\n        else:\n            self.param = param\n\n    def process(self, value):\n        self.param.append(value)\n\na1, a2 = (MyClass(), MyClass())\na1.process(\"value\")\nprint(a1.param)  # ['value']\nprint(a2.param)  # []\n</pre>\n<h2>Exceptions</h2>\n<p>In some very rare cases modifying a default value is ok. For example, default values can be used as a cache.</p>\n<p>No issue will be raised when the parameter’s name contains \"cache\" or \"memo\" (as in memoization).</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">The Hitchhiker’s Guide to Python - Common Gotchas</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Python documentation - Function definitions</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5717"
      }
    },
    {
      "name": "Instance and class methods should have at least one positional parameter",
      "description": "<p>Every instance method is expected to have at least one positional parameter. This parameter will reference the object instance on which the method\nis called. Calling an instance method which doesn’t have at least one parameter will raise a \"TypeError\". By convention, this first parameter is\nusually named \"self\".</p>\n<p>Class methods, i.e. methods annotated with <code>@classmethod</code>, also require at least one parameter. The only differences is that it will\nreceive the class itself instead of a class instance. By convention, this first parameter is usually named \"cls\". Note that <code>__new__</code> and\n<code>__init_subclass__</code> take a class as first argument even thought they are not decorated with <code>@classmethod</code>.</p>\n<p>This rule raises an issue when an instance of class method does not have at least one positional parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    def instance_method():  # Noncompliant. \"self\" parameter is missing.\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method():  # Noncompliant. \"cls\" parameter is missing.\n        print(\"class_method\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def instance_method(self):\n        print(\"instance_method\")\n\n    @classmethod\n    def class_method(cls):\n        print(\"class_method\")\n\n\n    @staticmethod\n    def static_method():\n        print(\"static_method\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3.8/tutorial/classes.html#method-objects\">Method Objects</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5719"
      }
    },
    {
      "name": "\"self\" should be the first argument to instance methods",
      "description": "<p>Instance methods, i.e. methods not annotated with <code>@classmethod</code> or <code>@staticmethod</code>, are expected to have at least one\nparameter. This parameter will reference the object instance on which the method is called. By convention, this first parameter is named \"self\".</p>\n<p>Naming the \"self\" parameter differently is confusing. It might also indicate that the \"self\" parameter was forgotten, in which case calling the\nmethod will most probably fail.</p>\n<p>Note also that creating methods which are used as static methods without the <code>@staticmethod</code> decorator is a bad practice because calling\nthese methods on an instance will raise a <code>TypeError</code>. Either move the method out of the class or decorate it with\n<code>@staticmethod</code>.</p>\n<p>This rule raises an issue when the first parameter of an instance method is not called \"self\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    def send_request(request):  # Noncompliant. \"self\" was probably forgotten\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    def static_method(param):  # Noncompliant\n        print(param)\nClassWithStaticMethod().static_method(42)  # Method is available on the instance but calling it will raise a TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def send_request(self, request):\n        print(\"send_request\")\n\nclass ClassWithStaticMethod:\n    @staticmethod\n    def static_method(param):\n        print(param)\nClassWithStaticMethod().static_method(42)\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will also accept \"cls\" or \"mcs\" as first parameter’s name for metaclasses' methods.</p>\n<p>No issue will be raised for methods called <code>__init_subclass__</code>, <code>__class_getitem__</code> or <code>__new__</code> as these methods'\nfirst parameter is a class.</p>\n<p>You can also disable issues on methods decorated with a specific decorator. Add these decorators to this rule’s \"ignoreDecorators\" parameter.</p>\n<p>With \"ignoredDecorators\" set to \"abstractmethod\"</p>\n<pre>\nfrom abc import abstractmethod, ABC\n\nclass MyClass(ABC):\n    @abstractmethod\n    def method():  # No issue, even if it is better in this case to also decorate with @staticmethod\n        pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3.8/tutorial/classes.html#method-objects\">Method Objects</a> </li>\n  <li> PEP8 - <a href=\"https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments\">Function and Method Arguments</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5720"
      }
    },
    {
      "name": "Special methods should have an expected number of parameters",
      "description": "<p>Python developers can customize how code is interpreted by defining special methods (also called magic methods). For example, it is possible to\noverride how the multiplication operator (<code>a * b</code>) will apply to instances of a class by defining in this class the <code>__mul__</code>\nand <code>__rmul__</code> methods. Whenever a multiplication operation is performed with this class, the python interpreter will call one of these\nmethods instead of performing the default multiplication.</p>\n<p>The python interpreter will always call these methods with the same number of parameters. Every call to a special method will fail if it is defined\nwith an unexpected number of parameters.</p>\n<p>This rule raises an issue when a special method is defined with an unexpected number of parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A:\n    def __mul__(self, other, unexpected):  # Noncompliant. Too many parameters\n        return 42\n\n    def __add__(self):  # Noncompliant. Missing one parameter\n        return 42\n\nA() * 3  # TypeError: __mul__() missing 1 required positional argument: 'unexpected'\nA() + 3  # TypeError: __add__() takes 1 positional argument but 2 were given\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A:\n    def __mul__(self, other):\n        return 42\n\n    def __add__(self, other):\n        return 42\n\nA() * 3\nA() + 3\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#special-method-names\">Special method names</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/copy.html\">copy module</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5722"
      }
    },
    {
      "name": "Property getter, setter and deleter methods should have the expected number of parameters",
      "description": "<p>Property getter, setter and deleter methods are called by the python interpreter with a specific number or arguments:</p>\n<ul>\n  <li> only \"self\" for property getter and deleter methods. </li>\n  <li> \"self\" and a value for setter methods. </li>\n</ul>\n<p>Adding any other parameter, or removing these mandatory parameters will make method calls fail.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> too many parameters are defined in a property getter, setter or deleter method. </li>\n  <li> the value parameter is missing in a property setter method. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A:\n    @property\n    def foo(self, unexpected, unexpected2):  # Noncompliant. Too many parameters.\n        return self._foo\n\n    @foo.setter\n    def foo(self, value, unexpected):  # Noncompliant. Too many parameters.\n        self._foo = value\n\n    @foo.deleter\n    def foo(self, unexpected):  # Noncompliant. Too many parameters.\n        del self._foo\n\nclass B:\n    def get_foo(self, unexpected):  # Noncompliant. Too many parameters.\n        return self._foo\n\n    def set_foo(self, value, unexpected):  # Noncompliant. Too many parameters.\n        self._foo = value\n\n    def del_foo(self, unexpected):  # Noncompliant. Too many parameters.\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A:\n    @property\n    def foo(self):\n        return self._foo\n\n    @foo.setter\n    def foo(self, value):\n        self._foo = value\n\n    @foo.deleter\n    def foo(self):\n        del self._foo\n\nclass B:\n    def get_foo(self):\n        return self._foo\n\n    def set_foo(self, value):\n        self._foo = value\n\n    def del_foo(self):\n        del self._foo\n\n    foo = property(get_foo, set_foo, del_foo, \"'foo' property.\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#property\">Python Documentation - Built-in Functions - property</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5724"
      }
    },
    {
      "name": "Comparison to None should not be constant",
      "description": "<p>Checking if a variable or parameter is <code>None</code> should only be done when you expect that it can be <code>None</code>. Doing so when the\nvariable is always None or never None is confusing at best. At worse, there is a bug and the variable is not updated properly.</p>\n<p>This rule raises an issue when expressions <code>X is None</code>, <code>X is not None</code>, <code>X == None</code> or <code>X != None</code> are\nconstant, i.e. <code>X</code> is always None or never None.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmynone = None\nresult = mynone is None: # Noncompliant. Always True.\n\nif mynone == None: # Noncompliant. Always True.\n    pass\n\nif mynone is not None:  # Noncompliant. Always False.\n    pass\n\nif mynone == None:  # Noncompliant. Always False.\n    pass\n\nmyint = 42\nresult = myint is None: # Noncompliant. Always False.\n\nif myint == None: # Noncompliant. Always False.\n    pass\n\nif myint is not None:  # Noncompliant. Always True.\n    pass\n\nif myint == None:  # Noncompliant. Always True.\n    pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\">Identity comparisons</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__eq__\"><code>__eq__</code> operator</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5727"
      }
    },
    {
      "name": "Repeated patterns in regular expressions should not match the empty string",
      "description": "<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"(?:)*\"      # same as the empty regex, the '*' accomplishes nothing\nr\"(?:|x)*\"    # same as the empty regex, the alternative has no effect\nr\"(?:x|)*\"    # same as 'x*', the empty alternative has no effect\nr\"(?:x*|y*)*\" # same as 'x*', the first alternative would always match, y* is never tried\nr\"(?:x?)*\"    # same as 'x*'\nr\"(?:x?)+\"    # same as 'x*'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"x*\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5842"
      }
    },
    {
      "name": "Regular expressions should not be too complicated",
      "description": "<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\np = re.compile(r\"^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$\")\n\nif p.match($dateString):\n    handleDate($dateString)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\np = re.compile(\"^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$\")\nif p.match($dateString):\n    dateParts = re.split(r\"[-/.]\", dateString)\n    day = intval(dateParts[0])\n    month = intval(dateParts[1])\n    year = intval($dateParts[2])\n    // Put logic to validate and process the date based on its integer parts here\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5843"
      }
    },
    {
      "name": "Assertions comparing incompatible types should not be made",
      "description": "<p>Calling <code>unittest</code> methods <code>assertEqual</code>, <code>assertNotEqual</code>, <code>assertIs</code> or <code>assertIsNot</code> on\nobjects of incompatible types will always fail or always succeed.</p>\n<p>For methods <code>assertEqual</code> and <code>assertNotEqual</code>, arguments' types are incompatible if:</p>\n<pre>\nthey are unrelated builtin types such as string and integer.\n</pre>\n<pre>\nthey are instances of unrelated classes which do not implement ``++__eq__++`` or ``++__ne__++`` (if a class implements one of these methods it could compare to any other type it wants).\n</pre>\n<p>As for methods <code>assertIs</code> and <code>assertIsNot</code>, if arguments' types are different it is not possible for them to point to the\nsame object, thus <code>assertIs</code> will always fail and <code>assertIsNot</code> will always succeed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, \"x\")  # Noncompliant\n    self.assertIs(a, \"x\")  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport unittest\nclass A(): ...\nclass MyTest(unittest.TestCase):\n  def test_something(self):\n    a = A()\n    mydict = {\"x\": a}\n    self.assertEqual(a, mydict[\"x\"])  # OK\n    self.assertIs(a, mydict[\"x\"])  # OK\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=python%3AS2159'>S2159</a> Silly equality checks should not be made </li>\n  <li> <a href='/coding_rules#rule_key=python%3AS3403'>S3403</a> Identity operators should not be used with dissimilar types </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5845"
      }
    },
    {
      "name": "Values assigned to variables should match their type annotations",
      "description": "<p>Type hints can be used to communicate the intended type of a given variable. These are not enforced at runtime and not respecting them might not\nnecessarily lead to runtime errors.</p>\n<p>It is however confusing and could lead to maintainability issues.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef my_function():\n    my_int: int = \"string\"  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function():\n    my_str: str = \"string\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5890"
      }
    },
    {
      "name": "Test methods should be discoverable",
      "description": "<p>Classes subclassing only <code>unittest.TestCase</code> are considered test cases, otherwise they might be mixins.</p>\n<p>As classes subclassing <code>unittest.TestCase</code> will be executed as tests, they should define test methods and not be used as \"abstract\"\nparent helper. Methods within the class will be discovered by the test runner if their name starts with <code>test</code>. If a method intended to be\na test does not respect this convention, it will not be executed.</p>\n<p>This rule raises an issue when a method is not discoverable as a test and is never used within its test case class.</p>\n<p>This rule will not raise if:</p>\n<ul>\n  <li> The method is called directly from another method. </li>\n  <li> The method overrides an existing one in <code>unittest.TestCase</code> (example: a <code>tearDown</code> method). </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ... # OK (unittest.TestCase method)\n  def something_test(self): ... # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n  def setUp(self): ...\n  def test_something(self): ...\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5899"
      }
    },
    {
      "name": "Regex lookahead assertions should not be contradictory",
      "description": "<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>However, they can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after the\nlookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and is a sign that there’s a mistake in the\nregular expression that should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"(?=a)b\" # Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"(?&lt;=a)b\"\nr\"a(?=b)\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6002"
      }
    },
    {
      "name": "Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string",
      "description": "<p>When a reluctant (or lazy) quantifier is followed by a pattern that can match the empty string or directly by the end of the regex, it will always\nmatch zero times for <code>*?</code> or one time for <code>+?</code>. If a reluctant quantifier is followed directly by the end anchor\n(<code>$</code>), it behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nre.replace(r\"start\\w*?(end)?\", \"x\", \"start123endstart456\") # Noncompliant. In contrast to what one would expect, the result is not \"xx\"\n\nre.match(r\"^\\d*?$\", \"123456789\") # Noncompliant. Matches the same as \"/^\\d*$/\", but will backtrack in every position.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nre.replace(r\"start\\w*?(end|$)\", \"x\", \"start123endstart456\") # Result is \"xx\"\n\nre.match(r\"^\\d*$\", \"123456789\")\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6019"
      }
    },
    {
      "name": "Disabling server-side encryption of S3 buckets is security-sensitive",
      "description": "<p>Server-side encryption (SSE) encrypts an object (not the metadata) as it is written to disk (where the S3 bucket resides) and decrypts it as it is\nread from disk. This doesn’t change the way the objects are accessed, as long as the user has the necessary permissions, objects are retrieved as if\nthey were unencrypted. Thus, SSE only helps in the event of disk thefts, improper disposals of disks and other attacks on the AWS infrastructure\nitself.</p>\n<p>There are three SSE options:</p>\n<ul>\n  <li> Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)\n    <ul>\n      <li> AWS manages encryption keys and the encryption itself (with AES-256) on its own. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer Master Keys (CMKs) Stored in AWS Key Management Service (SSE-KMS)\n    <ul>\n      <li> AWS manages the encryption (AES-256) of objects and encryption keys provided by the AWS KMS service. </li>\n    </ul>  </li>\n  <li> Server-Side Encryption with Customer-Provided Keys (SSE-C)\n    <ul>\n      <li> AWS manages only the encryption (AES-256) of objects with encryption keys provided by the customer. AWS doesn’t store the customer’s\n      encryption keys. </li>\n    </ul>  </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive information. </li>\n  <li> The infrastructure needs to comply to some regulations, like HIPAA or PCI DSS, and other standards. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to use SSE. Choosing the appropriate option depends on the level of control required for the management of encryption keys.</p>\n<h2>Sensitive Code Example</h2>\n<p>Server-side encryption is not used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.UNENCRYPTED       # Sensitive\n)\n</pre>\n<p>The default value of <code>encryption</code> is <code>KMS</code> if <code>encryptionKey</code> is set. Otherwise, if both parameters are absent the\nbucket is unencrypted.</p>\n<h2>Compliant Solution</h2>\n<p>Server-side encryption with Amazon S3-Managed Keys is used:</p>\n<pre>\nbucket = s3.Bucket(self,\"bucket\",\n    encryption=s3.BucketEncryption.S3_MANAGED\n)\n\n# Alternatively with a KMS key managed by the user.\n\nbucket = s3.Bucket(self,\"bucket\",\n    encryptionKey=access_key\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html\">AWS documentation</a> - Protecting data using\n  server-side encryption </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.BucketEncryption.html\">AWS CDK version 2</a> - BucketEncryption </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6245"
      }
    },
    {
      "name": "Disabling versioning of S3 buckets is security-sensitive",
      "description": "<p>S3 buckets can be versioned. When the S3 bucket is unversioned it means that a new version of an object overwrites an existing one in the S3\nbucket.</p>\n<p>It can lead to unintentional or intentional information loss.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The bucket stores information that require high availability. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to enable S3 versioning and thus to have the possibility to retrieve and restore different versions of an object.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=False       # Sensitive\n)\n</pre>\n<p>The default value of <code>versioned</code> is <code>False</code> so the absence of this parameter is also sensitive.</p>\n<h2>Compliant Solution</h2>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    versioned=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html\">AWS documentation</a> - Using versioning in S3 buckets </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_s3.Bucket.html#versioned\">AWS CDK version 2</a> - Using versioning in S3\n  buckets </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6252"
      }
    },
    {
      "name": "String formatting should be used correctly",
      "description": "<p>Formatting strings, either with the <code>%</code> operator or <code>str.format</code> method, requires a valid string and arguments matching this\nstring’s replacement fields.</p>\n<p>This also applies to loggers from the <code>logging</code> module. Internally they use <code>%-formatting</code>. The only difference is that they\nwill log an error instead of raising an exception when provided arguments are invalid.</p>\n<p>Formatted string literals, also called \"f-strings\", are generally simpler to use, and any syntax mistake will fail at compile time. However it is\neasy to forget curly braces and it won’t raise any error.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A string formatted with <code>%</code> will not return the expected string because some arguments are not used. </li>\n  <li> A string formatted with <code>str.format</code> will not return the expected string because some arguments are not used. </li>\n  <li> An \"f-string\" doesn’t contain any replacement field, which probably means that some curly braces are missing. </li>\n  <li> Loggers will log an error because their message is not formatted properly. </li>\n</ul>\n<p>Rule <a href='/coding_rules#rule_key=python%3AS2275'>S2275</a> covers cases where formatting a string will raise an exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"Error %(message)s\" % {\"message\": \"something failed\", \"extra\": \"some dead code\"}  # Noncompliant. Remove the unused argument \"extra\" or add a replacement field.\n\n\"Error: User {} has not been able to access []\".format(\"Alice\", \"MyFile\")  # Noncompliant. Remove 1 unexpected argument or add a replacement field.\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User [user] has not been able to access [resource]\"  # Noncompliant. Add replacement fields or use a normal string instead of an f-string.\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\")  # Noncompliant. Add 1 missing argument.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"Error %(message)s\" % {\"message\": \"something failed\"}\n\n\"Error: User {} has not been able to access {}\".format(\"Alice\", \"MyFile\")\n\nuser = \"Alice\"\nresource = \"MyFile\"\nmessage = f\"Error: User {user} has not been able to access {resource}\"\n\nimport logging\nlogging.error(\"Error: User %s has not been able to access %s\", \"Alice\", \"MyFile\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">Python documentation - Format String Syntax</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python documentation - printf-style String\n  Formatting</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging.html#loggers\">Python documentation - Loggers</a> </li>\n  <li> <a href=\"https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application\">Python\n  documentation - Using particular formatting styles throughout your application</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\">Python documentation - Formatted string\n  literals</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3457"
      }
    },
    {
      "name": "The output of functions that don't return anything should not be used",
      "description": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo():\n  l = [1, 2, 3]\n  result = l.append(42) # Noncompliant, `append` mutates list l\n  return result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef foo():\n  l = [1, 2, 3]\n  l.append(42)\n  return l\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3699"
      }
    },
    {
      "name": "Functions should use \"return\" consistently",
      "description": "<p>Because it is dynamically typed, Python does not enforce a return type on a function. This means that different paths through a function can return\ndifferent types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>None</code>) with some\nreturning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo(a): # Noncompliant, function will return \"true\" or None\n  if a == 1:\n    return True\n  return\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return False\n</pre>\n<p>or</p>\n<pre>\ndef foo(a):\n  if a == 1:\n    return True\n  return None\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3801"
      }
    },
    {
      "name": "Weak SSL/TLS protocols should not be used",
      "description": "<p>This rule raises an issue when an insecure TLS protocol version (i.e. a protocol different from \"TLSv1.2\", \"TLSv1.3\", \"DTLSv1.2\", or \"DTLSv1.3\") is\nused or allowed.</p>\n<p>It is recommended to enforce TLS 1.2 as the minimum protocol version and to disallow older versions like TLS 1.0. Failure to do so could open the\ndoor to downgrade attacks: a malicious actor who is able to intercept the connection could modify the requested protocol version and downgrade it to a\nless secure version.</p>\n<p>In most cases, using the default system configuration is not compliant. Indeed, an application might get deployed on a wide range of systems with\ndifferent configurations. While using a system’s default value might be safe on modern up-to-date systems, this might not be the case on older\nsystems. It is therefore recommended to explicitly set a safe configuration in every case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom OpenSSL import SSL\n\nSSL.Context(SSL.SSLv3_METHOD)  # Noncompliant\n</pre>\n<pre>\nimport ssl\n\nssl.SSLContext(ssl.PROTOCOL_SSLv3) # Noncompliant\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_apigateway/DomainName.html\">aws_cdk.aws_apigateway.DomainName</a>:</p>\n<pre>\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_0 # Noncompliant\n        )\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Noncompliant: enables TLS 1.0 which is a deprecated version of the protocol\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom OpenSSL import SSL\n\ncontext = SSL.Context(SSL.TLS_SERVER_METHOD)\ncontext.set_min_proto_version(SSL.TLS1_3_VERSION)\n</pre>\n<pre>\nimport ssl\n\ncontext = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\ncontext.minimum_version = ssl.TLSVersion.TLSv1_3\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_apigateway/DomainName.html\">aws_cdk.aws_apigateway.DomainName</a>:</p>\n<pre>\nfrom aws_cdk.aws_apigateway import DomainName, SecurityPolicy\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        DomainName(self, \"example\",\n            domain_name=\"example.com\",\n            certificate=certificate,\n            security_policy=SecurityPolicy.TLS_1_2\n        )\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain, EngineVersion\nclass ExampleStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        CfnDomain(self, \"example\",\n            version=EngineVersion.OPENSEARCH_1_3\n            domain_endpoint_options=CfnDomain.DomainEndpointOptionsProperty(\n                tls_security_policy=\"Policy-Min-TLS-1-2-2019-07\"\n            )\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\">Mobile AppSec Verification\n  Standard</a> - Network Communication Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">OWASP Mobile Top 10 2016 Category M3</a> - Insecure\n  Communication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326\">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327\">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html\">Amazon API Gateway</a> -\n  Choosing a minimum TLS version </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4423"
      }
    },
    {
      "name": "Encrypting data is security-sensitive",
      "description": "<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p>This rule flags function calls that initiate encryption/decryption.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it’s IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV’s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn’t provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><code>cryptography</code> module</p>\n<pre>\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305, AESGCM, AESCCM\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher\n\n\ndef encrypt(key):\n    Fernet(key)  # Sensitive\n    ChaCha20Poly1305(key)  # Sensitive\n    AESGCM(key)  # Sensitive\n    AESCCM(key)  # Sensitive\n\n\nprivate_key = rsa.generate_private_key()  # Sensitive\n\n\ndef encrypt2(algorithm, mode, backend):\n    Cipher(algorithm, mode, backend)  # Sensitive\n</pre>\n<p><code>pynacl</code> library</p>\n<pre>\nfrom nacl.public import Box\nfrom nacl.secret import SecretBox\n\n\ndef public_encrypt(secret_key, public_key):\n    Box(secret_key, public_key)  # Sensitive\n\n\ndef secret_encrypt(key):\n    SecretBox(key)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/321\">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/322\">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/323\">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/324\">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/325\">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=python%3AS4426'>S4426</a>, <a href='/coding_rules#rule_key=python%3AS5542'>S5542</a>, <a href='/coding_rules#rule_key=python%3AS5547'>S5547</a> instead.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4787"
      }
    },
    {
      "name": "\"SystemExit\" should be re-raised",
      "description": "<p><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a>&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. This exception is expected to propagate up until the\napplication stops. It is ok to catch it when a clean-up is necessary but it should be raised again immediately.</p>\n<p>A <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">bare <code>except:</code> statement</a>, i.e. an\n<code>except</code> without any exception class, is equivalent to <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>except BaseException</code></a>. Both statements will catch every\nexception, including <code>SystemExit</code>. It is recommended to catch instead a specific exception. If it is not possible, the exception should be\nraised again.</p>\n<p>Note that it is also a good idea to reraise the <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> exception.</p>\n<p>This rule raises an issue when a bare <code>except:</code>, an <code>except BaseException</code> or an <code>except SystemExit</code> don’t reraise\nthe exception caught.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry:\n    open(\"foo.txt\", \"r\")\nexcept SystemExit:  # Noncompliant\n    pass\nexcept KeyboardInterrupt:  # No issue raised but be careful when you do this\n    pass\n\ntry:\n    open(\"bar.txt\", \"r\")\nexcept BaseException:  # Noncompliant\n    pass\nexcept:  # Noncompliant\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry:\n    open(\"foo.txt\", \"r\")\nexcept SystemExit:\n    # clean-up\n    raise\nexcept KeyboardInterrupt:\n    # clean-up\n    raise\n\ntry:\n    open(\"bar.txt\", \"r\")\nexcept BaseException as e:\n    # clean-up\n    raise e\nexcept: # Noncompliant\n    # clean-up\n    raise\n\n# or use a more specific exception\n\ntry:\n    open(\"bar.txt\", \"r\")\nexcept FileNotFoundError:\n    # process the exception\n</pre>\n<h2>See</h2>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#id5\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a>\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/391\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5754"
      }
    },
    {
      "name": "Expressions creating dictionaries should not have duplicate keys",
      "description": "<p>A dictionary cannot have two values with the same key. When a key is repeated in a dictionary literal, only the last occurence will remain. Thus\nduplicate keys should be either modified or removed.</p>\n<p>This rule raises an issue when the same value is used multiple times as a key in a dictionary literal.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n{\"one\": 1, \"two\": 2, \"one\": 3}  # Noncompliant\n\ndef func(a1, a2, a3):\n    {a1: 1, a2: 2, a1: 3}  # Noncompliant.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n{\"one\": 1, \"two\": 2, \"three\": 3}\n\ndef func(a1, a2, a3):\n    {a1: 1, a2: 2, a3: 3}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#dictionary-displays\">Python documentation - Dictionary displays</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5780"
      }
    },
    {
      "name": "Expressions creating sets should not have duplicate values",
      "description": "<p>A set cannot have two identical values. When a value is repeated in a set literal, only the last occurence will remain. Thus duplicate values\nshould be either modified or removed.</p>\n<p>This rule raises an issue when the same value is used multiple times as a value in a set literal.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n{\"one\", \"two\", \"one\"}  # Noncompliant\n\ndef func(a1, a2, a3):\n    {a1, a2, a1}  # Noncompliant.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n{\"one\", \"two\", \"three\"}\n\ndef func(a1, a2, a3):\n    {a1, a2, a3}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/expressions.html#set-displays\">Python documentation - Set displays</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5781"
      }
    },
    {
      "name": "Regex boundaries should not be used in a way that can never be matched",
      "description": "<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# This can never match because $ and ^ have been switched around\nr\"$[a-z]+^\" # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"^[a-z]+$\"\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5996"
      }
    },
    {
      "name": "Track comments matching a regular expression",
      "description": "<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:CommentRegularExpression"
      }
    },
    {
      "name": "Cyclomatic Complexity of functions should not be too high",
      "description": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:FunctionComplexity"
      }
    },
    {
      "name": "Long suffix \"L\" should be upper case",
      "description": "<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 10l  // Noncompliant; easily confused with one zero one\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 10L\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:LongIntegerWithLowercaseSuffixUsage"
      }
    },
    {
      "name": "Sections of code should not be commented out",
      "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S125"
      }
    },
    {
      "name": "Control flow statements \"if\", \"for\", \"while\", \"try\" and \"with\" should not be nested too deeply",
      "description": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> statements are key ingredients for making\nwhat’s known as \"Spaghetti code\". Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n<pre>\n  if condition1:           # Compliant - depth = 1\n    # ...\n    if condition2:         # Compliant - depth = 2\n      # ...\n      for i in range(10):  # Compliant - depth = 3, not exceeding the limit\n        # ...\n        if condition4:     # Non-Compliant - depth = 4\n          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            # ...\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S134"
      }
    },
    {
      "name": "Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person",
      "description": "<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# TODO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# TODO(ganncamp) per the business partners, more checks needed\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1707"
      }
    },
    {
      "name": "\"break\" and \"continue\" should not be used outside a loop",
      "description": "<p><code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing <code>break</code> or <code>continue</code> outside of a loop are imported.</p>\n<p>Therefore, these statements should not be used outside of loops.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnarg=len(sys.argv)\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        break\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        sys.exit()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1716"
      }
    },
    {
      "name": "\"\\\" should only be used as an escape character outside of raw strings",
      "description": "<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence\nlooks suspiciously like a broken escape sequence.</p>\n<p>Characters recognized as escape-able are: <code>abfnrtvox\\'\"</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = \"Hello \\world.\"\nt = \"Nice to \\ meet you\"\nu = \"Let's have \\ lunch\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = \"Hello world.\"\nt = \"Nice to \\\\ meet you\"\nu = r\"Let's have \\ lunch\"  // raw string\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1717"
      }
    },
    {
      "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
      "description": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Only use random number generators which are <a\n  href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">recommended by\n  OWASP</a> or any other trusted organization. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport random\n\nrandom.getrandbits(1) # Sensitive\nrandom.randint(0,9) # Sensitive\nrandom.random()  # Sensitive\n\n# the following functions are sadly used to generate salt by selecting characters in a string ex: \"abcdefghijk\"...\nrandom.sample(['a', 'b'], 1)  # Sensitive\nrandom.choice(['a', 'b'])  # Sensitive\nrandom.choices(['a', 'b'])  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\">Mobile AppSec\n  Verification Standard</a> - Cryptography Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">OWASP Mobile Top 10 2016 Category M5</a> -\n  Insufficient Cryptography </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/338\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/330\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1241\">MITRE, CWE-1241</a> - Use of Predictable Algorithm in Random Number Generator </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2245"
      }
    },
    {
      "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
      "description": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it’s up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won’t be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it’s mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask:</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', httponly=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">OWASP Top 10 2017 Category A7</a> - Cross-Site\n  Scripting (XSS) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1004\">MITRE, CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3330"
      }
    },
    {
      "name": "Cryptographic key generation should be based on strong parameters",
      "description": "<p>When generating cryptographic keys (or key pairs), it is important to use strong parameters. Key length, for instance, should provide enough\nentropy against brute-force attacks.</p>\n<ul>\n  <li> For <code>RSA</code> and <code>DSA</code> algorithms key size should be at least 2048 bits long </li>\n  <li> For <code>ECC</code> (elliptic curve cryptography) algorithms key size should be at least 224 bits long </li>\n  <li> For <code>RSA</code> public key exponent should be at least 65537. </li>\n</ul>\n<p>This rule raises an issue when a <code>RSA</code>, <code>DSA</code> or <code>ECC</code> key-pair generator is initialized using weak\nparameters.</p>\n<p>It supports the following libraries:</p>\n<ul>\n  <li> <a href=\"https://github.com/pyca/cryptography\">cryptography</a> </li>\n  <li> <a href=\"https://github.com/dlitz/pycrypto\">PyCrypto</a> </li>\n  <li> <a href=\"https://github.com/Legrandin/pycryptodome\">Cryptodome</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa\n\ndsa.generate_private_key(key_size=1024, backend=backend) # Noncompliant\nrsa.generate_private_key(public_exponent=999, key_size=2048, backend=backend) # Noncompliant\nec.generate_private_key(curve=ec.SECT163R2, backend=backend)  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa\n\ndsa.generate_private_key(key_size=2048, backend=backend) # Compliant\nrsa.generate_private_key(public_exponent=65537, key_size=2048, backend=backend) # Compliant\nec.generate_private_key(curve=ec.SECT409R1, backend=backend) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.ssi.gouv.fr/uploads/2014/11/RGS_v-2-0_B1.pdf\">ANSSI RGSv2</a> - Référentiel Général de Sécurité version 2 </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\">NIST FIPS 186-4</a> - Digital Signature Standard (DSS) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4426"
      }
    },
    {
      "name": "Using regular expressions is security-sensitive",
      "description": "<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n</ul>\n<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with\nevery additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating such regular expressions opens the door to <a\nhref=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks.\nIn the context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making\nthe service inaccessible to genuine users.</p>\n<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: <code>*+{</code>.</p>\n<p>Example: <code>(a+)*</code></p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you’re are using.</p>\n<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=\"https://github.com/google/re2\">Google Re2</a>.</p>\n<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won’t detect this kind of injection.</p>\n<h2>Sensitive Code Example</h2>\n<p>Django</p>\n<pre>\nfrom django.core.validators import RegexValidator\nfrom django.urls import re_path\n\nRegexValidator('(a*)*b')  # Sensitive\n\ndef define_http_endpoint(view):\n    re_path(r'^(a*)*b/$', view)  # Sensitive\n</pre>\n<p><code>re</code> module</p>\n<pre>\nimport re\nfrom re import compile, match, search, fullmatch, split, findall, finditer, sub, subn\n\n\ninput = 'input string'\nreplacement = 'replacement'\n\nre.compile('(a*)*b')  # Sensitive\nre.match('(a*)*b', input)  # Sensitive\nre.search('(a*)*b', input)  # Sensitive\nre.fullmatch('(a*)*b', input)  # Sensitive\nre.split('(a*)*b', input)  # Sensitive\nre.findall('(a*)*b', input)  # Sensitive\nre.finditer('(a*)*b',input)  # Sensitive\nre.sub('(a*)*b', replacement, input)  # Sensitive\nre.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<p><code>regex</code> module</p>\n<pre>\nimport regex\nfrom regex import compile, match, search, fullmatch, split, findall, finditer, sub, subn, subf, subfn, splititer\n\ninput = 'input string'\nreplacement = 'replacement'\n\nregex.subf('(a*)*b', replacement, input)  # Sensitive\nregex.subfn('(a*)*b', replacement, input)  # Sensitive\nregex.splititer('(a*)*b', input)  # Sensitive\n\nregex.compile('(a*)*b')  # Sensitive\nregex.match('(a*)*b', input)  # Sensitive\nregex.search('(a*)*b', input)  # Sensitive\nregex.fullmatch('(a*)*b', input)  # Sensitive\nregex.split('(a*)*b', input)  # Sensitive\nregex.findall('(a*)*b', input)  # Sensitive\nregex.finditer('(a*)*b',input)  # Sensitive\nregex.sub('(a*)*b', replacement, input)  # Sensitive\nregex.subn('(a*)*b', replacement, input)  # Sensitive\n</pre>\n<h2>Exceptions</h2>\n<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,\n<code>(a|a?)+</code>.</p>\n<p>It is a good idea to test your regular expression if it has the same pattern on both side of a \"<code>|</code>\".</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">MITRE, CWE-624</a> - Executable Regular\n  Expression Error </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=pythonsecurity%3AS2631'>S2631</a> instead.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4784"
      }
    },
    {
      "name": "Raised Exceptions must derive from BaseException",
      "description": "<p>In Python 3, attempting to raise an object which does not derive from BaseException will raise a <code>TypeError</code>. In Python 2 it is possible\nto raise old-style classes but this shouldn’t be done anymore in order to be compatible with Python 3.</p>\n<p>If you are about to create a custom Exception class, note that custom exceptions should inherit from <code>Exception</code>, not\n<code>BaseException</code>. <code>Exception</code> allows people to catch all exceptions except the ones explicitly asking the interpreter to stop,\nsuch as <code>KeyboardInterrupt</code> and <a href=\"https://docs.python.org/3/library/exceptions.html#GeneratorExit\"><code>GeneratorExit</code></a>\nwhich is not an error. See <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>This rule raises an issue when an object which doesn’t derive from BaseException is raised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nraise \"Something went wrong\"  # Noncompliant\n\nclass A:\n    pass\n\nraise A  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyError(Exception):\n    pass\n\nraise MyError(\"Something went wrong\")\nraise MyError\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html\">Python documentation - Errors and Exceptions</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352 - Required Superclass for Exceptions</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5632"
      }
    },
    {
      "name": "Calls should not be made to non-callable values",
      "description": "<p>In order to be callable, a python class should implement the <a\nhref=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\"><code>__call__</code></a> method.</p>\n<p>This rule raises an issue when a non-callable object is called.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    pass\n\nmyvar = MyClass()\nmyvar()  # Noncompliant\n\nnone_var = None\nnone_var()  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def __call__(self):\n        print(\"called\")\n\nmyvar = MyClass()\nmyvar()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__call__\">Python documentation - __call__ method</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5756"
      }
    },
    {
      "name": "Allowing public ACLs or policies on a S3 bucket is security-sensitive",
      "description": "<p>By default S3 buckets are private, it means that only the bucket owner can access it.</p>\n<p>This access control can be relaxed with ACLs or policies.</p>\n<p>To prevent permissive policies to be set on a S3 bucket the following booleans settings can be enabled:</p>\n<ul>\n  <li> <code>block_public_acls</code>: to block or not public ACLs to be set to the S3 bucket. </li>\n  <li> <code>ignore_public_acls</code>: to consider or not existing public ACLs set to the S3 bucket. </li>\n  <li> <code>block_public_policy</code>: to block or not public policies to be set to the S3 bucket. </li>\n  <li> <code>restrict_public_buckets</code>: to restrict or not the access to the S3 endpoints of public policies to the principals within the bucket\n  owner account. </li>\n</ul>\n<p>The other attribute <code>BlockPublicAccess.BLOCK_ACLS</code> only turns on <code>block_public_acls</code> and <code>ignore_public_acls</code>. The\npublic policies can still affect the S3 bucket.</p>\n<p>However, all of those options can be enabled by setting the <code>block_public_access</code> property of the S3 bucket to\n<code>BlockPublicAccess.BLOCK_ALL</code>.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The S3 bucket stores sensitive data. </li>\n  <li> The S3 bucket is not used to store static resources of websites (images, css …​). </li>\n  <li> Many users have the permission to set ACL or policy to the S3 bucket. </li>\n  <li> These settings are not already enforced to true at the account level. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to configure:</p>\n<ul>\n  <li> <code>block_public_acls</code> to <code>True</code> to block new attempts to set public ACLs. </li>\n  <li> <code>ignore_public_acls</code> to <code>True</code> to block existing public ACLs. </li>\n  <li> <code>block_public_policy</code> to <code>True</code> to block new attempts to set public policies. </li>\n  <li> <code>restrict_public_buckets</code> to <code>True</code> to restrict existing public policies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>By default, when not set, the <code>block_public_access</code> is fully deactivated (nothing is blocked):</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\"        # Sensitive\n)\n</pre>\n<p>This <code>block_public_access</code> allows public ACL to be set:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess(\n        block_public_acls=False,       # Sensitive\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<p>The attribute <code>BLOCK_ACLS</code> only blocks and ignores public ACLs:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ACLS     # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>This <code>block_public_access</code> blocks public ACLs and policies, ignores existing public ACLs and restricts existing public policies:</p>\n<pre>\nbucket = s3.Bucket(self,\n    \"bucket\",\n    block_public_access=s3.BlockPublicAccess.BLOCK_ALL # Compliant\n)\n</pre>\n<p>A similar configuration to the one above can obtained by setting all parameters of the <code>block_public_access</code></p>\n<pre>\nbucket = s3.Bucket(self, \"bucket\",\n    block_public_access=s3.BlockPublicAccess(       # Compliant\n        block_public_acls=True,\n        ignore_public_acls=True,\n        block_public_policy=True,\n        restrict_public_buckets=True\n    )\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html\">AWS Documentation</a> - Blocking public\n  access to your Amazon S3 storage </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_s3/Bucket.html\">AWS CDK version 2</a> - Bucket </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6281"
      }
    },
    {
      "name": "Python parser failure",
      "description": "<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:ParsingError"
      }
    },
    {
      "name": "All \"except\" blocks should be able to catch exceptions",
      "description": "<p>Exceptions handlers (<code>except:</code>) are evaluated in the order they are written. Once a match is found, the evaluation stops.</p>\n<p>In some contexts an except block is dead code as it will never catch any exception:</p>\n<ul>\n  <li> If there is a handler for a base class followed by a handler for class derived from that base class, the second handler will never trigger: The\n  handler for the base class will match the derived class, and will be the only executed handler. </li>\n  <li> When multiple <code>except</code> statements try to catch the same exception class, only the first one will be executed. </li>\n  <li> In python 3, <code>BaseException</code> is the parent of every exception class. When <code>BaseException</code> is caught and the same\n  try-except block has a bare <code>except:</code> statement, i.e. an <code>except</code> with no expression, the bare except will never catch\n  anything. </li>\n</ul>\n<p>This rule raises an issue when an <code>except</code> block catches every exception before a later <code>except</code> block could catch it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo():\n    try:\n        raise FloatingPointError()\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n    except FloatingPointError as e: # Noncompliant. FloatingPointError is a subclass of ArithmeticError\n        print(\"Never executed\")\n    except OverflowError as e: # Noncompliant. OverflowError is a subclass of ArithmeticError\n        print(\"Never executed\")\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n    except TypeError as e: # Noncompliant. Duplicate Except.\n        print(\"Never executed\")\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n    except: # Noncompliant. This is equivalent to \"except BaseException\" block\n        print(\"Never executed\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef foo():\n    try:\n        raise FloatingPointError()\n    except FloatingPointError as e:\n        print(\"Executed\")\n    except OverflowError as e:\n        print(\"Executed\")\n    except (ArithmeticError, RuntimeError) as e:\n        print(e)\n\n    try:\n        raise TypeError()\n    except TypeError as e:\n        print(e)\n\n    try:\n        raise ValueError()\n    except BaseException as e:\n        print(e)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-try-statement\">The <code>try</code> statement</a>\n  </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1045"
      }
    },
    {
      "name": "\"Exception\" and \"BaseException\" should not be raised",
      "description": "<p>Raising instances of <a href=\"https://docs.python.org/3/library/exceptions.html#Exception\"><code>Exception</code></a> and <a\nhref=\"https://docs.python.org/3/library/exceptions.html#BaseException\"><code>BaseException</code></a> will have a negative impact on any code trying\nto catch these exceptions.</p>\n<p>First, the only way to handle differently multiple Exceptions is to check their message, which is error-prone and difficult to maintain.</p>\n<p>What’s more, it becomes difficult to catch only your exception. The best practice is to catch only exceptions which require a specific handling.\nWhen you raise <code>Exception</code> or <code>BaseException</code> in a function the caller will have to add an <code>except Exception</code> or\n<code>except BaseException</code> and re-raise all exceptions which were unintentionally caught. This can create tricky bugs when the caller forgets\nto re-raise exceptions such as <code>SystemExit</code> and the software cannot be stopped.</p>\n<p>It is recommended to either:</p>\n<ul>\n  <li> raise a more specific <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in exception</a> when one matches. For example\n  <code>TypeError</code> should be raised when the type of a parameter is not the one expected. </li>\n  <li> create a custom exception class deriving from <code>Exception</code> or one of its subclasses. A common practice for libraries is to have one\n  custom root exception class from which every other custom exception class inherits. It enables other projects using this library to catch all errors\n  coming from the library with a single \"except\" statement </li>\n</ul>\n<p>This rule raises an issue when <code>Exception</code> or <code>BaseException</code> are raised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef process1():\n    raise BaseException(\"Wrong user input for field X\")  # Noncompliant\n\ndef process2():\n    raise BaseException(\"Wrong configuration\")  # Noncompliant\n\ndef process3(param):\n    if not isinstance(param, int):\n        raise Exception(\"param should be an integer\")  # Noncompliant\n\ndef caller():\n    try:\n         process1()\n         process2()\n         process3()\n    except BaseException as e:\n        if e.args[0] == \"Wrong user input for field X\":\n            # process error\n            pass\n        elif e.args[0] == \"Wrong configuration\":\n            # process error\n            pass\n        else:\n            # re-raise other exceptions\n            raise\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyProjectError(Exception):\n    \"\"\"Exception class from which every exception in this library will derive.\n         It enables other projects using this library to catch all errors coming\n         from the library with a single \"except\" statement\n    \"\"\"\n    pass\n\nclass BadUserInputError(MyProjectError):\n    \"\"\"A specific error\"\"\"\n    pass\n\nclass ConfigurationError(MyProjectError):\n    \"\"\"A specific error\"\"\"\n    pass\n\ndef process1():\n    raise BadUserInputError(\"Wrong user input for field X\")\n\ndef process2():\n    raise ConfigurationError(\"Wrong configuration\")\n\ndef process3(param):\n    if not isinstance(param, int):\n        raise TypeError(\"param should be an integer\")\n\ndef caller():\n    try:\n         process1()\n         process2()\n         process3()\n    except BadUserInputError as e:\n        # process error\n        pass\n    except ConfigurationError as e:\n        # process error\n        pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Built-in exceptions</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/397\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S112"
      }
    },
    {
      "name": "Functions should not have too many lines of code",
      "description": "<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S138"
      }
    },
    {
      "name": "Comments should not be located at the end of lines of code",
      "description": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b + c   # This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# This very long comment is better placed before the line of code\na = b + c\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S139"
      }
    },
    {
      "name": "A reason should be provided when skipping a test",
      "description": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each skipped test with \"<code>unittest.skip</code>\" or \"<code>pytest.mark.skip</code>\" without providing a reason\nargument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip  # Noncompliant\n    def test_something(self): ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n    @unittest.skip(\"need to fix something\")\n    def test_something(self): ...\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest documentation - skipping tests and expected\nfailures</a></p>\n<p><a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html#skipping-test-functions\">Pytest documentation - skipping test functions</a></p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1607"
      }
    },
    {
      "name": "Docstrings should be defined",
      "description": "<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef my_function(a,b):\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n      \"\"\"Do X\"\"\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1720"
      }
    },
    {
      "name": "Parentheses should not be used after certain keywords",
      "description": "<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,\n<code>if</code>, <code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords, and\nusing them unnecessarily impairs readability. They should therefore be omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 1\nwhile (x &lt; 10):\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = 1\nwhile x &lt; 10:\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=python%3AS5905'>S5905</a> instead.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1721"
      }
    },
    {
      "name": "New-style classes should be used",
      "description": "<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is\nrecommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass():\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1722"
      }
    },
    {
      "name": "Methods and field names should not differ only by capitalization",
      "description": "<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the\nclass.</p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1845"
      }
    },
    {
      "name": "Hard-coded credentials are security-sensitive",
      "description": "<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nusername = 'admin'\npassword = 'admin' # Sensitive\nusernamePassword = 'user=admin&amp;password=admin' # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\nusername = os.getenv(\"username\") # Compliant\npassword = os.getenv(\"password\") # Compliant\nusernamePassword = 'user=%s&amp;password=%s' % (username, password) # Compliant{code}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2068"
      }
    },
    {
      "name": "Using non-standard cryptographic algorithms is security-sensitive",
      "description": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>Argon2PasswordHasher</code>, <code>BCryptPasswordHasher</code>, …​ should be used instead.</p>\n<p>This rule tracks creation of <code>BasePasswordHasher</code> subclasses for Django applications.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nclass CustomPasswordHasher(BasePasswordHasher):  # Sensitive\n    # ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2257"
      }
    },
    {
      "name": "LDAP connections should be authenticated",
      "description": "<p>An LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.</p>\n<p>Simple authentication in LDAP can be used with three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous Authentication Mechanism</em> by performing a bind request with a username and password value of zero length. </li>\n  <li> <em>Unauthenticated Authentication Mechanism</em> by performing a bind request with a password value of zero length. </li>\n  <li> <em>Name/Password Authentication Mechanism</em> by performing a bind request with a password value of non-zero length. </li>\n</ul>\n<p>Anonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport ldap\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root') # Noncompliant\n   connect.simple_bind_s('cn=root') # Noncompliant\n   connect.bind_s('cn=root', None) # Noncompliant\n   connect.bind('cn=root', None) # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport ldap\nimport os\n\ndef init_ldap():\n   connect = ldap.initialize('ldap://example:1389')\n\n   connect.simple_bind('cn=root', os.environ.get('LDAP_PASSWORD')) # Compliant\n   connect.simple_bind_s('cn=root', os.environ.get('LDAP_PASSWORD')) # Compliant\n   connect.bind_s('cn=root', os.environ.get('LDAP_PASSWORD')) # Compliant\n   connect.bind('cn=root', os.environ.get('LDAP_PASSWORD')) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521\">MITRE, CWE-521</a> - Weak Password Requirements </li>\n  <li> <a href=\"https://ldapwiki.com/wiki/Simple%20Authentication\">ldapwiki.com</a>- Simple Authentication </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4433"
      }
    },
    {
      "name": "Unread \"private\" attributes should be removed",
      "description": "<p>Private attributes which are written but never read are a clear case of dead store. Changing their value is useless and most probably indicates a\nserious error in the code.</p>\n<p>Python has no real private attribute. Every attribute is accessible. There are however two conventions indicating that an attribute is not meant to\nbe \"public\":</p>\n<ul>\n  <li> attributes with a name starting with a single underscore (ex: <code>_myattribute</code>) should be seen as non-public and might change without\n  prior notice. They should not be used by third-party libraries or software. It is ok to use those methods inside the library defining them but it\n  should be done with caution. </li>\n  <li> \"class-private\" attributes have a name which starts with at least two underscores and ends with at most one underscore. These attribute’s names\n  will be automatically mangled to avoid collision with subclasses' attributes. For example <code>__myattribute</code> will be renamed as\n  <code>_classname__myattribute</code>, where <code>classname</code> is the attribute’s class name without its leading underscore(s). They shouldn’t\n  be used outside of the class defining the attribute. </li>\n</ul>\n<p>This rule raises an issue when a class-private attribute (two leading underscores, max one underscore at the end) is never read inside the class.\nIt optionally raises an issue on unread attributes prefixed with a single underscore. Both class attribute and instance attributes will raise an\nissue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Noncompliant:\n    _class_attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n    __mangled_class_attr = 1  # Noncompliant\n\n    def __init__(self, value):\n        self._attr = 0  # Noncompliant if enable_single_underscore_issues is enabled\n        self.__mangled_attr = 1  # Noncompliant\n\n    def compute(self, x):\n        return x * x\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Compliant:\n    _class_attr = 0\n    __mangled_class_attr = 1\n\n    def __init__(self, value):\n        self._attr = 0\n        self.__mangled_attr = 1\n\n    def compute(self, x):\n        return x * Compliant._class_attr * Compliant.__mangled_class_attr * self._attr * self.__mangled_attr\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation – Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 – Style Guide for Python Code</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4487"
      }
    },
    {
      "name": "Using weak hashing algorithms is security-sensitive",
      "description": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little\ncomputational effort is enough to find two or more different inputs that produce the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc …​). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it’s even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport hashlib\nm = hashlib.md5() // Sensitive\n</pre>\n<pre>\nimport hashlib\nm = hashlib.sha1() // Sensitive\n</pre>\n<pre>\nimport md5 // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = md5.new()\n\nimport sha // Sensitive and deprecated since Python 2.5; use the hashlib module instead.\nm = sha.new()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport hashlib\nm = hashlib.sha512() // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements\">Mobile AppSec\n  Verification Standard</a> - Cryptography Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">OWASP Mobile Top 10 2016 Category M5</a> -\n  Insufficient Cryptography </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1240\">MITRE, CWE-1240</a> - Use of a Risky Cryptographic Primitive </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4790"
      }
    },
    {
      "name": "Configuring loggers is security-sensitive",
      "description": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn’t have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn’t make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don’t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc…​ Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc…​ As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport logging\nfrom logging import Logger, Handler, Filter\nfrom logging.config import fileConfig, dictConfig\n\nlogging.basicConfig()  # Sensitive\n\nlogging.disable()  # Sensitive\n\n\ndef update_logging(logger_class):\n    logging.setLoggerClass(logger_class)  # Sensitive\n\n\ndef set_last_resort(last_resort):\n    logging.lastResort = last_resort  # Sensitive\n\n\nclass CustomLogger(Logger):  # Sensitive\n    pass\n\n\nclass CustomHandler(Handler):  # Sensitive\n    pass\n\n\nclass CustomFilter(Filter):  # Sensitive\n    pass\n\n\ndef update_config(path, config):\n    fileConfig(path)  # Sensitive\n    dictConfig(config)  # Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4792"
      }
    },
    {
      "name": "Using clear-text protocols is security-sensitive",
      "description": "<p>Clear-text protocols such as <code>ftp</code>, <code>telnet</code>, or <code>http</code> lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:</p>\n<ul>\n  <li> sensitive data exposure </li>\n  <li> traffic redirected to a malicious endpoint </li>\n  <li> malware-infected software update or installer </li>\n  <li> execution of client-side code </li>\n  <li> corruption of critical information </li>\n</ul>\n<p>Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.</p>\n<p>For example, attackers could successfully compromise prior security layers by:</p>\n<ul>\n  <li> bypassing isolation mechanisms </li>\n  <li> compromising a component of the network </li>\n  <li> getting the credentials of an internal IAM account (either from a service account or an actual person) </li>\n</ul>\n<p>In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n<em>defense-in-depth</em> principle.</p>\n<p>Note that using the <code>http</code> protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browsers</a>.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\">CVE-2019-6169</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\">CVE-2019-12327</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\">CVE-2019-11065</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Application data needs to be protected against falsifications or leaks when transiting over the network. </li>\n  <li> Application data transits over an untrusted network. </li>\n  <li> Compliance rules require the service to encrypt data in transit. </li>\n  <li> Your application renders web pages with a relaxed mixed content policy. </li>\n  <li> OS-level protections against clear-text traffic are deactivated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    <ul>\n      <li> Use <code>ssh</code> as an alternative to <code>telnet</code>. </li>\n      <li> Use <code>sftp</code>, <code>scp</code>, or <code>ftps</code> instead of <code>ftp</code>. </li>\n      <li> Use <code>https</code> instead of <code>http</code>. </li>\n      <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP. </li>\n    </ul>  </li>\n  <li> Enable encryption of cloud components communications whenever it is possible. </li>\n  <li> Configure your application to block mixed content when rendering web pages. </li>\n  <li> If available, enforce OS-level deactivation of all clear-text traffic. </li>\n</ul>\n<p>It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nurl = \"http://example.com\" # Sensitive\nurl = \"ftp://anonymous@example.com\" # Sensitive\nurl = \"telnet://anonymous@example.com\" # Sensitive\n\nimport telnetlib\ncnx = telnetlib.Telnet(\"towel.blinkenlights.nl\") # Sensitive\n\nimport ftplib\ncnx = ftplib.FTP(\"ftp.example.com\") # Sensitive\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587) # Sensitive\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-default\",\n    port=80, # Sensitive\n    open=True\n)\nlb.add_listener(\n    \"Listener-http-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8080,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-http-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTP, # Sensitive\n    port=8081,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener( # Sensitive\n    \"Listener-default\",\n    port=1234\n)\nlb.add_listener(\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1337\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TCP-explicit\",\n    protocol=elbv2.Protocol.TCP, # Sensitive\n    port=1338,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-http\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTP\", # Sensitive\n    port=80\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tcp\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TCP\", # Sensitive\n    port=1000\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10000,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10000\n)\n\nelb.LoadBalancerListener(\n    external_port=10080,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10080\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-tcp\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10000\",\n            load_balancer_port=\"10000\",\n            protocol=\"tcp\" # Sensitive\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-http-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10000\",\n            \"loadBalancerPort\":\"10000\",\n            \"protocol\":\"http\" # Sensitive\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-tcp-dict\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10000,\n            \"externalProtocol\":elb.LoadBalancingProtocol.TCP, # Sensitive\n            \"internalPort\":10000\n        }\n    ]\n)\n\nloadBalancer.add_listener(\n    external_port=10081,\n    external_protocol=elb.LoadBalancingProtocol.HTTP, # Sensitive\n    internal_port=10081\n)\nloadBalancer.add_listener(\n    external_port=10001,\n    external_protocol=elb.LoadBalancingProtocol.TCP, # Sensitive\n    internal_port=10001\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"unencrypted-explicit\",\n    replication_group_description=\"a replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=False, # Sensitive\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n\nelasticache.CfnReplicationGroup( # Sensitive, encryption is disabled by default\n    self,\n    \"unencrypted-implicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream( # Sensitive, encryption is disabled by default for CfnStreams\n    self,\n    \"cfnstream-implicit-unencrytped\",\n    shard_count=1\n)\n\nkinesis.CfnStream(self,\n    \"cfnstream-explicit-unencrytped\",\n    shard_count=1,\n    stream_encryption=None # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nstream = kinesis.Stream(self,\n    \"stream-explicit-unencrypted\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.UNENCRYPTED # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nurl = \"https://example.com\"\nurl = \"sftp://anonymous@example.com\"\nurl = \"ssh://anonymous@example.com\"\n\nimport ftplib\ncnx = ftplib.FTP_TLS(\"ftp.example.com\")\n\nimport smtplib\nsmtp = smtplib.SMTP(\"smtp.example.com\", port=587)\nsmtp.starttls(context=context)\n\nsmtp_ssl = smtplib.SMTP_SSL(\"smtp.gmail.com\", port=465)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.ApplicationLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nlb = elbv2.ApplicationLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-https-explicit\",\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    open=True\n)\n\nlb.add_listener(\n    \"Listener-https-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=8443,\n    open=True\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/ApplicationListener.html\">\naws_cdk.aws_elasticloadbalancingv2.ApplicationListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.ApplicationListener(\n    self,\n    \"listener-https-explicit-const\",\n    load_balancer=lb,\n    protocol=elbv2.ApplicationProtocol.HTTPS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=444,\n    open=True\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkLoadBalancer.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\nlb = elbv2.NetworkLoadBalancer(\n    self,\n    \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nlb.add_listener(\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443\n)\nlb.add_listener(\n    \"Listener-TLS-implicit\",\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=1024\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/NetworkListener.html\">aws_cdk.aws_elasticloadbalancingv2.NetworkListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.NetworkListener(\n    self,\n    \"Listener-TLS-explicit\",\n    protocol=elbv2.Protocol.TLS,\n    certificates=[elbv2.ListenerCertificate(\"certificateARN\")],\n    port=443,\n    load_balancer=lb\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancingv2/CfnListener.html\">aws_cdk.aws_elasticloadbalancingv2.CfnListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancingv2 as elbv2,\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-https\",\n    default_actions=[application_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"HTTPS\",\n    port=443,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n\nelbv2.CfnListener(\n    self,\n    \"listener-tls\",\n    default_actions=[network_default_action],\n    load_balancer_arn=lb.load_balancer_arn,\n    protocol=\"TLS\",\n    port=1001,\n    certificates=[elbv2.CfnListener.CertificateProperty(\n        certificate_arn=\"certificateARN\"\n    )]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancerListener.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancerListener</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancerListener(\n    external_port=10043,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10043,\n    ssl_certificate_arn=\"certificateARN\"\n)\n\nelb.LoadBalancerListener(\n    external_port=10443,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10443,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/CfnLoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.CfnLoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-ssl\",\n    listeners=[\n        elb.CfnLoadBalancer.ListenersProperty(\n            instance_port=\"10043\",\n            load_balancer_port=\"10043\",\n            protocol=\"ssl\",\n            ssl_certificate_id=CERTIFICATE_ARN\n        )\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n\nelb.CfnLoadBalancer(\n    self,\n    \"elb-https-dict\",\n    listeners=[\n        {\n            \"instancePort\":\"10443\",\n            \"loadBalancerPort\":\"10443\",\n            \"protocol\":\"https\",\n            \"sslCertificateId\":CERTIFICATE_ARN\n        }\n    ],\n    subnets=vpc.select_subnets().subnet_ids\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticloadbalancing/LoadBalancer.html\">aws_cdk.aws_elasticloadbalancing.LoadBalancer</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticloadbalancing as elb,\n)\n\nelb.LoadBalancer(\n    self,\n    \"elb-ssl\",\n    vpc=vpc,\n    listeners=[\n        {\n            \"externalPort\":10044,\n            \"externalProtocol\":elb.LoadBalancingProtocol.SSL,\n            \"internalPort\":10044,\n            \"sslCertificateArn\":\"certificateARN\"\n        },\n        {\n            \"externalPort\":10444,\n            \"externalProtocol\":elb.LoadBalancingProtocol.HTTPS,\n            \"internalPort\":10444,\n            \"sslCertificateArn\":\"certificateARN\"\n        }\n    ]\n)\n\nloadBalancer = elb.LoadBalancer(\n        self,\n        \"elb-multi-listener\",\n        vpc=vpc\n)\nloadBalancer.add_listener(\n    external_port=10045,\n    external_protocol=elb.LoadBalancingProtocol.SSL,\n    internal_port=10045,\n    ssl_certificate_arn=\"certificateARN\"\n)\nloadBalancer.add_listener(\n    external_port=10445,\n    external_protocol=elb.LoadBalancingProtocol.HTTPS,\n    internal_port=10445,\n    ssl_certificate_arn=\"certificateARN\"\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_elasticache/CfnReplicationGroup.html\">aws_cdk.aws_elasticache.CfnReplicationGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_elasticache as elasticache\n)\n\nelasticache.CfnReplicationGroup(\n    self,\n    \"encrypted-explicit\",\n    replication_group_description=\"a test replication group\",\n    automatic_failover_enabled=False,\n    transit_encryption_enabled=True,\n    cache_subnet_group_name=\"test\",\n    engine=\"redis\",\n    engine_version=\"3.2.6\",\n    num_cache_clusters=1,\n    cache_node_type=\"cache.t2.micro\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/CfnStream.html\">aws_cdk.aws_kinesis.CfnStream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n)\n\nkinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped\",\n    shard_count=1,\n    stream_encryption=kinesis.CfnStream.StreamEncryptionProperty(\n        encryption_type=\"KMS\",\n        key_id=\"alias/aws/kinesis\"\n    )\n)\n\nstream = kinesis.CfnStream(\n    self,\n    \"cfnstream-explicit-encrytped-dict\",\n    shard_count=1,\n    stream_encryption={\n        \"encryptionType\": \"KMS\",\n        \"keyId\": \"alias/aws/kinesis\"\n    }\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_kinesis/Stream.html\">aws_cdk.aws_kinesis.Stream</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_kinesis as kinesis,\n    aws_kms as kms\n)\n\nstream = kinesis.Stream( # Encryption is enabled by default for Streams\n    self,\n    \"stream-implicit-encrypted\",\n    shard_count=1\n)\n\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-managed\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.MANAGED\n)\n\nkey = kms.Key(self, \"managed_key\")\nstream = kinesis.Stream(\n    self,\n    \"stream-explicit-encrypted-selfmanaged\",\n    shard_count=1,\n    encryption=kinesis.StreamEncryption.KMS,\n    encryption_key=key\n)\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code>. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\">Mobile AppSec Verification\n  Standard</a> - Network Communication Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">OWASP Mobile Top 10 2016 Category M3</a> - Insecure\n  Communication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/319\">MITRE, CWE-319</a> - Cleartext Transmission of Sensitive Information </li>\n  <li> <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">Google, Moving towards more secure web</a> </li>\n  <li> <a href=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\">Mozilla, Deprecating non secure http</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">AWS Documentation</a> - Listeners\n  for your Application Load Balancers </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\">AWS\n  Documentation</a> - Stream Encryption </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5332"
      }
    },
    {
      "name": "Server hostnames should be verified during SSL/TLS connections",
      "description": "<p>To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it’s essential to make sure the server presents the right\ncertificate.</p>\n<p>The certificate’s hostname-specific data should match the server hostname.</p>\n<p>It’s not recommended to re-invent the wheel by implementing custom hostname verification.</p>\n<p>TLS/SSL libraries provide built-in hostname verification functions that should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Python <a href=\"https://docs.python.org/3/library/ssl.html\">ssl standard</a> library:</p>\n<pre>\nimport ssl\n\nctx = ssl._create_unverified_context() # Noncompliant: by default hostname verification is not done\nctx = ssl._create_stdlib_context() # Noncompliant: by default hostname verification is not done\n\nctx = ssl.create_default_context()\nctx.check_hostname = False # Noncompliant\n\nctx = ssl._create_default_https_context()\nctx.check_hostname = False # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p>Python <a href=\"https://docs.python.org/3/library/ssl.html\">ssl standard</a> library:</p>\n<pre>\nimport ssl\n\nctx = ssl._create_unverified_context()\nctx.check_hostname = True # Compliant\n\nctx = ssl._create_stdlib_context()\nctx.check_hostname = True # Compliant\n\nctx = ssl.create_default_context() # Compliant: by default hostname verification is enabled\nctx = ssl._create_default_https_context() # Compliant: by default hostname verification is enabled\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\">Mobile AppSec Verification\n  Standard</a> - Network Communication Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">OWASP Mobile Top 10 2016 Category M3</a> - Insecure\n  Communication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/297\">MITRE, CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5527"
      }
    },
    {
      "name": "Item operations should be done on objects supporting them",
      "description": "<p>Getting, setting and deleting items using square brackets requires the accessed object to have special methods:</p>\n<ul>\n  <li> Getting items such as <code>my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\"><code>__getitem__</code></a> method, or the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\"><code>__class_getitem__</code></a> method if\n  <code>my_variable</code> is a class. </li>\n  <li> Setting items such as <code>my_variable[key] = 42</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\"><code>__setitem__</code></a> method. </li>\n  <li> Deleting items such as <code>del my_variable[key]</code> requires <code>my_variable</code> to have the <a\n  href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\"><code>__delitem__</code></a> method. </li>\n</ul>\n<p>This rule raises an issue when an item operation is performed on an object which doesn’t have the corresponding method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndel (1, 2)[0]  # Noncompliant, tuples are immutable\n(1, 2)[0] = 42  # Noncompliant\n(1, 2)[0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\na = A([0,1,2])\n\na[0]  # Noncompliant\ndel a[0]  # Noncompliant\na[0] = 42  # Noncompliant\n\nclass B:\n    pass\n\nB[0]  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndel [1, 2][0]  # Lists are mutable\n[1, 2][0] = 42\n[1, 2][0]\n\nclass A:\n    def __init__(self, values):\n        self._values = values\n\n    def __getitem__(self, key):\n        return self._values[key]\n\n    def __setitem__(self, key, value):\n        self._values[key] = value\n\n    def __delitem__(self, key):\n        del self._values[key]\n\na = A([0,1,2])\n\na[0]\ndel a[0]\na[0] = 42\n\nclass B:\n    def __class_getitem__(cls, key):\n        return [0, 1, 2, 3][key]\n\nB[0]\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__getitem__\">Python documentation - __getitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\">Python documentation - __setitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__delitem__\">Python documentation - __delitem__ method</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__\">Python documentation - __class_getitem__ method</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5644"
      }
    },
    {
      "name": "Function return types should be consistent with their type hint",
      "description": "<p>Developers can use type hints to specify which type a function is expected to return. These annotations are not enforced at runtime and returning a\ndifferent type might not fail. It is however likely to be unintended and will lead to maintainability issues, if not bugs.</p>\n<p>This rule raises an issue when a function or method returns a value that contradicts its type hint.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef hello() -&gt; str:\n    return 42  # Noncompliant. Function's type hint asks for a string return value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef hello() -&gt; str:\n    return \"Hello\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/typing.html\">Python documentation - Support for type hints</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5886"
      }
    },
    {
      "name": "Policies granting all privileges are security-sensitive",
      "description": "<p>A policy that grants all permissions may indicate an improper access control, which violates <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity is granted full\npermissions to a resource even though it only requires read permission to work as expected. In this case, an unintentional overwriting of resources\nmay occur and therefore result in loss of information.</p>\n<h2>Ask Yourself Whether</h2>\n<p>Identities obtaining all the permissions:</p>\n<ul>\n  <li> only require a subset of these permissions to perform the intended function. </li>\n  <li> have monitored activity showing that only a subset of these permissions is actually used. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to apply the least privilege principle, i.e. by only granting the necessary permissions to identities. A good practice is to start\nwith the very minimum set of permissions and to refine the policy over time. In order to fix overly permissive policies already deployed in\nproduction, a strategy could be to review the monitored activity in order to reduce the set of permissions to those most used.</p>\n<h2>Sensitive Code Example</h2>\n<p>A customer-managed policy that grants all permissions by using the wildcard (*) in the <code>Action</code> property:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"*\"], # Sensitive\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>A customer-managed policy that grants only the required permissions:</p>\n<pre>\nfrom aws_cdk.aws_iam import PolicyStatement, Effect\n\nPolicyStatement(\n    effect=Effect.ALLOW,\n    actions=[\"iam:GetAccountSummary\"],\n    resources=[\"arn:aws:iam:::user/*\"]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> <a href=\"https://cloud.google.com/iam/docs/understanding-roles\">Google Cloud Documentation</a> - Understanding roles </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6302"
      }
    },
    {
      "name": "Using unencrypted RDS DB resources is security-sensitive",
      "description": "<p>Using unencrypted RDS DB resources exposes data to unauthorized access to the underlying storage.<br> This includes database data, logs, automatic\nbackups, read replicas, snapshots, and cluster metadata.</p>\n<p>This situation can occur in a variety of scenarios, such as:</p>\n<ul>\n  <li> a malicious insider working at the cloud provider gains physical access to the storage device and exfiltrates data. </li>\n  <li> unknown attackers penetrate the cloud provider’s logical infrastructure and systems for extortion. </li>\n</ul>\n<p>AWS-managed encryption at rest reduces this risk with a simple switch.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to enable encryption at rest on any RDS DB resource, regardless of the engine.<br> In any case, no further maintenance is\nrequired as encryption at rest is fully managed by AWS.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseCluster.html\">aws_cdk.aws_rds.DatabaseCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.DatabaseInstance.html\">aws_cdk.aws_rds.DatabaseInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.DatabaseCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBCluster.html\">aws_cdk.aws_rds.CfnDBCluster</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_rds.CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_rds as rds\n)\n\nclass DatabaseStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        rds.CfnDBCluster(\n            self,\n            \"example\",\n            storage_encrypted=True\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html\">AWS Documentation</a> - Encrypting Amazon RDS\n  resources </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6303"
      }
    },
    {
      "name": "Policies granting access to all resources of an account are security-sensitive",
      "description": "<p>A policy that allows identities to access all resources in an AWS account may violate <a\nhref=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a>. Suppose an identity has permission to access\nall resources even though it only requires access to some non-sensitive ones. In this case, unauthorized access and disclosure of sensitive\ninformation will occur.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The AWS account has more than one resource with different levels of sensitivity.</p>\n<p>A risk exists if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to apply the least privilege principle, i.e., by only granting access to necessary resources. A good practice to achieve this is\nto organize or <a\nhref=\"https://aws.amazon.com/blogs/security/simplify-granting-access-to-your-aws-resources-by-using-tags-on-aws-iam-users-and-roles/\">tag</a>\nresources depending on the sensitivity level of data they store or process. Therefore, managing a secure access control is less prone to errors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>The wildcard <code>\"*\"</code> is specified as the resource for this <code>PolicyStatement</code>. This grants the update permission for all\npolicies of the account:</p>\n<pre>\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[\"*\"] # Sensitive\n        )\n    ]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Restrict the update permission to the appropriate subset of policies:</p>\n<pre>\nfrom aws_cdk import Aws\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=\"iam:CreatePolicyVersion\",\n            resources=[f\"arn:aws:iam::{Aws.ACCOUNT_ID}:policy/team1/*\"]\n        )\n    ]\n)\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Should not be raised on key policies (when AWS KMS actions are used.) </li>\n  <li> Should not be raised on policies not using any resources (if and only if all actions in the policy never require resources.) </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">AWS Documentation</a> - Grant least\n  privilege </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6304"
      }
    },
    {
      "name": "The number and name of arguments passed to a function should match its parameters",
      "description": "<p>Calling a function or a method with fewer or more arguments than expected will raise a <code>TypeError</code>. This is usually a bug and should be\nfixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n######################\n# Positional Arguments\n######################\n\nparam_args = [1, 2, 3]\nparam_kwargs = {'x': 1, 'y': 2}\n\ndef func(a, b=1):\n    print(a, b)\n\ndef positional_unlimited(a, b=1, *args):\n    print(a, b, *args)\n\nfunc(1)\nfunc(1, 42)\nfunc(1, 2, 3)  # Noncompliant. Too many positional arguments\nfunc()  # Noncompliant. Missing positional argument for \"a\"\n\npositional_unlimited(1, 2, 3, 4, 5)\n\ndef positional_limited(a, *, b=2):\n    print(a, b)\n\npositional_limited(1, 2)  # Noncompliant. Too many positional arguments\n\n\n#############################\n# Unexpected Keyword argument\n#############################\n\ndef keywords(a=1, b=2, *, c=3):\n    print(a, b, c)\n\nkeywords(1)\nkeywords(1, z=42)  # Noncompliant. Unexpected keyword argument \"z\"\n\ndef keywords_unlimited(a=1, b=2, *, c=3, **kwargs):\n    print(a, b, kwargs)\n\nkeywords_unlimited(a=1, b=2, z=42)\n\n#################################\n# Mandatory Keyword argument only\n#################################\n\ndef mandatory_keyword(a, *, b):\n    print(a, b)\n\nmandatory_keyword(1, b=2)\nmandatory_keyword(1)  # Noncompliant. Missing keyword argument \"b\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/628\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S930"
      }
    },
    {
      "name": "Lines should not be too long",
      "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:LineLength"
      }
    },
    {
      "name": "Files should not have too many lines of code",
      "description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S104"
      }
    },
    {
      "name": "Functions, methods and lambdas should not have too many parameters",
      "description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\ndef do_something(param1, param2, param3, param4, param5):\n\t...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef do_something(param1, param2, param3, param4):\n\t...\n</pre>\n<h2>Exceptions</h2>\n<p>The first argument of non-static methods, i.e. <code>self</code> or <code>cls</code>, is not counted as it is mandatory and it is passed\nautomatically.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S107"
      }
    },
    {
      "name": "Nested blocks of code should not be left empty",
      "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor i in range(3):\n    pass\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S108"
      }
    },
    {
      "name": "Function names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default provided regular expression: <code>^[a-z_][a-z0-9_]*$</code></p>\n<pre>\ndef MyFunction(a,b):\n    ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n    ...\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1542"
      }
    },
    {
      "name": "Variables should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nname = name\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nname = other.name\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1656"
      }
    },
    {
      "name": "Formatting SQL queries is security-sensitive",
      "description": "<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesn’t detect SQL injections (unlike rule <a href='/coding_rules#rule_key=python%3AS3649'>S3649</a>), the goal is only to highlight complex/formatted\nqueries.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Some parts of the query come from untrusted values (like user inputs). </li>\n  <li> The query is repeated/duplicated in other parts of the code. </li>\n  <li> The application must support different types of relational databases. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom django.db import models\nfrom django.db import connection\nfrom django.db import connections\nfrom django.db.models.expressions import RawSQL\n\nvalue = input()\n\n\nclass MyUser(models.Model):\n    name = models.CharField(max_length=200)\n\n\ndef query_my_user(request, params, value):\n    with connection.cursor() as cursor:\n        cursor.execute(\"{0}\".format(value))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/expressions/#raw-sql-expressions\n\n    RawSQL(\"select col from %s where mycol = %s and othercol = \" + value, (\"test\",))  # Sensitive\n\n    # https://docs.djangoproject.com/en/2.1/ref/models/querysets/#extra\n\n    MyUser.objects.extra(\n        select={\n            'mycol':  \"select col from sometable here mycol = %s and othercol = \" + value}, # Sensitive\n           select_params=(someparam,),\n        },\n    )\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncursor = connection.cursor(prepared=True)\nsql_insert_query = \"\"\" select col from sometable here mycol = %s and othercol = %s \"\"\"\n\nselect_tuple = (1, value)\n\ncursor.execute(sql_insert_query, select_tuple) # Compliant, the query is parameterized\nconnection.commit()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">OWASP Top 10 2021 Category A3</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command\n  </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2077"
      }
    },
    {
      "name": "The most specific \"unittest\" assertion should be used",
      "description": "<p>The <code>unittest</code> module provides assertion methods specific to common types and operations. Both versions will test the same things, but\nthe dedicated one will provide a better error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified by using a more specific function. The array below gives a list of assertions on\nwhich an issue will be raised, and which function should be used instead:</p>\n<p>||Original||Dedicated||</p>\n<p>|<code>assertTrue(x == y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x != y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x == y)</code>|<code>assertNotEqual(x, y)</code>|</p>\n<p>|<code>assertFalse(x != y)</code>|<code>assertEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt; y)</code>|<code>assertLess(x, y)</code>|</p>\n<p>|<code>assertTrue(x &lt;= y)</code>|<code>assertLessEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt; y)</code>|<code>assertGreater(x, y)</code>|</p>\n<p>|<code>assertTrue(x &gt;= y)</code>|<code>assertGreaterEqual(x, y)</code>|</p>\n<p>|<code>assertTrue(x is y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x is not y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is y)</code>|<code>assertIsNot(x, y)</code>|</p>\n<p>|<code>assertFalse(x is not y)</code>|<code>assertIs(x, y)</code>|</p>\n<p>|<code>assertTrue(x in y)</code>|<code>assertIn(x, y)</code>|</p>\n<p>|<code>assertFalse(x in y)</code>|<code>assertNotIn(x, y)</code>|</p>\n<p>|<code>assertTrue(isinstance(x, y))</code>|<code>assertIsInstance(x, y)</code>|</p>\n<p>|<code>assertFalse(isinstance(x, y))</code>|<code>assertNotIsInstance(x, y)</code>|</p>\n<p>|<code>assertEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertAlmostEqual(x, round(y, z))</code>|<code>assertAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertNotAlmostEqual(x, round(y, z))</code>|<code>assertNotAlmostEqual(x, y, z)</code>|</p>\n<p>|<code>assertEqual(x, None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertNotEqual(x, None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertTrue(x is None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertTrue(x is not None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is None)</code>|<code>assertIsNotNone(x)</code>|</p>\n<p>|<code>assertFalse(x is not None)</code>|<code>assertIsNone(x)</code>|</p>\n<p>|<code>assertEqual(x, True)</code>|<code>assertTrue(x)</code>|</p>\n<p>|<code>assertEqual(x, False)</code>|<code>assertFalse(x)</code>|</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertFalse(x == y)  # Noncompliant\n    self.assertTrue(x &lt; y)  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeTest(unittest.TestCase):\n  def test_something(self):\n    x = foo()\n    y = bar()\n    self.assertNotEqual(x, y)\n    self.assertLess(x, y)\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual\">Python documentation - the <code>unittest</code>\nmodule</a></p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5906"
      }
    },
    {
      "name": "Using unencrypted OpenSearch domains is security-sensitive",
      "description": "<p>Amazon OpenSearch Service is a managed service to host OpenSearch instances. It replaces Elasticsearch Service, which has been deprecated.</p>\n<p>To harden domain (cluster) data in case of unauthorized access, OpenSearch provides data-at-rest encryption if the engine is OpenSearch (any\nversion), or Elasticsearch with a version of 5.1 or above. Enabling encryption at rest will help protect:</p>\n<ul>\n  <li> indices </li>\n  <li> logs </li>\n  <li> swap files </li>\n  <li> data in the application directory </li>\n  <li> automated snapshots </li>\n</ul>\n<p>Thus, adversaries cannot access the data if they gain physical access to the storage medium.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to encrypt OpenSearch domains that contain sensitive information.</p>\n<p>OpenSearch handles encryption and decryption transparently, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Sensitive\",\n            version=EngineVersion.OPENSEARCH_1_3\n        ) # Sensitive, encryption is disabled by default\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Sensitive\") # Sensitive, encryption is disabled by default\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/Domain.html\">aws_cdk.aws_opensearchservice.Domain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import Domain, EncryptionAtRestOptions, EngineVersion\n\nclass DomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        Domain(self, \"Compliant\",\n            version=EngineVersion.OPENSEARCH_1_3,\n            encryption_at_rest=EncryptionAtRestOptions(\n                enabled=True\n            )\n        )\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_opensearchservice/CfnDomain.html\">aws_cdk.aws_opensearchservice.CfnDomain</a>:</p>\n<pre>\nfrom aws_cdk.aws_opensearchservice import CfnDomain\n\nclass CfnDomainStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        CfnDomain(self, \"Compliant\",\n            encryption_at_rest_options=CfnDomain.EncryptionAtRestOptionsProperty(\n                enabled=True\n            )\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html\">AWS Documentation</a> - Encryption of\n  data at rest for Amazon OpenSearch Service </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6308"
      }
    },
    {
      "name": "AWS IAM policies should not allow privilege escalation",
      "description": "<p>AWS Identity and Access Management (IAM) is the service that defines access to AWS resources. One of the core components of IAM is the policy\nwhich, when attached to an identity or a resource, defines its permissions. Policies granting permission to an Identity (a User, a Group or Role) are\ncalled identity-based policies. They add the ability to an identity to perform a predefined set of actions on a list of resources.</p>\n<p>Here is an example of a policy document defining a limited set of permission that grants a user the ability to manage his own access keys.</p>\n<pre>\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\",\n                \"iam:ListAccessKeys\",\n                \"iam:UpdateAccessKey\"\n            ],\n            \"Resource\": \"arn:aws:iam::245500951992:user/${aws:username}\",\n            \"Effect\": \"Allow\",\n            \"Sid\": \"AllowManageOwnAccessKeys\"\n        }\n    ]\n}\n</pre>\n<p>Privilege escalation generally happens when an identity policy gives an identity the ability to grant more privileges than the ones it already has.\nHere is another example of a policy document that hides a privilege escalation. It allows an identity to generate a new access key for any user from\nthe account, including users with high privileges.</p>\n<pre>\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\",\n                \"iam:ListAccessKeys\",\n                \"iam:UpdateAccessKey\"\n            ],\n            \"Resource\": \"*\",\n            \"Effect\": \"Allow\",\n            \"Sid\": \"AllowManageOwnAccessKeys\"\n        }\n    ]\n}\n</pre>\n<p>Although it looks like it grants a limited set of permissions, this policy would, in practice, give the highest privileges to the identity it’s\nattached to.</p>\n<p>Privilege escalation is a serious issue as it allows a malicious user to easily escalate to a high privilege identity from a low privilege identity\nit took control of.</p>\n<p>The example above is just one of many permission escalation vectors. Here is the list of vectors that the rule can detect:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Vector name</th>\n      <th>Summary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>Create Policy Version</p></td>\n      <td><p>Create a new IAM policy and set it as default</p></td>\n    </tr>\n    <tr>\n      <td><p>Set Default Policy Version</p></td>\n      <td><p>Set a different IAM policy version as default</p></td>\n    </tr>\n    <tr>\n      <td><p>Create AccessKey</p></td>\n      <td><p>Create a new access key for any user</p></td>\n    </tr>\n    <tr>\n      <td><p>Create Login Profile</p></td>\n      <td><p>Create a login profile with a password chosen by the attacker</p></td>\n    </tr>\n    <tr>\n      <td><p>Update Login Profile</p></td>\n      <td><p>Update the existing password with one chosen by the attacker</p></td>\n    </tr>\n    <tr>\n      <td><p>Attach User Policy</p></td>\n      <td><p>Attach a permissive IAM policy like \"AdministratorAccess\" to a user the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Attach Group Policy</p></td>\n      <td><p>Attach a permissive IAM policy like \"AdministratorAccess\" to a group containing a user the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Attach Role Policy</p></td>\n      <td><p>Attach a permissive IAM policy like \"AdministratorAccess\" to a role that can be assumed by the user the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Put User Policy</p></td>\n      <td><p>Alter the existing inline IAM policy from a user the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Put Group Policy</p></td>\n      <td><p>Alter the existing inline IAM policy from a group containing a user that the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Put Role Policy</p></td>\n      <td><p>Alter an existing inline IAM role policy. The rule will then be assumed by the user that the attacker controls</p></td>\n    </tr>\n    <tr>\n      <td><p>Add User to Group</p></td>\n      <td><p>Add a user that the attacker controls to a group that has a larger range of permissions</p></td>\n    </tr>\n    <tr>\n      <td><p>Update Assume Role Policy</p></td>\n      <td><p>Update a role’s \"AssumeRolePolicyDocument\" to allow a user the attacker controls to assume it</p></td>\n    </tr>\n    <tr>\n      <td><p>EC2</p></td>\n      <td><p>Create an EC2 instance that will execute with high privileges</p></td>\n    </tr>\n    <tr>\n      <td><p>Lambda Create and Invoke</p></td>\n      <td><p>Create a Lambda function that will execute with high privileges and invoke it</p></td>\n    </tr>\n    <tr>\n      <td><p>Lambda Create and Add Permission</p></td>\n      <td><p>Create a Lambda function that will execute with high privileges and grant permission to invoke it to a user or a service</p></td>\n    </tr>\n    <tr>\n      <td><p>Lambda triggered with an external event</p></td>\n      <td><p>Create a Lambda function that will execute with high privileges and link it to an external event</p></td>\n    </tr>\n    <tr>\n      <td><p>Update Lambda code</p></td>\n      <td><p>Update the code of a Lambda function executing with high privileges</p></td>\n    </tr>\n    <tr>\n      <td><p>CloudFormation</p></td>\n      <td><p>Create a CloudFormation stack that will execute with high privileges</p></td>\n    </tr>\n    <tr>\n      <td><p>Data Pipeline</p></td>\n      <td><p>Create a Pipeline that will execute with high privileges</p></td>\n    </tr>\n    <tr>\n      <td><p>Glue Development Endpoint</p></td>\n      <td><p>Create a Glue Development Endpoint that will execute with high privileges</p></td>\n    </tr>\n    <tr>\n      <td><p>Update Glue Dev Endpoint</p></td>\n      <td><p>Update the associated SSH key for the Glue endpoint</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>The general recommendation to protect against privilege escalation is to restrict the resources to which sensitive permissions are granted. The\nfirst example above is a good demonstration of sensitive permissions being used with a narrow scope of resources and where no privilege escalation is\npossible.</p>\n<h2>Noncompliant Code Example</h2>\n<p>The following policy allows an attacker to update the code of any Lambda function. An attacker can achieve privilege escalation by altering the\ncode of a Lambda that executes with high privileges.</p>\n<pre>\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\"*\"]  # Noncompliant\n        )\n    ]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>Narrow the policy such that only updates to the code of certain Lambda functions are allowed.</p>\n<pre>\nfrom aws_cdk.aws_iam import Effect, PolicyDocument, PolicyStatement\n\nPolicyDocument(\n    statements=[\n        PolicyStatement(\n            effect=Effect.ALLOW,\n            actions=[\"lambda:UpdateFunctionCode\"],\n            resources=[\n                \"arn:aws:lambda:us-east-2:123456789012:function:my-function:1\"\n            ]\n        )\n    ]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/\">Rhino Security Labs</a> - AWS IAM Privilege Escalation\n  – Methods and Mitigation </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-269</a> - Improper Privilege Management </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6317"
      }
    },
    {
      "name": "Non-empty statements should change control flow or have at least one side-effect",
      "description": "<p>Any statement, other than a <code>pass</code>, <code>...</code> (ellipsis) or an empty statement (i.e. a single semicolon \"<code>;</code>\"), which\nhas no side effect and does not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1 # Noncompliant; was assignment intended?\na &lt; b # Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>Exceptions</h2>\n<p><strong>Strings</strong></p>\n<p>Some projects use string literals as comments. By default, this rule will not raise an issue on these strings. Reporting on string literals can be\nenabled by setting the rule parameter \"reportOnStrings\" to \"true\".</p>\n<pre>\nclass MyClass:\n    myattr = 42\n    \"\"\"This is an attribute\"\"\"  # Noncompliant by default. Set \"reportOnStrings\" to \"false\"\n</pre>\n<p><strong>Operators</strong></p>\n<p>By default, this rule considers that no arithmetic operator has a side effect. Some rare projects redefine operators and add a side effect. You can\nlist such operators in the rule parameter \"ignoredOperators\".</p>\n<pre>\ndef process(p, beam):\n    \"\"\"\n    Apache Beam redefines \"|\" and \"&gt;&gt;\" operators and they have a side effect.\n    Thus for Apache Beam projects \"ignoredOperators\"should be set to \"|,&gt;&gt;\"\n    \"\"\"\n    p | \"create\" &gt;&gt; beam.Create()  # Noncompliant by default\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S905"
      }
    },
    {
      "name": "Cyclomatic Complexity of classes should not be too high",
      "description": "<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:ClassComplexity"
      }
    },
    {
      "name": "Method overrides should not change contracts",
      "description": "<p>Because a subclass instance may be used as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract\nthat relate to the Liskov Substitution Principle. Specifically, an overriding method should be callable with the same parameters as the overriden\none.</p>\n<p>The following modifications are ok:</p>\n<ul>\n  <li> Adding an optional parameter, i.e. with a default value, as long as they don’t change the order of positional parameters. </li>\n  <li> Renaming a positional-only parameter. </li>\n  <li> Reordering keyword-only parameters. </li>\n  <li> Adding a default value to an existing parameter. </li>\n  <li> Changing the default value of an existing parameter. </li>\n  <li> Extend the ways a parameter can be provided, i.e. change a keyword-only or positional-only parameter to a keyword-or-positional parameter. This\n  is only true if the order of positional parameters doesn’t change. New positional parameters should be placed at the end. </li>\n  <li> Adding a vararg parameter (<code>*args</code>). </li>\n  <li> Adding a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>The following modifications are not ok:</p>\n<ul>\n  <li> Removing parameters, even when they have default values. </li>\n  <li> Adding mandatory parameters, i.e. without a default value. </li>\n  <li> Removing the default value of a parameter. </li>\n  <li> Reordering parameters, except when they are keyword-only parameters. </li>\n  <li> Removing some ways of providing a parameter. If a parameter could be passed as keyword it should still be possible to pass it as keyword, and\n  the same is true for positional parameters. </li>\n  <li> Removing a vararg parameter (<code>*args</code>). </li>\n  <li> Removing a keywords parameter (<code>**kwargs</code>). </li>\n</ul>\n<p>This rule raises an issue when the signature of an overriding method does not accept the same parameters as the overriden one. Only instance\nmethods are considered, class methods and static methods are ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2, param3): # Noncompliant * 2.\n        # Remove parameter \"param2\" or provide a default value.\n        # Remove parameter \"param3\" or provide a default value.\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self): # Noncompliant. Add missing parameter \"param1\".\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, inserted, param1): # Noncompliant\n        # Remove parameters \"inserted\" or provide a default value.\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassMore(ParentClass):\n    def mymethod(self, param1, param2=None, param3=None):\n        pass\n\nclass ChildClassLess(ParentClass):\n    def mymethod(self, param1=None):\n        pass\n\nclass ChildClassReordered(ParentClass):\n    def mymethod(self, param1, inserted=None):\n        pass\n</pre>\n<h2>Exceptions</h2>\n<p>In theory renaming parameters also breaks Liskov Substitution Principle. Arguments can’t be passed via keyword arguments anymore. However, <a\nhref=\"https://www.python.org/dev/peps/pep-0570/#consistency-in-subclasses\">as PEP-570 says</a>, it is common to rename parameters when it improves\ncode readability and when arguments are always passed by position.</p>\n<p>\"Positional-Only Parameters\" were introduced in python 3.8 to solve this problem. As most programs will need to support older versions of python,\nthis rule won’t raise an issue on renamed parameters.</p>\n<pre>\nclass ParentClass(object):\n    def mymethod(self, param1):\n        pass\n\nclass ChildClassRenamed(ParentClass):\n    def mymethod(self, renamed): # No issue but this is suspicious. Rename this parameter as \"param1\" or use positional only arguments if possible.\n        pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n  <li> Python Enhancement Proposal (PEP) 3102 - <a href=\"https://www.python.org/dev/peps/pep-3102/\">Keyword-Only Arguments</a> </li>\n  <li> Python Enhancement Proposal (PEP) 570 - <a href=\"https://www.python.org/dev/peps/pep-0570/\">Python Positional-Only Parameters</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2638"
      }
    },
    {
      "name": "XML parsers should not be vulnerable to XXE attacks",
      "description": "<p>XML standard allows the use of entities, declared in the DOCTYPE of the document, which can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or <a href=\"https://www.w3.org/TR/xml/#sec-external-ent\">external</a>.</p>\n<p>When parsing the XML file, the content of the external entities is retrieved from an external storage such as the file system or network, which may\nlead, if no restrictions are put in place, to arbitrary file disclosures or <a\nhref=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">server-side request forgery (SSRF)</a> vulnerabilities.</p>\n<p>It’s recommended to limit resolution of external entities by using one of these solutions:</p>\n<ul>\n  <li> If DOCTYPE is not necessary, completely disable all DOCTYPE declarations. </li>\n  <li> If external entities are not necessary, completely disable their declarations. </li>\n  <li> If external entities are necessary then:\n    <ul>\n      <li> Use XML processor features, if available, to authorize only required protocols (eg: https). </li>\n      <li> And use an entity resolver (and optionally an XML Catalog) to resolve only trusted entities. </li>\n    </ul>  </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p><a href=\"https://lxml.de/\">lxml</a> module:</p>\n<ul>\n  <li> When parsing XML: </li>\n</ul>\n<pre>\nparser = etree.XMLParser() # Noncompliant: by default resolve_entities is set to true\ntree1 = etree.parse('ressources/xxe.xml', parser)\nroot1 = tree1.getroot()\n\nparser = etree.XMLParser(resolve_entities=True) # Noncompliant\ntree1 = etree.parse('ressources/xxe.xml', parser)\nroot1 = tree1.getroot()\n</pre>\n<ul>\n  <li> When validating XML: </li>\n</ul>\n<pre>\nparser = etree.XMLParser(resolve_entities=True) # Noncompliant\ntreexsd = etree.parse('ressources/xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd)\n</pre>\n<ul>\n  <li> When transforming XML: </li>\n</ul>\n<pre>\nac = etree.XSLTAccessControl(read_network=True, write_network=False)  # Noncompliant, read_network is set to true/network access is authorized\ntransform = etree.XSLT(rootxsl, access_control=ac)\n</pre>\n<p><a href=\"https://docs.python.org/3/library/xml.sax.html\">xml.sax</a> module:</p>\n<pre>\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\n\nparser.setFeature(feature_external_ges, True) # Noncompliant\nparser.parse(\"ressources/xxe.xml\")\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://lxml.de/\">lxml</a> module:</p>\n<ul>\n  <li> When parsing XML, disable <code>resolve_entities</code> and <em>network access</em>: </li>\n</ul>\n<pre>\nparser = etree.XMLParser(resolve_entities=False, no_network=True) # Compliant\ntree1 = etree.parse('ressources/xxe.xml', parser)\nroot1 = tree1.getroot()\n</pre>\n<ul>\n  <li> When validating XML (note that network access <a href=\"https://bugs.launchpad.net/lxml/+bug/1234114\">cannot be completely disabled</a> when\n  calling XMLSchema): </li>\n</ul>\n<pre>\nparser = etree.XMLParser(resolve_entities=False) # Compliant: by default no_network is set to true\ntreexsd = etree.parse('ressources/xxe.xsd', parser)\nrootxsd = treexsd.getroot()\nschema = etree.XMLSchema(rootxsd) # Compliant\n</pre>\n<ul>\n  <li> When transforming XML, disable access to network and file system: </li>\n</ul>\n<pre>\nparser = etree.XMLParser(resolve_entities=False) # Compliant\ntreexsl = etree.parse('ressources/xxe.xsl', parser)\nrootxsl = treexsl.getroot()\n\nac = etree.XSLTAccessControl.DENY_ALL  # Compliant\ntransform = etree.XSLT(rootxsl, access_control=ac) # Compliant\n</pre>\n<p>To prevent xxe attacks with <a href=\"https://docs.python.org/3/library/xml.sax.html\">xml.sax</a> module (for <a\nhref=\"https://docs.python.org/3/library/xml.html#xml-vulnerabilities\">other security reasons</a> than XXE, xml.sax is not recommended):</p>\n<pre>\nparser = xml.sax.make_parser()\nmyHandler = MyHandler()\nparser.setContentHandler(myHandler)\nparser.parse(\"ressources/xxe.xml\") # Compliant: in version 3.7.1: The SAX parser no longer processes general external entities by default\n\nparser.setFeature(feature_external_ges, False) # Compliant\nparser.parse(\"ressources/xxe.xml\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">OWASP Top 10 2017 Category A4</a> - XML External\n  Entities (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\">OWASP XXE Prevention Cheat Sheet</a>\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/611\">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/827\">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2755"
      }
    },
    {
      "name": "\"=+\" should not be used instead of \"+=\"",
      "description": "<p>The use of operators pairs ( <code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)\nwill run fine, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code> or <code>=-</code> is used without any spacing between the two operators and when there is at least\none whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntarget = -5\nnum = 3\n\ntarget =- num  # Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num # Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntarget = -5\nnum = 3\n\ntarget = -num  # Compliant; intent to assign inverse value of num is clear\ntarget += num\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2757"
      }
    },
    {
      "name": "Assert should not be called on a tuple literal",
      "description": "<p>Using the <code>assert</code> statement on a tuple literal will always fail if the tuple is empty, and always succeed otherwise.</p>\n<p>The <code>assert</code> statement does not have parentheses around its parameters. Calling <code>assert(x, y)</code> will test if the tuple\n<code>(x, y)</code> is True, which is always the case.</p>\n<p>There are two possible fixes:</p>\n<ul>\n  <li> If your intention is to test the first value of the tuple and use the second value as a message, simply remove the parentheses. </li>\n  <li> If your intention is to check that every element of the tuple is <code>True</code>, test each value separately. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef test_values(a, b):\n    assert (a, b)  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef test_values(a, b):\n    # If you mean to test \"a\" and use \"b\" as an error message\n    assert a, b\n\n    # If you mean to test the values of \"a\" and \"b\"\n    assert a and b\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - The <code>assert</code>\n  statement</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5905"
      }
    },
    {
      "name": "Using unencrypted SageMaker notebook instances is security-sensitive",
      "description": "<p>Amazon SageMaker is a managed machine learning service in a hosted production-ready environment. To train machine learning models, SageMaker\ninstances can process potentially sensitive data, such as personal information that should not be stored unencrypted. In the event that adversaries\nphysically access the storage media, they cannot decrypt encrypted data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The instance contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to encrypt SageMaker notebook instances that contain sensitive information. Encryption and decryption are handled transparently by\nSageMaker, so no further modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        sagemaker.CfnNotebookInstance(\n            self, \"Sensitive\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\"\n        )  # Sensitive, no KMS key is set by default; thus, encryption is disabled\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_sagemaker/CfnNotebookInstance.html\">aws_cdk.aws_sagemaker.CfnNotebookInstance</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sagemaker as sagemaker,\n    aws_kms as kms\n)\n\nclass CfnSagemakerStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        my_key = kms.Key(self, \"Key\")\n        sagemaker.CfnNotebookInstance(\n            self, \"Compliant\",\n            instance_type=\"instanceType\",\n            role_arn=\"roleArn\",\n            kms_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html\">Protect Data at Rest Using Encryption</a> </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6319"
      }
    },
    {
      "name": "Files should contain an empty newline at the end",
      "description": "<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test:\n+    pass\n \\ No newline at end of file\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S113"
      }
    },
    {
      "name": "Field names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$</code>:</p>\n<pre>\nclass MyClass:\n  myField = 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n  my_field = 1\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S116"
      }
    },
    {
      "name": "Local variable and function parameter names should comply with a naming convention",
      "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S117"
      }
    },
    {
      "name": "The \"print\" statement should not be used",
      "description": "<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprint '1'  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprint('1')\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:PrintStatementUsage"
      }
    },
    {
      "name": "Functions and lambdas should not reference variables defined in enclosing loops",
      "description": "<p>Nested functions and lambdas can reference variables defined in enclosing scopes. This can create tricky bugs when the variable and the function\nare defined in a loop. If the function is called in another iteration or after the loop finishes, it will see the variables' last value instead of\nseeing the values corresponding to the iteration where the function was defined.</p>\n<p>Capturing loop variables might work for some time but:</p>\n<ul>\n  <li> it makes the code difficult to understand. </li>\n  <li> it increases the risk of introducing a bug when the code is refactored or when dependencies are updated. See an example with the builtin \"map\"\n  below. </li>\n</ul>\n<p>One solution is to add a parameter to the function/lambda and use the previously captured variable as its default value. Default values are only\nexecuted once, when the function is defined, which means that the parameter’s value will remain the same even when the variable is reassigned in\nfollowing iterations.</p>\n<p>Another solution is to pass the variable as an argument to the function/lambda when it is called.</p>\n<p>This rule raises an issue when a function or lambda references a variable defined in an enclosing loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda: i)  # Noncompliant\n\n        def func():\n            return i  # Noncompliant\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    Passing loop variable as default values also makes sure that the code is future-proof.\n    For example the following code will work as intended with python 2 but not python 3.\n    Why? because \"map\" behavior changed. It now returns an iterator and only executes\n    the lambda when required. The same is true for other functions such as \"filter\".\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x: x + i, range(3)))  # Noncompliant\n    for sublist in lst:\n        # prints [4, 5, 6] x 4 with python 3, with python 2 it prints [0, 1, 2], [1, 2, 3], ...\n        print(list(sublist))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef run():\n    mylist = []\n    for i in range(5):\n        mylist.append(lambda i=i: i)  # passing the variable as a parameter with a default value\n\n        def func(i=i):  # same for nested functions\n            return i\n        mylist.append(func)\n\ndef example_of_api_change():\n    \"\"\"\"\n    This will work for both python 2 and python 3.\n    \"\"\"\n    lst = []\n    for i in range(5):\n        lst.append(map(lambda x, value=i: x + value, range(3)))  # Passing \"i\" as a default value\n    for sublist in lst:\n        print(list(sublist))\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised if the function or lambda is directly called in the same loop. This still makes the design difficult to understand but it\nis less error prone.</p>\n<pre>\ndef function_called_in_loop():\n    for i in range(10):\n        print((lambda param: param * i)(42)) # Calling the lambda directly\n\n        def func(param):\n            return param * i\n\n        print(func(42))  # Calling \"func\" directly\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\">The Hitchhiker’s Guide to Python - Common Gotchas</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#function-definitions\">Function definitions</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1515"
      }
    },
    {
      "name": "Loops with at most one iteration should be refactored",
      "description": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>raise</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n  break\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile node is not None:\n  node = node.parent()\n  print(node)\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1751"
      }
    },
    {
      "name": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\n    do_second()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant; duplicates first condition\n    do_second()\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # no issue, usually this is done on purpose to increase the readability\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s when all branches have the same single line of code. In\ncase of <code>if</code> chains with <code>else</code>-s rule <a href='/coding_rules#rule_key=python%3AS3923'>S3923</a> raises a bug.</p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_first()\nelif 20 &lt;= a &lt; 50:\n    do_first()         # Noncompliant, this might have been done on purpose but probably not\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1871"
      }
    },
    {
      "name": "Recursion should not be infinite",
      "description": "<p>Recursion happens when control enters a loop that has no exit. This can happen when a method invokes itself or when a pair of methods invoke each\nother. It can be a useful tool, but unless the method includes a provision to break out of the recursion and <code>return</code>, the recursion will\ncontinue until the stack overflows and the program crashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef my_pow(num, exponent):  # Noncompliant\n    num = num * my_pow(num, exponent - 1)\n    return num  # this is never reached\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_pow(num, exponent):  # Compliant\n    if exponent &gt; 1:\n      num = num * my_pow(num, exponent - 1)\n    return num\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2190"
      }
    },
    {
      "name": "HTML autoescape mechanism should not be globally disabled",
      "description": "<p>Template engines have an HTML autoescape mechanism that protects web applications against most common cross-site-scripting (XSS)\nvulnerabilities.</p>\n<p>By default, it automatically replaces HTML special characters in any template variables. This secure by design configuration should not be globally\ndisabled.</p>\n<p>Escaping HTML from template variables prevents switching into any execution context, like <code>&lt;script&gt;</code>. Disabling autoescaping\nforces developers to manually escape each template variable for the application to be safe. A more pragmatic approach is to escape by default and to\nmanually disable escaping when needed.</p>\n<p>A successful exploitation of a cross-site-scripting vulnerability by an attacker allow him to execute malicious JavaScript code in a user’s web\nbrowser. The most severe XSS attacks involve:</p>\n<ul>\n  <li> Forced redirection </li>\n  <li> Modify presentation of content </li>\n  <li> User accounts takeover after disclosure of sensitive information like session cookies or passwords </li>\n</ul>\n<p>This rule supports the following libraries:</p>\n<ul>\n  <li> <a href=\"https://github.com/django/django\">Django Templates</a> </li>\n  <li> <a href=\"https://github.com/pallets/jinja\">Jinja2</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Noncompliant; New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">OWASP Top 10 2017 Category A7</a> - Cross-Site\n  Scripting (XSS) </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/80\">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/81\">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/82\">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a Web\n  Page </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/83\">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/84\">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/85\">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/86\">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in Web\n  Pages </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/87\">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=python%3AS5247'>S5247</a> instead.</p>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5439"
      }
    },
    {
      "name": "Identity comparisons should not be used with cached typed",
      "description": "<p>Identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>Integers, bytes, floats, strings, frozensets and tuples should not be compared with identity operators because the result may not be as expected.\nIf you need to compare these types you should use instead equality operators <code>==</code> or <code>!=</code>.</p>\n<p>The CPython interpreter caches certain builtin values for integers, bytes, floats, strings, frozensets and tuples. For example, the literal\n<code>1</code> will create the same object as <code>int(\"1\")</code>, which means that <code>1 is int(\"1\")</code> is True. However this works only by\nchance as other integer values are not cached, for example <code>int(\"1000\") is 1000</code> will always be <code>False</code>. This behavior is not\npart of Python language specification and could vary between interpreters. CPython 3.8 even <a\nhref=\"https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior\">warns about comparing literals using identity operators</a>.</p>\n<p>The only case where using the \"is\" operator with a cached type is ok is with \"interned\" strings. Note however that interned strings don’t\nnecessarily have the same identity as string literals.</p>\n<p>This rule raises an issue when at least one operand of an identity operator:</p>\n<ul>\n  <li> is of type <code>int</code>, <code>bytes</code>, <code>float</code>, <code>frozenset</code> or <code>tuple</code>. </li>\n  <li> or it is a string literal. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef literal_comparison(param):\n    param is 2000  # Noncompliant\n\nliteral_comparison(2000)  # will return True\nliteral_comparison(int(\"2000\"))  # will return False\n\n() is tuple()  # Noncompliant. Always True\n(1,) is tuple([1])  # Noncompliant. Always False\n\nfrom sys import intern\n\nwith open(\"test.txt\") as f:  # test.txt contains \"blabla\\n\"\n    text = f.read()\nintern(text) is \"blabla\\n\"  # Noncompliant. Always False\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef literal_comparison(param):\n    param == 2000\n\nliteral_comparison(2000)  # will return True\nliteral_comparison(int(\"2000\"))  # will return True\n\n() == tuple()  # Always True\n(1,) == tuple([1])  # Always True\n\nfrom sys import intern\n\nwith open(\"tmp/test.txt\") as f:  # test.txt contains \"blabla\\n\"\n    text = f.read()\nintern(text) is intern(\"blabla\\n\")  # Always True\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs identity</a> - Trey Hunner\n  </li>\n  <li> <a href=\"https://docs.python.org/3.7/library/sys.html?highlight=sys.intern#sys.intern\">Python documentation - sys.intern</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5795"
      }
    },
    {
      "name": "New objects should not be created only to check their identity",
      "description": "<p>Identity operators <code>is</code> and <code>is not</code> check if the same object is on both sides, i.e. <code>a is b</code> returns\n<code>True</code> if <code>id(a) == id(b)</code>.</p>\n<p>When a new object is created it will have its own identity. Thus if an object is created and used only in an identity check it is not possible for\nthe other operand to be the same object. The comparison is always <code>False</code> or always <code>True</code> depending on the operator used,\n<code>is</code> or <code>is not</code>. To avoid this problem the identity operator could be replaced with an equality operator (== or !=), which will\nuse <code>__eq__</code> or <code>__ne__</code> methods under the hood.</p>\n<p>This rule raises an issue when at least one operand of an identity operator is a new object which has been created just for this check, i.e.:</p>\n<ul>\n  <li> When it is a dict, list or set literal. </li>\n  <li> When it is a call to <code>dict</code>, <code>set</code>, <code>list</code> or <code>complex</code> built-in functions. </li>\n  <li> When such a new object is assigned to only one variable and this variable is used in an identity check. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(param):\n    param is {1: 2}  # Noncompliant; always False\n    param is not {1, 2, 3}  # Noncompliant; always True\n    param is [1, 2, 3]  # Noncompliant; always False\n\n    param is dict(a=1)  # Noncompliant; always False\n\n    mylist = []  # mylist is assigned a new object\n    param is mylist  # Noncompliant; always False\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(param):\n    param == {1: 2}\n    param != {1, 2, 3}\n    param == [1, 2, 3]\n\n    param == dict(a=1)\n\n    mylist = []\n    param == mylist\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://adamj.eu/tech/2020/01/21/why-does-python-3-8-syntaxwarning-for-is-literal/\">Why does Python 3.8 log a SyntaxWarning for 'is'\n  with literals?</a> - Adam Johnson </li>\n  <li> <a href=\"https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/#Equality_vs_identity\">Equality vs identity</a> - Trey Hunner\n  </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5796"
      }
    },
    {
      "name": "Constants should not be used as conditions",
      "description": "<p>When a constant is used as a condition, either it has no effect on the execution flow and it can be removed, or some code will never be executed\nand it is a bug.</p>\n<p>This rule raises an issue when a constant expression is used as a condition in an <code>if</code>, <code>elif</code>, a conditional expression or\nother boolean expressions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(param = None):\n    param = (1,)\n    if param:  # Noncompliant. var is always set to (1,), the first branch of the if will always execute.\n        return sum(param)\n    else:\n        return None\n\nvar2 = 1 if func else 2  # Noncompliant. \"func\" will always be equivalent to True.\nvar3 = func and 1 else 2  # Noncompliant.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(param = None):\n    if param is None:\n        param = (1,)\n    if param:\n        return sum(param)\n    else:\n        return None\n\nvar2 = 1 if func() else 2\nvar3 = func() and 1 else 2\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0285/\">PEP 285 - Adding a bool type</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Python documentation - Truth Value Testing</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5797"
      }
    },
    {
      "name": "Implicit string and byte concatenations should not be confusing",
      "description": "<p>Python concatenates adjacent string or byte literals at compile time. It means that <code>\"a\" \"b\"</code> is equivalent to <code>\"ab\"</code>. This\nis sometimes used to split a long string on multiple lines. However an implicit string concatenation can also be very confusing. In the following\ncontexts it might indicate that a comma was forgotten:</p>\n<ul>\n  <li> when the two strings are on the same line it looks like a badly formatted tuple. Parenthesises are not mandatory to create a tuple, only the\n  comma is. </li>\n  <li> when the strings are in a list, set or tuple. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func():\n    return \"item1\" \"item2\"  # Noncompliant\n\n[\"1\",\n \"2\"  # Noncompliant\n \"3\",\n \"a very very very\"  # Noncompliant\n \"very very long string\",\n \"4\"]\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func():\n    return \"item1\", \"item2\"\n\n[\"1\",\n \"2\",\n \"3\",\n \"a very very very\" +\n \"very very long string\",\n \"4\"]\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when there is a visible reason for the string concatenation:</p>\n<ul>\n  <li> when the quotes used for both strings are different. This can be used to avoid escaping quotes </li>\n  <li> when the strings or bytes have different prefixes, i.e. \"f\" for f-strings, \"r\" for raw, \"u\" for unicode and no prefix for normal strings. </li>\n  <li> when strings are visibly split to avoid long lines of code. (Example: the first string ends with a space, punctuation or <code>\\n</code>).\n  </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5799"
      }
    },
    {
      "name": "String literals should not be duplicated",
      "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\ndef run():\n    prepare(\"this is a duplicate\")  # Noncompliant - \"this is a duplicate\" is duplicated 3 times\n    execute(\"this is a duplicate\")\n    release(\"this is a duplicate\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nACTION_1 = \"action1\"\n\ndef run():\n    prepare(ACTION_1)\n    execute(ACTION_1)\n    release(ACTION_1)\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised on:</p>\n<ul>\n  <li> duplicated string in decorators </li>\n  <li> strings with less than 5 characters </li>\n  <li> strings with only letters, numbers and underscores </li>\n</ul>\n<pre>\n@app.route(\"/api/users/\", methods=['GET', 'POST', 'PUT'])\ndef users():\n    pass\n\n@app.route(\"/api/projects/\", methods=['GET', 'POST', 'PUT'])  # Compliant\ndef projects():\n    pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1192"
      }
    },
    {
      "name": "Files should not be too complex",
      "description": "<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:FileComplexity"
      }
    },
    {
      "name": "Class names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<p>The default regular expression is based on PEP-8 standard. It allows \"CapWords\" convention and \"snake_case\" in lowercase. The \"snake_case\"\nconvention is accepted by PEP-8 when the class is primarily used as a callable (ex: decorator, context manager, etc…​). However the \"CapWords\"\nconvention is recommended in every case.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^_?([A-Z_][a-zA-Z0-9]*|[a-z_][a-z0-9_]*)$</code>:</p>\n<pre>\nclass myClass:  # Noncompliant\n   ...\n\nclass my_CONTEXT_manager:  # Noncompliant\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n   ...\n\nclass my_context_manager:\n    def __enter__(self):\n        pass\n    def __exit__(self, type, value, traceback):\n        pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S101"
      }
    },
    {
      "name": "All code should be reachable",
      "description": "<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code\nblock. So any statements that come after a jump are dead code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/561\">MITRE, CWE-561</a> - Dead Code </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1763"
      }
    },
    {
      "name": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>Note that this rule will raise issues on <code>a == a</code> and <code>a != a</code> expressions which are sometime used to detect <code>NaN</code>\nvalues. It is recommended to use instead <a href=\"https://docs.python.org/3/library/math.html#math.isnan\"><code>math.isnan</code></a> or an equivalent\nfunction. This will improve code readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>The following are ignored:</p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1</code> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=python%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1764"
      }
    },
    {
      "name": "Using publicly writable directories is security-sensitive",
      "description": "<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\">CVE-2012-2451</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\">CVE-2015-1838</a> </li>\n</ul>\n<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples bellow). It\nalso detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>\n<ul>\n  <li> <code>/tmp</code> </li>\n  <li> <code>/var/tmp</code> </li>\n  <li> <code>/usr/tmp</code> </li>\n  <li> <code>/dev/shm</code> </li>\n  <li> <code>/dev/mqueue</code> </li>\n  <li> <code>/run/lock</code> </li>\n  <li> <code>/var/run/lock</code> </li>\n  <li> <code>/Library/Caches</code> </li>\n  <li> <code>/Users/Shared</code> </li>\n  <li> <code>/private/tmp</code> </li>\n  <li> <code>/private/var/tmp</code> </li>\n  <li> <code>\\Windows\\Temp</code> </li>\n  <li> <code>\\Temp</code> </li>\n  <li> <code>\\TMP</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Files are read from or written into a publicly writable folder </li>\n  <li> The application creates files with predictable names into a publicly writable folder </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a dedicated sub-folder with tightly controlled permissions </li>\n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      <li> The generated filename is unpredictable </li>\n      <li> The file is readable and writable only by the creating user ID </li>\n      <li> The file descriptor is not inherited by child processes </li>\n      <li> The file will be destroyed as soon as it is closed </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nfile = open(\"/tmp/temporary_file\",\"w+\") # Sensitive\n</pre>\n<pre>\ntmp_dir = os.environ.get('TMPDIR') # Sensitive\nfile = open(tmp_dir+\"/temporary_file\",\"w+\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport tempfile\n\nfile = tempfile.TemporaryFile(dir=\"/tmp/my_subdirectory\", mode='\"w+\") # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/377\">MITRE, CWE-377</a> - Insecure Temporary File </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/379\">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP, Insecure Temporary File</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html\">Python tempfile module</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5443"
      }
    },
    {
      "name": "Insecure temporary file creation methods should not be used",
      "description": "<p>Creating temporary files using insecure methods exposes the application to race conditions on filenames: a malicious user can try to create a file\nwith a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted.\nThis risk is even higher if the application run with elevated permissions.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-1858\">CVE-2014-1858</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-1932\">CVE-2014-1932</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport tempfile\n\nfilename = tempfile.mktemp() # Noncompliant\ntmp_file = open(filename, \"w+\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport tempfile\n\ntmp_file1 = tempfile.NamedTemporaryFile(delete=False) # Compliant; Easy replacement to tempfile.mktemp()\ntmp_file2 = tempfile.NamedTemporaryFile() # Compliant; Created file will be automatically deleted\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities\">OWASP Top 10 2017 Category A9</a> -\n  Using Components with Known Vulnerabilities </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/377\">MITRE, CWE-377</a> - Insecure Temporary File </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/379\">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP, Insecure Temporary File</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/tempfile.html#deprecated-functions-and-variables\">Python tempfile module</a> </li>\n  <li> <a href=\"https://docs.python.org/2.7/library/os.html\">Python 2.7 os module</a> </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5445"
      }
    },
    {
      "name": "Walrus operator should not make code confusing",
      "description": "<p>The <a href=\"https://www.python.org/dev/peps/pep-0572\">walrus operator</a> <code>:=</code> (also known as \"assignment expression\") should be used\nwith caution as it can easily make code more difficult to understand and thus maintain. In such case it is advised to refactor the code and use an\nassignment statement (i.e. <code>=</code>) instead.</p>\n<p>This rule raises an issue when the walrus operator is used in a way which makes the code confusing, as described in <a\nhref=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572</a>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# using an assignment expression (:=) as an assignment statement (=) is more explicit\n(v := f(p))  # Noncompliant\nv0 = (v1 := f(p))  # Noncompliant\n\n# using an assignment expression in a function call when keyword arguments are also used.\nfunc(a=(b := f(p)))  # Noncompliant\nfunc(a := f(p), b=2)  # Noncompliant\ndef func(param=(p := 21)):  # Noncompliant\n    pass\n\n# using an assignment expression in an annotation\ndef func(param: (p := 21) = 3):  # Noncompliant\n    pass\n\n# using assignment expression in an f-string. Character \":\" is also used as a formatting marker in f-strings.\nf'{(x:=10)}'  # Noncompliant\nf'{x:=10}' # No issue raised but still not recommended. This is not an assignment expression. '=10' is passed to the f-string formatter.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nv = f(p)\nv0 = v1 = f(p)\n\nvalue = f(p)\nfunc(a=value)\nfunc(value, b=2)\ndef func(param=21):\n    p = 21\n\np = 21\ndef func(param: p = 3):\n    pass\n\nx = 10\nf'{x}'\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0572/#exceptional-cases\">PEP 572 - Assignment Expressions</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5685"
      }
    },
    {
      "name": "Statements should be on separate lines",
      "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (True): print(\"hello\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (True):\n    print(\"hello\")\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:OneStatementPerLine"
      }
    },
    {
      "name": "Method names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: <code>^[a-z_][a-z0-9_]*$</code></p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b):\n        ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S100"
      }
    },
    {
      "name": "Function parameters initial values should not be ignored",
      "description": "<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo(strings, param):\n    param = 1  # NonCompliant\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1226"
      }
    },
    {
      "name": "Using hardcoded IP addresses is security-sensitive",
      "description": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack’s impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It’s a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nip = '192.168.12.42'\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1313"
      }
    },
    {
      "name": "Track lack of copyright and license headers",
      "description": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n#\n# SonarQube, open source software quality management tool.\n# Copyright (C) 2008-2018 SonarSource\n# mailto:contact AT sonarsource DOT com\n#\n# SonarQube is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation; either\n# version 3 of the License, or (at your option) any later version.\n#\n# SonarQube is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program; if not, write to the Free Software Foundation,\n# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n#\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1451"
      }
    },
    {
      "name": "Dynamically executing code is security-sensitive",
      "description": "<p>Executing code dynamically is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9807\">CVE-2017-9807</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9802\">CVE-2017-9802</a> </li>\n</ul>\n<p>Some APIs enable the execution of dynamic code by providing it as strings at runtime. These APIs might be useful in some very specific\nmeta-programming use-cases. However most of the time their use is frowned upon because they also increase the risk of maliciously <a\nhref=\"https://owasp.org/www-community/attacks/Code_Injection\">Injected Code</a>. Such attacks can either run on the server or in the client (example:\nXSS attack) and have a huge impact on an application’s security.</p>\n<p>This rule marks for review each occurrence of such dynamic code execution. This rule does not detect code injections. It only highlights the use of\nAPIs which should be used sparingly and very carefully.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed code may come from an untrusted source and hasn’t been sanitized. </li>\n  <li> you really need to run code dynamically. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Regarding the execution of unknown code, the best solution is to not run code provided by an untrusted source. If you really need to do it, run the\ncode in a <a href=\"https://en.wikipedia.org/wiki/Sandbox_(computer_security)\">sandboxed</a> environment. Use jails, firewalls and whatever means your\noperating system and programming language provide (example: <a\nhref=\"https://wiki.sei.cmu.edu/confluence/display/java/SEC54-J.+Create+a+secure+sandbox+using+a+security+manager\">Security Managers</a> in java, <a\nhref=\"https://www.w3schools.com/tags/att_iframe_sandbox.asp\">iframes</a> and <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin\npolicy</a> for javascript in a web browser).</p>\n<p>Do not try to create a blacklist of dangerous code. It is impossible to cover all attacks that way.</p>\n<p>Avoid using dynamic code APIs whenever possible. Hard-coded code is always safer.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\nvalue = input()\ncommand = 'os.system(\"%s\")' % value\n\ndef evaluate(command, file, mode):\n    eval(command)  # Sensitive.\n\neval(command)  # Sensitive. Dynamic code\n\ndef execute(code, file, mode):\n    exec(code)  # Sensitive.\n    exec(compile(code, file, mode))  # Sensitive.\n\nexec(command)  # Sensitive.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">OWASP Top 10 2021 Category A3</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/95\">MITRE, CWE-95</a> - Improper Neutralization of Directives in Dynamically Evaluated Code\n  ('Eval Injection') </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1523"
      }
    },
    {
      "name": "Module names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S1578"
      }
    },
    {
      "name": "Hashes should include an unpredictable salt",
      "description": "<p>In cryptography, a \"salt\" is an extra piece of data which is included when hashing a password. This makes <code>rainbow-table attacks</code> more\ndifficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the\nhash value in databases of precomputed hashes (called <code>rainbow-tables</code>).</p>\n<p>This rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as <code>PBKDF2</code>, is used\nwith a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as <code>sha1</code> or <code>md5</code>\nas they should not be used to hash passwords.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use hashing functions generating their own secure salt or generate a secure random value of at least 16 bytes. </li>\n  <li> The salt should be unique by user password. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>hashlib</p>\n<pre>\nimport crypt\nfrom hashlib import pbkdf2_hmac\n\nhash = pbkdf2_hmac('sha256', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000)    # Noncompliant: salt is hardcoded\n</pre>\n<p>crypt</p>\n<pre>\nhash = crypt.crypt(password)         # Noncompliant: salt is not provided\n</pre>\n<h2>Compliant Solution</h2>\n<p>hashlib</p>\n<pre>\nimport crypt\nfrom hashlib import pbkdf2_hmac\n\nsalt = os.urandom(32)\nhash = pbkdf2_hmac('sha256', password, salt, 100000)    # Compliant\n</pre>\n<p>crypt</p>\n<pre>\nsalt = crypt.mksalt(crypt.METHOD_SHA256)\nhash = crypt.crypt(password, salt)         # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/759\">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/760\">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2053"
      }
    },
    {
      "name": "Setting loose POSIX file permissions is security-sensitive",
      "description": "<p>In Unix, \"<code>others</code>\" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>\n<p>Granting permissions to this group can lead to unintended access to files.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0)  # Sensitive\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXO)   # Sensitive\nos.lchmod(\"/tmp/fs\", stat.S_IRWXO)  # Sensitive\nos.fchmod(fd, stat.S_IRWXO)         # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.umask\">os.umask</a>:</p>\n<pre>\nos.umask(0o777)\n</pre>\n<p>For <a href=\"https://docs.python.org/3/library/os.html#os.chmod\">os.chmod</a>, <a\nhref=\"https://docs.python.org/3/library/os.html#os.lchmod\">os.lchmod</a>, and <a\nhref=\"https://docs.python.org/3/library/os.html#os.fchmod\">os.fchmod</a>:</p>\n<pre>\nos.chmod(\"/tmp/fs\", stat.S_IRWXU)\nos.lchmod(\"/tmp/fs\", stat.S_IRWXU)\nos.fchmod(fd, stat.S_IRWXU)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/266\">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2612"
      }
    },
    {
      "name": "\"__exit__\" should accept type, value, and traceback arguments",
      "description": "<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError</code> at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=python%3AS5722'>S5722</a> instead.</p>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2733"
      }
    },
    {
      "name": "\"__init__\" should not return a value",
      "description": "<p>By contract, every Python function returns something, even if it’s the <code>None</code> value, which can be returned implicitly by omitting the\n<code>return</code> statement, or explicitly.</p>\n<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>\nmethod either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>. Returning some expression that evaluates to\n<code>None</code> will not raise an error, but is considered bad practice.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2734"
      }
    },
    {
      "name": "\"except\" clauses should do more than raise the same issue",
      "description": "<p>An <code>except</code> clause that only rethrows the caught exception has the same effect as omitting the <code>except</code> altogether and\nletting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.</p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError:\n    raise  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = {}\ntry:\n    a[5]\nexcept KeyError as e:\n    logging.exception('error while accessing the dict')\n    raise e\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2737"
      }
    },
    {
      "name": "Doubled prefix operators \"not\" and \"~\" should not be used",
      "description": "<p>Calling the <code>not</code> or <code>~</code> prefix operator twice might be redundant: the second invocation undoes the first. Such mistakes are\ntypically caused by accidentally double-tapping the key in question without noticing. Either this is a bug, if the operator was actually meant to be\ncalled once, or misleading if done on purpose. Calling <code>not</code> twice is commonly done instead of using the dedicated \"bool()\" builtin\nfunction. However, the latter one increases the code readability and should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = 0\nb = False\n\nc = not not a # Noncompliant\nd = ~~b # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = 0\nb = False\n\nc = bool(a)\nd = ~b\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>~</code> function has been overloaded in a customised class and has been called twice, no warning is raised as it is assumed to be an\nexpected usage.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2761"
      }
    },
    {
      "name": "Identity operators should not be used with dissimilar types",
      "description": "<p>Operators <a href=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is</code></a> and <a\nhref=\"https://docs.python.org/3/reference/expressions.html#is-not\"><code>is not</code></a> check if their operands point to the same instance, thus\nthey will always return respectively True and False when they are used to compare objects of different type. Such comparisons can only be bugs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyint = 1\nmystring = \"1\"\nvalue = myint is mystring  # Noncompliant. Always False\nvalue = myint is not mystring  # Noncompliant. Always True\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3403"
      }
    },
    {
      "name": "Functions returns should not be invariant",
      "description": "<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a function contains several return statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo(a):  # NonCompliant\n    b = 12\n    if a == 1:\n        return b\n    return b\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3516"
      }
    },
    {
      "name": "Allowing both safe and unsafe HTTP methods is security-sensitive",
      "description": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user’s profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n# No method restriction\ndef view(request):  # Sensitive\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_http_methods([\"GET\", \"POST\"])  # Sensitive\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/sensitive', methods=['GET', 'POST'])  # Sensitive\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://www.djangoproject.com/\">Django</a>:</p>\n<pre>\n@require_http_methods([\"POST\"])\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_POST\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_GET\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<pre>\n@require_safe\ndef view(request):\n    return HttpResponse(\"...\")\n</pre>\n<p>For <a href=\"https://flask.palletsprojects.com/en/1.1.x/\">Flask</a>:</p>\n<pre>\n@methods.route('/compliant1')\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<pre>\n@methods.route('/compliant2', methods=['GET'])\ndef view():\n    return Response(\"...\", 200)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> -\n  Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.djangoproject.com/en/3.1/topics/http/decorators/#allowed-http-methods\">Django</a> - Allowed HTTP Methods </li>\n  <li> <a href=\"https://flask.palletsprojects.com/en/1.1.x/quickstart/#http-methods\">Flask</a> - HTTP Methods </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3752"
      }
    },
    {
      "name": "Variables, classes and functions should be defined before being used",
      "description": "<p>Variables, Classes and functions should be defined before they are used, otherwise the code will fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef noncompliant():\n    foo()  # Noncompliant\n    foo = sum\n\n    func()  # Noncompliant\n    def func():\n        pass\n\n    MyClass()  # Noncompliant\n    class MyClass:\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef compliant():\n    foo = sum\n    foo()\n\n    def func():\n        pass\n    func()\n\n    class MyClass:\n        pass\n    MyClass()\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3827"
      }
    },
    {
      "name": "Iterable unpacking, \"for-in\" loops and \"yield from\" should use an Iterable object",
      "description": "<p>For-in loops, <a href=\"https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator\"><code>yield from</code></a> and\niterable unpacking only work with <a href=\"https://docs.python.org/3/glossary.html#term-iterable\">iterable objects</a>. In order to be iterable, an\nobject should have either an <code>__iter__</code> method or a <code>__getitem__</code> method implementing the <a\nhref=\"https://docs.python.org/3/glossary.html#term-sequence\">Sequence</a> semantic.</p>\n<p>Note also that iterating over an <a href=\"https://docs.python.org/3/glossary.html#term-asynchronous-iterable\">asynchronous iterable</a>, i.e. an\nobject having the <code>__aiter__</code> method, requires the use of <a\nhref=\"https://docs.python.org/3/reference/compound_stmts.html#the-async-for-statement\"><code>async for ... in</code></a> instead of <code>for ...\nin</code>.</p>\n<p>This rule raises an issue when a non iterable object is used in a <code>for-in</code> loop, in a <code>yield from</code> or when it is\nunpacked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Empty:\n    pass\n\nempty = Empty()\n\nfor a in empty:  # Noncompliant\n    print(a)\n\na, b, c = empty  # Noncompliant\n\nprint(*empty)  # Noncompliant\n\n[1, 2, 3, *empty]  # Noncompliant\n\n# yield from\ndef generator():\n    yield from Empty()  # Noncompliant\n\n# async generators\nasync def async_generator():\n    yield 1\n\na, *rest = async_generator()  # Noncompliant\nfor a in async_generator():  # Noncompliant; \"async\" is missing before \"for\"\n    print(a)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyIterable:\n    def __init__(self, values):\n        self._values = values\n\n    def __iter__(self):\n        return iter(self._values)\n\nmy_iterable = MyIterable(range(10))\n\nfor a in my_iterable:\n    print(a)\n\na, b, *c = my_iterable\n\nprint(*my_iterable)\n\n[1, 2, 3, *my_iterable]\n\n# yield from\ndef generator():\n    yield from subgenerator()\n\ndef subgenerator():\n    yield 1\n\n# async generators\nasync def async_generator():\n    yield 1\n\nasync for a in async_generator():\n    print(a)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0234/#python-api-specification\">PEP 234 - Iterators</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/stdtypes.html#iterator-types\">Python documentation - Iterator Types</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3862"
      }
    },
    {
      "name": "Collection sizes and array length comparisons should make sense",
      "description": "<p>The length of a collection is always greater than or equal to zero. So testing that a length is greater than or equal to zero doesn’t make sense,\nsince the result is always <code>true</code>. Similarly testing that it is less than zero will always return <code>false</code>. Perhaps the intent\nwas to check the non-emptiness of the collection instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmylist = []\nif len(myList) &gt;= 0:  # Noncompliant\n    pass\n\nif len(myList) &lt; 0:  # Noncompliant\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmylist = []\nif len(myList) &gt;= 42:\n    pass\n\nif len(myList) == 0:\n    pass\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3981"
      }
    },
    {
      "name": "Exceptions should not be created without being raised",
      "description": "<p>Creating a new <code>Exception</code> without actually raising it has no effect and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        TypeError(\"Wrong type for parameter 'x'. func expects an integer\")  # Noncompliant\n    if x &lt; 0:\n        ValueError  # Noncompliant\n    return x + 42\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef func(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Wrong type for parameter 'x'. func expects an integer\")\n    if x &lt; 0:\n        raise ValueError\n    return x + 42\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/errors.html#raising-exceptions\">Python documentation - Raising Exceptions</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3984"
      }
    },
    {
      "name": "Unused private nested classes should be removed",
      "description": "<p>\"Private\" nested classes that are never used inside the enclosing class are usually dead code: unnecessary, inoperative code that should be\nremoved. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from\nbeing introduced.</p>\n<p>Python has no real private classes. Every class is accessible. There are however two conventions indicating that a class is not meant to be\n\"public\":</p>\n<ul>\n  <li> classes with a name starting with a single underscore (ex: <code>_MyClass</code>) should be seen as non-public and might change without prior\n  notice. They should not be used by third-party libraries or software. It is ok to use those classes inside the library defining them but it should\n  be done with caution. </li>\n  <li> \"class-private\" classes are defined inside another class, and have a name starting with at least two underscores and ending with at most one\n  underscore. These classes' names will be automatically mangled to avoid collision with subclasses' nested classes. For example\n  <code>__MyClass</code> will be renamed as <code>_classname__MyClass</code>, where <code>classname</code> is the enclosing class’s name without its\n  leading underscore(s). Class-Private classes shouldn’t be used outside of their enclosing class. </li>\n</ul>\n<p>This rule raises an issue when a private nested class (either with one or two leading underscores) is never used inside its parent class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Noncompliant:\n    class __MyClass1():  # Noncompliant\n        pass\n\n    class _MyClass2():  # Noncompliant\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Compliant:\n    class __MyClass1():\n        pass\n\n    class _MyClass2():\n        pass\n\n    def process(self):\n        return Compliant.__MyClass1()\n\n    def process(self):\n        return Compliant._MyClass2()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/tutorial/classes.html#private-variables\">Python documentation – Private Variables</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0008/#designing-for-inheritance\">PEP 8 – Style Guide for Python Code</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3985"
      }
    },
    {
      "name": "Collection content should not be replaced unconditionally",
      "description": "<p>It is highly suspicious when a value is saved in a collection for a given key or index and then unconditionally overwritten. Such replacements are\nlikely errors.</p>\n<p>This rule raises an issue when the <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__setitem__\"><code>__setitem__</code></a>\nmethod of the same object is called multiple times with the same index, slice or key without any other action done between the calls.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef swap(mylist, index1, index2):\n    tmp = mylist[index2]\n    mylist[index2] = mylist[index1]\n    mylist[index2] = tmp  # Noncompliant\n\nlist2 = [0,1,2,3,4,5,6,7,8,9]\nlist2[3:5] = [42,42]\nlist2[3:5] = [42,42]  # Noncompliant\n\nmymap = {'a': {}}\nmymap['a']['b'] = 42\nmymap['a']['b'] = 42  # Noncompliant\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4143"
      }
    },
    {
      "name": "Functions and methods should not have identical implementations",
      "description": "<p>When two functions or methods have the same implementation, either it was a mistake - something else was intended - or the duplication was\nintentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are\nnot taken into account.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    code = \"bounteous\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):  # Noncompliant\n        self.do_the_thing()\n        return self.__class__.code\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    code = \"bounteous\"\n\n    def calculate_code(self):\n        self.do_the_thing()\n        return self.__class__.code\n\n    def get_name(self):\n        return self.calculate_code()\n\n    def do_the_thing(self):\n        pass  # on purpose\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised on empty methods/functions and methods/functions with only one line of code.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4144"
      }
    },
    {
      "name": "Using shell interpreter when executing OS commands is security-sensitive",
      "description": "<p>Arbitrary OS command injection vulnerabilities are more likely when a shell is spawned rather than a new process, indeed shell meta-chars can be\nused (when parameters are user-controlled for instance) to inject OS commands.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> OS command name or parameters are user-controlled. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Use functions that don’t spawn a shell.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 3</p>\n<pre>\nsubprocess.run(cmd, shell=True)  # Sensitive\nsubprocess.Popen(cmd, shell=True)  # Sensitive\nsubprocess.call(cmd, shell=True)  # Sensitive\nsubprocess.check_call(cmd, shell=True)  # Sensitive\nsubprocess.check_output(cmd, shell=True)  # Sensitive\nos.system(cmd)  # Sensitive: a shell is always spawn\n</pre>\n<p>Python 2</p>\n<pre>\ncmd = \"when a string is passed through these function, a shell is spawn\"\n(_, child_stdout, _) = os.popen2(cmd)  # Sensitive\n(_, child_stdout, _) = os.popen3(cmd)  # Sensitive\n(_, child_stdout) = os.popen4(cmd)  # Sensitive\n\n\n(child_stdout, _) = popen2.popen2(cmd)  # Sensitive\n(child_stdout, _, _) = popen2.popen3(cmd)  # Sensitive\n(child_stdout, _) = popen2.popen4(cmd)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Python 3</p>\n<pre>\n# by default shell=False, a shell is not spawn\nsubprocess.run(cmd)  # Compliant\nsubprocess.Popen(cmd)  # Compliant\nsubprocess.call(cmd)  # Compliant\nsubprocess.check_call(cmd)  # Compliant\nsubprocess.check_output(cmd)  # Compliant\n\n# always in a subprocess:\nos.spawnl(mode, path, *cmd)  # Compliant\nos.spawnle(mode, path, *cmd, env)  # Compliant\nos.spawnlp(mode, file, *cmd)  # Compliant\nos.spawnlpe(mode, file, *cmd, env)  # Compliant\nos.spawnv(mode, path, cmd)  # Compliant\nos.spawnve(mode, path, cmd, env)  # Compliant\nos.spawnvp(mode, file, cmd)  # Compliant\nos.spawnvpe(mode, file, cmd, env)  # Compliant\n\n(child_stdout) = os.popen(cmd, mode, 1)  # Compliant\n(_, output) = subprocess.getstatusoutput(cmd)  # Compliant\nout = subprocess.getoutput(cmd)  # Compliant\nos.startfile(path)  # Compliant\nos.execl(path, *cmd)  # Compliant\nos.execle(path, *cmd, env)  # Compliant\nos.execlp(file, *cmd)  # Compliant\nos.execlpe(file, *cmd, env)  # Compliant\nos.execv(path, cmd)  # Compliant\nos.execve(path, cmd, env)  # Compliant\nos.execvp(file, cmd)  # Compliant\nos.execvpe(file, cmd, env)  # Compliant\n</pre>\n<p>Python 2</p>\n<pre>\ncmdsargs = (\"use\", \"a\", \"sequence\", \"to\", \"directly\", \"start\", \"a\", \"subprocess\")\n\n(_, child_stdout) = os.popen2(cmdsargs)  # Compliant\n(_, child_stdout, _) = os.popen3(cmdsargs)  # Compliant\n(_, child_stdout) = os.popen4(cmdsargs)  # Compliant\n\n(child_stdout, _) = popen2.popen2(cmdsargs)  # Compliant\n(child_stdout, _, _) = popen2.popen3(cmdsargs)  # Compliant\n(child_stdout, _) = popen2.popen4(cmdsargs)  # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">OWASP Top 10 2021 Category A3</a> - Injection </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4721"
      }
    },
    {
      "name": "Using command line arguments is security-sensitive",
      "description": "<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue on every reference to <code>sys.argv</code>, call to <code>optparse.OptionParser()</code> or a call to\n<code>argparse.ArgumentParser()</code>. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/88\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/214\">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4823"
      }
    },
    {
      "name": "Signaling processes is security-sensitive",
      "description": "<p>Signaling processes or process groups can seriously affect the stability of this application or other applications on the same system.</p>\n<p>Accidentally setting an incorrect <code>PID</code> or <code>signal</code> or allowing untrusted sources to assign arbitrary values to these\nparameters may result in a denial of service.</p>\n<p>Also, the system treats the signal differently if the destination <code>PID</code> is less than or equal to 0. This different behavior may affect\nmultiple processes with the same (E)UID simultaneously if the call is left uncontrolled.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The parameters <code>pid</code> and <code>sig</code> are untrusted (they come from an external source). </li>\n  <li> This function is triggered by non-administrators. </li>\n  <li> Signal handlers on the target processes stop important functions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> For stateful applications with user management, ensure that only administrators trigger this code. </li>\n  <li> Verify that the <code>pid</code> and <code>sig</code> parameters are correct before using them. </li>\n  <li> Ensure that the process sending the signals runs with as few OS privileges as possible. </li>\n  <li> Isolate the process on the system based on its (E)UID. </li>\n  <li> Ensure that the signal does not interrupt any essential functions when intercepted by a target’s signal handlers. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    os.kill(pid, 9)  # Sensitive\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    os.killpg(pgid, 9)  # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport os\n\n@app.route(\"/kill-pid/&lt;pid&gt;\")\ndef send_signal(pid):\n    # Validate the untrusted PID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pid(pid):\n        os.kill(pid, 9)\n\n@app.route(\"/kill-pgid/&lt;pgid&gt;\")\ndef send_signal(pgid):\n    # Validate the untrusted PGID,\n    # With a pre-approved list or authorization checks\n    if is_valid_pgid(pgid):\n        os.kill(pgid, 9)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/283\">MITRE, CWE-283</a> - Unverified Ownership </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man1/kill.1.html\">kill(1) — Linux manual page</a> </li>\n  <li> <a href=\"https://man7.org/linux/man-pages/man2/kill.2.html\">kill(2) — Linux manual page</a> </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4828"
      }
    },
    {
      "name": "Reading the Standard Input is security-sensitive",
      "description": "<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Sensitive Code Example</h2>\n<p>Python 2 and Python 3</p>\n<pre>\nimport sys\nfrom sys import stdin, __stdin__\n\n# Any reference to sys.stdin or sys.__stdin__ without a method call is Sensitive\nsys.stdin  # Sensitive\n\nfor line in sys.stdin:  # Sensitive\n    print(line)\n\nit = iter(sys.stdin)  # Sensitive\nline = next(it)\n\n# Calling the following methods on stdin or __stdin__ is sensitive\nsys.stdin.read()  # Sensitive\nsys.stdin.readline()  # Sensitive\nsys.stdin.readlines()  # Sensitive\n\n# Calling other methods on stdin or __stdin__ does not require a review, thus it is not Sensitive\nsys.stdin.seekable()  # Ok\n# ...\n</pre>\n<p>Python 2 only</p>\n<pre>\nraw_input('What is your password?')  # Sensitive\n</pre>\n<p>Python 3 only</p>\n<pre>\ninput('What is your password?')  # Sensitive\n</pre>\n<p>Function <code>fileinput.input</code> and class <code>fileinput.FileInput</code> read the standard input when the list of files is empty.</p>\n<pre>\nfor line in fileinput.input():  # Sensitive\n    print(line)\n\nfor line in fileinput.FileInput():  # Sensitive\n    print(line)\n\nfor line in fileinput.input(['setup.py']):  # Ok\n    print(line)\n\nfor line in fileinput.FileInput(['setup.py']):  # Ok\n    print(line)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4829"
      }
    },
    {
      "name": "Server certificates should be verified during SSL/TLS connections",
      "description": "<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks.</p>\n<p>The certificate chain validation includes these steps:</p>\n<ul>\n  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>\n  <li> Each CA is allowed to issue certificates. </li>\n  <li> Each certificate in the chain is not expired. </li>\n</ul>\n<p>It’s not recommended to reinvent the wheel by implementing custom certificate chain validation.</p>\n<p>TLS libraries provide built-in certificate validation functions that should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<p><a href=\"https://github.com/psf/requests\">psf/requests</a> library:</p>\n<pre>\nimport requests\n\nrequests.request('GET', 'https://example.domain', verify=False) # Noncompliant\nrequests.get('https://example.domain', verify=False) # Noncompliant\n</pre>\n<p>Python <a href=\"https://docs.python.org/3/library/ssl.html\">ssl standard</a> library:</p>\n<pre>\nimport ssl\n\nctx1 = ssl._create_unverified_context() # Noncompliant: by default certificate validation is not done\nctx2 = ssl._create_stdlib_context() # Noncompliant: by default certificate validation is not done\n\nctx3 = ssl.create_default_context()\nctx3.verify_mode = ssl.CERT_NONE # Noncompliant\n</pre>\n<p><a href=\"https://github.com/pyca/pyopenssl\">pyca/pyopenssl</a> library:</p>\n<pre>\nfrom OpenSSL import SSL\n\nctx1 = SSL.Context(SSL.TLSv1_2_METHOD) # Noncompliant: by default certificate validation is not done\n\nctx2 = SSL.Context(SSL.TLSv1_2_METHOD)\nctx2.set_verify(SSL.VERIFY_NONE, verify_callback) # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://github.com/psf/requests\">psf/requests</a> library:</p>\n<pre>\nimport requests\n\nrequests.request('GET', 'https://example.domain', verify=True)\nrequests.request('GET', 'https://example.domain', verify='/path/to/CAbundle')\nrequests.get(url='https://example.domain') # by default certificate validation is enabled\n</pre>\n<p>Python <a href=\"https://docs.python.org/3/library/ssl.html\">ssl standard</a> library:</p>\n<pre>\nimport ssl\n\nctx = ssl.create_default_context()\nctx.verify_mode = ssl.CERT_REQUIRED\n\nctx = ssl._create_default_https_context() # by default certificate validation is enabled\n</pre>\n<p><a href=\"https://github.com/pyca/pyopenssl\">pyca/pyopenssl</a> library:</p>\n<pre>\nfrom OpenSSL import SSL\n\nctx = SSL.Context(SSL.TLSv1_2_METHOD)\nctx.set_verify(SSL.VERIFY_PEER, verify_callback) # Compliant\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT, verify_callback) # Compliant\nctx.set_verify(SSL.VERIFY_PEER | SSL.VERIFY_FAIL_IF_NO_PEER_CERT | SSL.VERIFY_CLIENT_ONCE, verify_callback) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://mobile-security.gitbook.io/masvs/security-requirements/0x10-v5-network_communication_requirements\">Mobile AppSec Verification\n  Standard</a> - Network Communication Requirements </li>\n  <li> <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">OWASP Mobile Top 10 2016 Category M3</a> - Insecure\n  Communication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/295\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S4830"
      }
    },
    {
      "name": "Bare \"raise\" statements should not be used in \"finally\" blocks",
      "description": "<p>A bare <code>raise</code> statement, i.e. a <code>raise</code> with no exception provided, will re-raise the last active exception in the current\nscope. If no exception is active a <code>RuntimeError</code> is raised instead.</p>\n<p>If the bare \"raise\" statement is in a <code>finally</code> block, it will only have an active exception to re-raise when an exception from the\n<code>try</code> block is not caught or when an exception is raised by an <code>except</code> or <code>else</code> block. Thus bare <code>raise</code>\nstatements should not be relied upon in <code>finally</code> blocks. It is simpler to let the exception raise automatically.</p>\n<p>This rule raises an issue when a bare <code>raise</code> statements is in a <code>finally</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if param:\n            raise  # Noncompliant. This will fail in some context.\n        else:\n            result = 1\n    return result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef foo(param):\n    result = 0\n    try:\n        print(\"foo\")\n    except ValueError as e:\n        pass\n    else:\n        if param:\n            raise ValueError()\n    finally:\n        if not param:\n            result = 1\n        # the exception will raise automatically\n    return result\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/reference/simple_stmts.html#raise\">The <code>raise</code> statement</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5704"
      }
    },
    {
      "name": "Special method \"__exit__\" should not re-raise the provided exception",
      "description": "<p>The special method <a\nhref=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\"><code>__exit__</code></a> should only raise an\nexception when it fails. It should never raise the provided exception, it is the caller’s responsibility.</p>\n<p>Raising this exception will make the stack trace difficult to understand.</p>\n<p>The <code>__exit__</code> method can filter passed-in exceptions by simply returning True or False.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> an <code>__exit__</code> method has a bare <code>raise</code> outside of an <code>except</code> block. </li>\n  <li> an <code>__exit__</code> method raises the exception provided as parameter. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyContextManager:\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        raise  # Noncompliant\n        raise args[2]  # Noncompliant\n\nclass MyContextManager:\n    def __enter__(self):\n        return self\n    def __exit__(self, exc_type, exc_value, traceback):\n        raise exc_value # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyContextManager:\n    def __enter__(self):\n        return self\n    def __exit__(self, exc_type, exc_value, traceback):\n        # by default the function will return None, which is always False, and the exc_value will naturally raise.\n        pass\n\nclass MyContextManager:\n    def __enter__(self, stop_exceptions):\n        return self\n    def __exit__(self, *args):\n        try:\n            print(\"42\")\n        except:\n            print(\"exception\")\n            raise  # No issue when raising another exception. The __exit__ method can fail and raise an exception\n        raise MemoryError(\"No more memory\")  # This is ok too.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation – <a href=\"https://docs.python.org/3/reference/datamodel.html?highlight=__exit__%20special#object.__exit__\">The\n  <code>__exit__</code> special method</a> </li>\n  <li> PEP 343 – <a href=\"https://www.python.org/dev/peps/pep-0343/\">The \"with\" Statement</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5706"
      }
    },
    {
      "name": "Exceptions' \"__cause__\" should be either an Exception or None",
      "description": "<p>Exception chaining enables users to see if an exception was triggered by another exception (see <a\nhref=\"https://www.python.org/dev/peps/pep-3134/\">PEP-3134</a>). Exceptions are chained using either of the following syntax:</p>\n<ul>\n  <li> <code>raise NewException() from chained_exception</code> </li>\n  <li> <code>new_exception.__cause__ = chained_exception</code> </li>\n</ul>\n<p>It is also possible to erase a chaining by setting <code>new_exception.__cause__ = None</code> or using <code>except ... from None</code> (see <a\nhref=\"https://www.python.org/dev/peps/pep-0409/\">PEP-409</a>).</p>\n<p>Chaining will fail and raise a <code>TypeError</code> if something else than <code>None</code> or a valid exception, i.e. an instance of\n<code>BaseException</code> or of a subclass, is provided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A:\n    pass\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = A()  # Noncompliant\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from \"test\"  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = None  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    new_exc = TypeError(\"new\")\n    new_exc.__cause__ = e  # Ok\n    raise new_exc\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from None  # Ok\n\ntry:\n    raise ValueError(\"orig\")\nexcept ValueError as e:\n    raise TypeError(\"new\") from e  # Ok\n</pre>\n<h2>See</h2>\n<ul>\n  <li> PEP 3134 – <a href=\"https://www.python.org/dev/peps/pep-3134/\">Exception Chaining and Embedded Tracebacks</a> </li>\n  <li> PEP 409 – <a href=\"https://www.python.org/dev/peps/pep-0409/\">Suppressing exception context</a> </li>\n  <li> PEP 352 - <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/library/exceptions.html\">Built-in Exceptions</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5707"
      }
    },
    {
      "name": "Caught Exceptions must derive from BaseException",
      "description": "<p>In Python 3, attempting to catch in an <code>except</code> statement an object which does not derive from BaseException will raise a\n<code>TypeError</code>. In Python 2 it is possible to raise old-style classes but this shouldn’t be done anymore in order to be compatible with Python\n3.</p>\n<p>In order to catch multiple exceptions in an <code>except</code> statement, a tuple of exception classes should be provided.</p>\n<p>If you are about to create a custom Exception class, note that custom exceptions should inherit from <code>Exception</code>, not\n<code>BaseException</code>. <code>Exception</code> allows people to catch all exceptions except the ones explicitly asking the interpreter to stop,\nsuch as <code>KeyboardInterrupt</code> and <a href=\"https://docs.python.org/3/library/exceptions.html#GeneratorExit\"><code>GeneratorExit</code></a>\nwhich is not an error. See <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352</a> for more information.</p>\n<p>This rule raises an issue when the expression used in an <code>except</code> statement is not a class deriving from <code>BaseException</code> nor\na tuple of such classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass CustomException:\n    \"\"\"An Invalid exception class.\"\"\"\n\ntry:\n    \"a string\" * 42\nexcept CustomException:  # Noncompliant\n    print(\"exception\")\nexcept (None, list()):  # Noncompliant * 2\n    print(\"exception\")\n\ntry:\n    \"a string\" * 42\nexcept [TypeError, ValueError]:  # Noncompliant. Lists are not accepted.\n    print(\"exception\")\nexcept {TypeError, ValueError}:  # Noncompliant. Sets are not accepted.\n    print(\"exception\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyError(Exception):\n    pass\n\ntry:\n    \"a string\" * 42\nexcept (MyError, TypeError):\n    print(\"exception\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/tutorial/errors.html\">Errors and Exceptions</a> </li>\n  <li> Python documentation - <a href=\"https://docs.python.org/3/reference/compound_stmts.html#except\">the <code>try</code> statement</a> </li>\n  <li> <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">PEP 352 - Required Superclass for Exceptions</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5708"
      }
    },
    {
      "name": "Custom Exception classes should inherit from \"Exception\" or one of its subclasses",
      "description": "<p><a href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\"><code>SystemExit</code></a>&nbsp;is raised when <a\nhref=\"https://docs.python.org/3/library/sys.html#sys.exit\"><code>sys.exit()</code></a> is called. <a\nhref=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a> is raised when the user asks the program\nto stop by pressing interrupt keys. Both exceptions are expected to propagate up until the application stops.</p>\n<p>In order to avoid catching <code>SystemExit</code> and <code>KeyboardInterrupt</code> by mistake <a\nhref=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy\">PEP-352</a> created the root class <code>BaseException</code> from which\n<code>SystemExit</code>, <code>KeyboardInterrupt</code> and <code>Exception</code> derive. Thus developers can use <code>except Exception:</code>\nwithout preventing the software from stopping.</p>\n<p>The <code>GeneratorExit</code> class also derives from <code>BaseException</code> as it is not really an error and is not supposed to be caught by\nuser code.</p>\n<p>As said in <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">Python’s documentation</a>, user-defined exceptions are not\nsupposed to inherit directly from <code>BaseException</code>. They should instead inherit from <code>Exception</code> or one of its subclasses.</p>\n<p>This rule raises an issue when a class derives from one of the following exception classes: <code>BaseException</code>,\n<code>KeyboardInterrupt</code>, <code>SystemExit</code> or <code>GeneratorExit</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyException(BaseException):  # Noncompliant\n    pass\n\nclass MyException(GeneratorExit):  # Noncompliant\n    pass\n\nclass MyException(KeyboardInterrupt):  # Noncompliant\n    pass\n\nclass MyException(SystemExit):  # Noncompliant\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyException(Exception):\n    pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> PEP 352 – <a href=\"https://www.python.org/dev/peps/pep-0352/#exception-hierarchy-changes\">Required Superclass for Exceptions</a> </li>\n  <li> Python Documentation - <a href=\"https://docs.python.org/3/library/exceptions.html#BaseException\">BaseException class</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5709"
      }
    },
    {
      "name": "The \"open\" builtin function should be called with a valid mode",
      "description": "<p>The <code>open</code> builtin can open files in different modes, which are provided as a combination of characters. Using an invalid sequence of\ncharacters will at best make <code>open</code> fail, or worse, it will have an undefined behavior (ex: it might ignore some characters).</p>\n<p>A valid mode:</p>\n<ul>\n  <li> should contain one and only one of the following characters: \"r\" (read), \"w\" (write), \"a\" (append), \"x\" (create). </li>\n  <li> should contain zero or one of the following characters: \"t\" (text), \"b\" (binary). </li>\n  <li> should contain zero or one \"+\" character (open for updating) </li>\n  <li> cannot contain \"a\", \"w\", \"+\", or \"x\" if \"U\" (universal newlines) is used. Note that \"U\" has no effect in python 3, it is deprecated and\n  shouldn’t be used anymore. </li>\n</ul>\n<p>This rule raises an issue when an invalid \"mode\" is provided to the <code>open</code> builtin.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# In python 3 the following fails\n# In python 2.7.16 on MacOs, \"open\" will just ignore the \"w\" flag\nwith open(\"test.txt\", \"aw\") as f:  # Noncompliant\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwith open(\"test.txt\", \"a\") as f:\n    pass\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html#open\">Python documentation - the <code>open</code> builtin</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5828"
      }
    },
    {
      "name": "Assertions should not fail or succeed unconditionally",
      "description": "<p>Assertions are meant to detect when code behaves as expected. An assertion which fails or succeeds all the time should be fixed.</p>\n<p>This rule raises an issue when an assertion method is given parameters which will make it succeed or fail all the time. It covers three cases:</p>\n<ul>\n  <li> an <code>assert</code> statement or a unittest’s <code>assertTrue</code> or <code>assertFalse</code> method is called with a value which will\n  be always True or always False. </li>\n  <li> a unittest’s <code>assertIsNotNone</code> or <code>assertIsNone</code> method is called with a value which will be always None or never None.\n  </li>\n  <li> a unittest’s <code>assertIsNot</code> or <code>assertIs</code> method is called with a literal expression creating a new object every time (ex:\n  <code>[1, 2, 3]</code>). </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_fail1(self):\n        assert False\n\n    def expect_fail2(self):\n        self.assertTrue(False)  # Noncompliant. This assertion always fails.\n\n    def expect_not_none(self):\n        self.assertIsNotNone(round(1.5))  # Noncompliant. This assertion always succeeds because \"round\" returns a number, not None.\n\n    def helper_compare(param):\n        self.assertIs(param, [1, 2, 3])  # Noncompliant. This assertion always fails because [1, 2, 3] creates a new object.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport unittest\n\nclass MyTestCase(unittest.TestCase):\n    def expect_fail(self):\n        self.fail(\"This is expected\")\n\n    def expect_not_none(self):\n        self.assertNotEqual(round(1.5), 0)\n\n    def helper_compare(param):\n        self.assertEqual(param, [1, 2, 3])\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html\">Python documentation - the <code>unittest</code> module</a> </li>\n  <li> <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\">Python documentation - the <code>assert</code>\n  statement</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5914"
      }
    },
    {
      "name": "Assertions should not be made at the end of blocks expecting an exception",
      "description": "<p>Using <code>pytest.raises</code> or <code>unittest.TestCase.assertRaises</code> will assert that an exception is raised in the following block.\nEnding such block in an assertion means that the test can succeed with that last assertion never being executed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n    assert bar() == 42  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport pytest\ndef foo(): return 1 / 0\ndef bar(): return 42\ndef test_something():\n  with pytest.raises(ZeroDivisionError):\n    foo()\n  assert bar() == 42\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\">Unittest: assertRaises</a> </li>\n  <li> <a href=\"https://docs.pytest.org/en/stable/assert.html#assertions-about-expected-exceptions\">Pytest: assertions about expected exceptions</a>\n  </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5915"
      }
    },
    {
      "name": "Tests should be skipped explicitly",
      "description": "<p>Test frameworks provide a mechanism to skip tests if their prerequisites are not met, by either calling dedicated methods (e.g:\n<code>unittest.TestCase.skipTest</code>, <code>pytest.skip</code>, …​) or using decorators (e.g: <code>unittest.skip</code>,\n<code>pytest.mark.skip</code>, …​)</p>\n<p>Using a <code>return</code> statement instead will make the test succeed, even though no assertion has been performed. It is therefore better to\nflag the test as <code>skipped</code> in such situation.</p>\n<p>This rule raises an issue when a <code>return</code> is performed conditionally at the beginning of a test method.</p>\n<p>No issue will be raised if the <code>return</code> is unconditional as <a href='/coding_rules#rule_key=python%3AS1763'>S1763</a> already raises an issue in such case.</p>\n<p>The supported frameworks are <code>Pytest</code> and <code>Unittest</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            return  # Noncompliant\n        self.assertEqual(foo(), 42)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport unittest\nclass MyTest(unittest.TestCase):\n\n    def test_something(self):\n        if not external_resource_available():\n            self.skipTest(\"prerequisite not met\")\n        self.assertEqual(foo(), 42)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.pytest.org/en/latest/how-to/skipping.html\">Pytest: skipping test functions</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures\">Unittest: skipping tests and expected\n  failures</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5918"
      }
    },
    {
      "name": "Administration services access should be restricted to specific IP addresses",
      "description": "<p>Cloud platforms such as AWS, Azure, or GCP support virtual firewalls that can be used to restrict access to services by controlling inbound and\noutbound traffic.<br> Any firewall rule allowing traffic from all IP addresses to standard network ports on which administration services\ntraditionally listen, such as 22 for SSH, can expose these services to exploits and unauthorized access.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to restrict access to remote administration services to only trusted IP addresses. In practice, trusted IP addresses are those\nheld by system administrators or those of <a href=\"https://aws.amazon.com/quickstart/architecture/linux-bastion/?nc1=h_ls\">bastion-like</a>\nservers.</p>\n<h2>Noncompliant Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\ninstance.connections.allow_from_any_ipv4( # Noncompliant\n    ec2.Port.tcp(3389),\n    description=\"Allows Terminal Server from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(), # Noncompliant\n    ec2.Port.tcp_range(1, 1024)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"6\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=22,\n            to_port=22\n        ),\n        ec2.CfnSecurityGroup.IngressProperty( # Noncompliant\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=3389,\n            to_port=3389\n        ),\n        { # Noncompliant\n            \"ipProtocol\":\"-1\",\n            \"cidrIpv6\":\"::/0\"\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ip-tcp-ssh\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=22,\n    to_port=22,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress( # Noncompliant\n    self,\n    \"ingress-all-ipv6-all-tcp\",\n    ip_protocol=\"-1\",\n    cidr_ipv6=\"::/0\",\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and other constructs that\nsupport a <code>connections</code> attribute:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\ninstance = ec2.Instance(\n    self,\n    \"my_instance\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc\n)\n\ninstance.connections.allow_from_any_ipv4(\n    ec2.Port.tcp(1234),\n    description=\"Allows 1234 from all IPv4\"\n)\n\ninstance.connections.allow_from(\n    ec2.Peer.ipv4(\"192.0.2.0/24\"),\n    ec2.Port.tcp(22),\n    description=\"Allows SSH from all IPv4\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\nsecurity_group = ec2.SecurityGroup(\n    self,\n    \"custom-security-group\",\n    vpc=vpc\n)\n\nsecurity_group.add_ingress_rule(\n    ec2.Peer.any_ipv4(),\n    ec2.Port.tcp_range(1024, 1048)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroup.html\">aws_cdk.aws_ec2.CfnSecurityGroup</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroup(\n    self,\n    \"cfn-based-security-group\",\n    group_description=\"cfn based security group\",\n    group_name=\"cfn-based-security-group\",\n    vpc_id=vpc.vpc_id,\n    security_group_ingress=[\n        ec2.CfnSecurityGroup.IngressProperty(\n            ip_protocol=\"tcp\",\n            cidr_ip=\"0.0.0.0/0\",\n            from_port=1024,\n            to_port=1048\n        ),\n        {\n            \"ipProtocol\":\"6\",\n            \"cidrIp\":\"192.0.2.0/24\",\n            \"fromPort\":22,\n            \"toPort\":22\n        }\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnSecurityGroupIngress.html\">aws_cdk.aws_ec2.CfnSecurityGroupIngress</a></p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-all-ipv4-tcp-http\",\n    ip_protocol=\"6\",\n    cidr_ip=\"0.0.0.0/0\",\n    from_port=80,\n    to_port=80,\n    group_id=security_group.attr_group_id\n)\n\nec2.CfnSecurityGroupIngress(\n    self,\n    \"ingress-range-tcp-rdp\",\n    ip_protocol=\"tcp\",\n    cidr_ip=\"192.0.2.0/24\",\n    from_port=3389,\n    to_port=3389,\n    group_id=security_group.attr_group_id\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Security groups for your VPC </li>\n  <li> <a href=\"https://docs.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview\">Azure Documentation</a> - Network security\n  groups </li>\n  <li> <a href=\"https://cloud.google.com/vpc/docs/using-firewalls\">GCP Documentation</a> - Firewalls </li>\n</ul>",
      "type": "VULNERABILITY",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6321"
      }
    },
    {
      "name": "Alternation in regular expressions should not contain empty alternatives",
      "description": "<p>Alternation is used to match a single regular expression out of several possible regular expressions. If one of the alternatives is empty it would\nmatch any input, which is most probably a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nre.search(r\"Jack|Peter|\", \"John\") # Noncompliant - will match an empty string\nre.search(r\"Jack||Peter\", \"John\") # Noncompliant - will match an empty string\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nre.search(r\"Jack|Peter\", \"John\") # returns false\n</pre>\n<h2>Exceptions</h2>\n<p>One could use an empty alternation to make a regular expression group optional. Rule will not report on such cases.</p>\n<pre>\nre.search(r\"mandatory(-optional|)\", \"mandatory\")\nre.search(r\"mandatory(-optional|)\", \"mandatory-optional\")\n</pre>\n<p>However, if there is a quantifier after the group the issue will be reported as using both <code>|</code> and quantifier is redundant.</p>\n<pre>\nre.search(r\"mandatory(-optional|)?\", \"mandatory-optional\") # Noncompliant - using both `|` inside the group and `?` for the group.\n</pre>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6323"
      }
    },
    {
      "name": "Regular expressions should not contain multiple spaces",
      "description": "<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. It’s more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"Hello,   world!\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"Hello, {3}world!\"\n</pre>\n<h2>Exceptions</h2>\n<p>If the extended modifier <code>re.X</code> or <code>re.VERBOSE</code> is set, whitespaces are ignored. In this case no issue should be triggered,\nbecause the whitespaces may be intended to improve readability.</p>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6326"
      }
    },
    {
      "name": "Using unencrypted SNS topics is security-sensitive",
      "description": "<p>Amazon Simple Notification Service (SNS) is a managed messaging service for application-to-application (A2A) and application-to-person (A2P)\ncommunication. SNS topics allows publisher systems to fanout messages to a large number of subscriber systems. Amazon SNS allows to encrypt messages\nwhen they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are not able to\naccess the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The topic contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to encrypt SNS topics that contain sensitive information. Encryption and decryption are handled transparently by SNS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.Topic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sns.CfnTopic( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.Topic.html\">aws_cdk.aws_sns.Topic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.Topic(\n            self,\n            \"example\",\n            master_key=my_key\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sns.CfnTopic.html\">aws_cdk.aws_sns.CfnTopic</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sns as sns\n)\n\nclass TopicStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sns.CfnTopic(\n            self,\n            \"example\",\n            kms_master_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html\">AWS Documentation</a> - Encryption at rest </li>\n  <li> <a href=\"https://aws.amazon.com/blogs/compute/encrypting-messages-published-to-amazon-sns-with-aws-kms/\">Encrypting messages published to\n  Amazon SNS with AWS KMS</a> </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6327"
      }
    },
    {
      "name": "Replacement strings should reference existing regular expression groups",
      "description": "<p>The regex function <code>re.sub</code> can be used to perform a search and replace based on regular expression matches. The <code>repl</code>\nparameter can contain references to capturing groups used in the <code>pattern</code> parameter. This can be achieved with <code>\\n</code> to\nreference the n’th group.</p>\n<p>When referencing a nonexistent group an error will be thrown for Python &lt; 3.5 or replaced by an empty string for Python &gt;= 3.5.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\9, \\3\", \"abc\") # Noncompliant - result is an re.error: invalid group reference\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nre.sub(r\"(a)(b)(c)\", r\"\\1, \\2, \\3\", \"abc\")\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.10/library/re.html#re.sub\">re.sub</a> - Python Documentation </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6328"
      }
    },
    {
      "name": "Allowing public network access to cloud resources is security-sensitive",
      "description": "<p>Enabling public network access to cloud resources can affect an organization’s ability to protect its data or internal operations from data theft\nor disruption.</p>\n<p>Depending on the component, inbound access from the Internet can be enabled via:</p>\n<ul>\n  <li> a boolean value that explicitly allows access to the public network. </li>\n  <li> the assignment of a public IP address. </li>\n  <li> database firewall rules that allow public IP ranges. </li>\n</ul>\n<p>Deciding to allow public access may happen for various reasons such as for quick maintenance, time saving, or by accident.</p>\n<p>This decision increases the likelihood of attacks on the organization, such as:</p>\n<ul>\n  <li> data breaches. </li>\n  <li> intrusions into the infrastructure to permanently steal from it. </li>\n  <li> and various malicious traffic, such as DDoS attacks. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<p>This cloud resource:</p>\n<ul>\n  <li> should be publicly accessible to any Internet user. </li>\n  <li> requires inbound traffic from the Internet to function properly. </li>\n</ul>\n<p>There is a risk if you answered no to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid publishing cloud services on the Internet unless they are intended to be publicly accessible, such as customer portals or e-commerce\nsites.</p>\n<p>Use private networks (and associated private IP addresses) and VPC peering or other secure communication tunnels to communicate with other cloud\ncomponents.</p>\n<p>The goal is to prevent the component from intercepting traffic coming in via the public IP address. If the cloud resource does not support the\nabsence of a public IP address, assign a public IP address to it, but do not create listeners for the public IP address.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a> and similar constructs:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_public\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PUBLIC) # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_public_exposed\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=True, # Sensitive\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PUBLIC).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_public\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=True, # Sensitive\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_public = rds.CfnDBSubnetGroup(\n    self,\n    \"public_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PUBLIC\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"public-public-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_public.ref,\n    publicly_accessible=True, # Sensitive\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/Instance.html\">aws_cdk.aws_ec2.Instance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.Instance(\n    self,\n    \"vpc_subnet_private\",\n    instance_type=nano_t2,\n    machine_image=ec2.MachineImage.latest_amazon_linux(),\n    vpc=vpc,\n    vpc_subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT)\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_ec2/CfnInstance.html\">aws_cdk.aws_ec2.CfnInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_ec2 as ec2\n\nec2.CfnInstance(\n    self,\n    \"cfn_private\",\n    instance_type=\"t2.micro\",\n    image_id=\"ami-0ea0f26a6d50850c5\",\n    network_interfaces=[\n        ec2.CfnInstance.NetworkInterfaceProperty(\n            device_index=\"0\",\n            associate_public_ip_address=False, # Compliant\n            delete_on_termination=True,\n            subnet_id=vpc.select_subnets(subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT).subnet_ids[0]\n        )\n    ]\n)\n</pre>\n<p>For <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_dms/CfnReplicationInstance.html\">aws_cdk.aws_dms.CfnReplicationInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_dms as dms\n\nrep_instance = dms.CfnReplicationInstance(\n    self,\n    \"explicit_private\",\n    replication_instance_class=\"dms.t2.micro\",\n    allocated_storage=5,\n    publicly_accessible=False,\n    replication_subnet_group_identifier=subnet_group.replication_subnet_group_identifier,\n    vpc_security_group_ids=[vpc.vpc_default_security_group]\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_rds/CfnDBInstance.html\">aws_cdk.aws_rds.CfnDBInstance</a>:</p>\n<pre>\nfrom aws_cdk import aws_rds as rds\nfrom aws_cdk import aws_ec2 as ec2\n\nrds_subnet_group_private = rds.CfnDBSubnetGroup(\n    self,\n    \"private_subnet\",\n    db_subnet_group_description=\"Subnets\",\n    subnet_ids=vpc.select_subnets(\n        subnet_type=ec2.SubnetType.PRIVATE_WITH_NAT\n    ).subnet_ids\n)\n\nrds.CfnDBInstance(\n    self,\n    \"private-private-subnet\",\n    engine=\"postgres\",\n    master_username=\"foobar\",\n    master_user_password=\"12345678\",\n    db_instance_class=\"db.r5.large\",\n    allocated_storage=\"200\",\n    iops=1000,\n    db_subnet_group_name=rds_subnet_group_private.ref,\n    publicly_accessible=False,\n    vpc_security_groups=[sg.security_group_id]\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html\">AWS Documentation</a> - Amazon EC2 instance IP\n  addressing </li>\n  <li> <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.PublicPrivate.html\">AWS Documentation</a> - Public and\n  private replication instances </li>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html\">AWS Documentation</a> - VPC Peering </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/668\">MITRE, CWE-668</a> - Exposure of Resource to Wrong Sphere </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6329"
      }
    },
    {
      "name": "Regular expression quantifiers and character classes should be used concisely",
      "description": "<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"[0-9]\" # Noncompliant - same as r\"\\d\"\nr\"[^0-9]\" # Noncompliant - same as r\"\\D\"\nr\"[A-Za-z0-9_]\" # Noncompliant - same as r\"\\w\"\nr\"[\\w\\W]\" # Noncompliant - same as r\".\"\nr\"a{0,}\" # Noncompliant - same as r\"a*\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"\\d\"\nr\"\\D\"\nr\"\\w\"\nr\".\"\nr\"a*\"\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6353"
      }
    },
    {
      "name": "Allowing unrestricted outbound communications is security-sensitive",
      "description": "<p>Allowing unrestricted outbound communications can lead to data leaks.</p>\n<p>A restrictive security group is an additional layer of protection that might prevent the abuse or exploitation of a resource. For example, it\ncomplicates the exfiltration of data in the case of a successfully exploited vulnerability.</p>\n<p>When deciding if outgoing connections should be limited, consider that limiting the connections results in additional administration and\nmaintenance work.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The resource has access to sensitive data. </li>\n  <li> The resource is part of a private network. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to restrict outgoing connections to a set of trusted destinations.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nec2.SecurityGroup(  # Sensitive; allow_all_outbound is enabled by default\n    self,\n    \"example\",\n    vpc=vpc\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_ec2.SecurityGroup.html\">aws_cdk.aws_ec2.SecurityGroup</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_ec2 as ec2\n)\n\nsg = ec2.SecurityGroup(\n    self,\n    \"example\",\n    vpc=vpc,\n    allow_all_outbound=False\n)\n\nsg.add_egress_rule(\n    peer=ec2.Peer.ipv4(\"203.0.113.127/32\"),\n    connection=ec2.Port.tcp(443)\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">AWS Documentation</a> - Control traffic to resources using\n  security groups </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6463"
      }
    },
    {
      "name": "ExceptionGroup and BaseExceptionGroup should not be caught with except*",
      "description": "<p>Python 3.11 introduced <code>except*</code> and <code>ExceptionGroup</code>. While it’s possible to catch the ExceptionGroup and BaseExceptionGroup\ntypes with <code>except`</code>, a Runtime error will be raised when this is done with <code>except*</code>. See PEP 654 : <a\nhref=\"https://peps.python.org/pep-0654/#forbidden-combinations\">PEP-654</a></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry:\n    ...\nexcept* ExceptionGroup:  # Noncompliant\n    pass\n\ntry:\n    ...\nexcept* (TypeError, ExceptionGroup):  # Noncompliant\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry:\n    ...\nexcept ExceptionGroup:\n    pass\n</pre>\n<h2>See</h2>\n<p><a href=\"https://peps.python.org/pep-0654/#forbidden-combinations\">PEP-654</a></p>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6468"
      }
    },
    {
      "name": "Creating cookies without the \"secure\" flag is security-sensitive",
      "description": "<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>\n  <li> it’s not sure that the website contains <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\">mixed content</a> or not\n  (ie HTTPS everywhere or not) </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour\n  when creating cookies. </li>\n  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value') # Sensitive\n    return response\n</pre>\n<h2>Compliant Solution</h2>\n<p>Flask</p>\n<pre>\nfrom flask import Response\n\n@app.route('/')\ndef index():\n    response = Response()\n    response.set_cookie('key', 'value', secure=True) # Compliant\n    return response\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/315\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2092"
      }
    },
    {
      "name": "\"pass\" should not be used needlessly",
      "description": "<p>The use of a <code>pass</code> statement where it’s not required by the syntax is pure cruft and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n        pass    # Noncompliant\n\n    def lookup():\n        pass    # Compliant; method can't be empty\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n\n    def lookup():\n        pass\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S2772"
      }
    },
    {
      "name": "Jump statements should not be redundant",
      "description": "<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,\nbut jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n        return  # NonCompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef redundant_jump(x):\n    if x == 1:\n        print(True)\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> No issue is raised if the jump statement is the only statement of a statement suite: </li>\n</ul>\n<pre>\ndef my_function(x):\n    if x &gt; 5:\n        do_something()\n    elif x == 0:\n        return # ok even it could be changed to \"pass\"\n    else:\n        do_something_else()\n</pre>\n<ul>\n  <li> No issue is raised for <code>return None</code> because this was certainly done on purpose to be explicit that a function is really returning\n  <code>None</code>. </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S3626"
      }
    },
    {
      "name": "Having a permissive Cross-Origin Resource Sharing policy is security-sensitive",
      "description": "<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = True # Sensitive\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"True\"}}) # Sensitive\n</pre>\n<p>User-controlled origin:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nresp.headers['Access-Control-Allow-Origin'] = origin # Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Django:</p>\n<pre>\nCORS_ORIGIN_ALLOW_ALL = False # Compliant\n</pre>\n<p>Flask:</p>\n<pre>\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app, resources={r\"/*\": {\"origins\": \"*\", \"send_wildcard\": \"False\"}}) # Compliant\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\norigin = request.headers['ORIGIN']\nresp = Response()\nif origin in TRUSTED_ORIGINS:\n   resp.headers['Access-Control-Allow-Origin'] = origin\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/346\">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/942\">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5122"
      }
    },
    {
      "name": "Disabling auto-escaping in template engines is security-sensitive",
      "description": "<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,\n<code>Groovy's template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>\n<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\">html entities</a>) will not be relevant\nwhen variables are used in a <a href=\"https://en.wikipedia.org/wiki/HTML_attribute\">html attribute</a> because '<code>:</code>' character is not\nescaped and thus an attack as below is possible:</p>\n<pre>\n&lt;a href=\"{{ myLink }}\"&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)\n&lt;a href=\"javascript:alert(document.cookie)\"&gt;link&lt;/a&gt; // JS injection (XSS attack)\n</pre>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Templates are used to render web content and\n    <ul>\n      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>\n      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>\n    </ul>  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nfrom jinja2 import Environment\n\nenv = Environment() # Sensitive: New Jinja2 Environment has autoescape set to false\nenv = Environment(autoescape=False) # Sensitive:\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom jinja2 import Environment\nenv = Environment(autoescape=True) # Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">OWASP Top 10 2021 Category A3</a> - Injection </li>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">OWASP Top 10 2017 Category A7</a> - Cross-Site\n  Scripting (XSS) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/79\">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation\n  ('Cross-site Scripting') </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5247"
      }
    },
    {
      "name": "`str.replace` should be preferred to `re.sub`",
      "description": "<p>An <code>re.sub</code> call always performs an evaluation of the first argument as a regular expression, even if no regular expression features\nwere used. This has a significant performance cost and therefore should be used with care.</p>\n<p>When <code>re.sub</code> is used, the first argument should be a real regular expression. If it’s not the case, <code>str.replace</code> does\nexactly the same thing as <code>re.sub</code> without the performance drawback of the regex.</p>\n<p>This rule raises an issue for each <code>re.sub</code> used with a simple string as first argument which doesn’t contains special regex character\nor pattern.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"Bob is\", \"It's\", init) # Noncompliant\nchanged = re.sub(r\"\\.\\.\\.\", \";\", changed) # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = init.replace(\"Bob is\", \"It's\")\nchanged = changed.replace(\"...\", \";\")\n</pre>\n<p>Or, with a regex:</p>\n<pre>\ninit = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\"\nchanged = re.sub(r\"\\w*\\sis\", \"It's\", init)\nchanged = re.sub(r\"\\.{3}\", \";\", changed)\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "FP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5361"
      }
    },
    {
      "name": "Builtins should not be shadowed by local variables",
      "description": "<p>Shadowing a builtin makes your code more difficult to read and maintain. It may also be a source of bugs as you can reference the builtin by\nmistake.</p>\n<p>It is sometimes ok to shadow a builtin to improve the readability of a public API or to support multiple versions of a library. In these cases the\nvalue is higher than the maintainability cost. Just be careful when you do it.</p>\n<p>It is not ok to shadow builtins with variables which are local to a function or method. These variables are not public and can be easily renamed,\nthus reducing the confusion and making the code less error-prone.</p>\n<p>This rule raises an issue when the name of a local variable matches the name of a builtin.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef a_function():\n    int = 42  # Noncompliant; int is a builtin\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef a_function():\n    value = 42\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3.8/library/stdtypes.html\">Python documentation - Built-in Types</a> </li>\n  <li> <a href=\"https://docs.python.org/3/library/functions.html\">Python documentation - Built-in Functions</a> </li>\n</ul>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5806"
      }
    },
    {
      "name": "Only defined names should be listed in \"__all__\"",
      "description": "<p>Developers may define a list named <code>__all__</code> in a module to limit the names imported from it by wildcard imports (<code>from mymodule\nimport *</code>). This list can only reference defined names, otherwise an <code>AttributeError</code> will be raised when the module is imported.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"unknown_func\"]  # Noncompliant. \"unknown_func\" is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfrom mymodule import my_func\n\n__all__ = [\"my_func\"]\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.python.org/3/tutorial/modules.html#importing-from-a-package\">Python documentation - Importing * From a Package</a> </li>\n</ul>",
      "type": "BUG",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S5807"
      }
    },
    {
      "name": "Using unencrypted SQS queues is security-sensitive",
      "description": "<p>Amazon Simple Queue Service (SQS) is a managed message queuing service for application-to-application (A2A) communication. Amazon SQS can store\nmessages encrypted as soon as they are received. In the case that adversaries gain physical access to the storage medium or otherwise leak a message\nfrom the file system, for example through a vulnerability in the service, they are not able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The queue contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to encrypt SQS queues that contain sensitive information. Encryption and decryption are handled transparently by SQS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.Queue.html\">aws_cdk.aws_sqs.Queue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass QueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.Queue( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.CfnQueue( # Sensitive, unencrypted by default\n            self,\n            \"example\"\n        )\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.Queue.html\">aws_cdk.aws_sqs.Queue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass QueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        sqs.Queue(\n            self,\n            \"example\",\n            encryption=sqs.QueueEncryption.KMS_MANAGED\n        )\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_sqs.CfnQueue.html\">aws_cdk.aws_sqs.CfnQueue</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_sqs as sqs\n)\n\nclass CfnQueueStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:\n        super().__init__(scope, construct_id, **kwargs)\n        my_key = kms.Key(self, \"key\")\n        sqs.CfnQueue(\n            self,\n            \"example\",\n            kms_master_key_id=my_key.key_id\n        )\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html\">AWS Documentation</a> -\n  Encryption at rest </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6330"
      }
    },
    {
      "name": "Regular expressions should not contain empty groups",
      "description": "<p>There are several reasons to use a group in a regular expression:</p>\n<ul>\n  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>\n  <li> to remember parenthesised part of the match in the case of capturing group </li>\n  <li> to improve readability </li>\n</ul>\n<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nr\"foo()\" # Noncompliant, will match only 'foo'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nr\"foo\\(\\)\" # Matches 'foo()'\n</pre>",
      "type": "CODE_SMELL",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6331"
      }
    },
    {
      "name": "Using unencrypted EFS file systems is security-sensitive",
      "description": "<p>Amazon Elastic File System (EFS) is a serverless file system that does not require provisioning or managing storage. Stored files can be\nautomatically encrypted by the service. In the case that adversaries gain physical access to the storage medium or otherwise leak a message they are\nnot able to access the data.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The file system contains sensitive data that could cause harm when leaked. </li>\n  <li> There are compliance requirements for the service to store data encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to encrypt EFS file systems that contain sensitive information. Encryption and decryption are handled transparently by EFS, so no\nfurther modifications to the application are necessary.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=False  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.FileSystem.html\">aws_cdk.aws_efs.FileSystem</a> and <a\nhref=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_efs.CfnFileSystem.html\">aws_cdk.aws_efs.CfnFileSystem</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_efs as efs\n)\n\nefs.FileSystem(\n    self,\n    \"example\",\n    encrypted=True\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">OWASP Top 10 2021 Category A2</a> - Cryptographic Failures </li>\n  <li> <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">OWASP Top 10 2021 Category A4</a> - Insecure Design </li>\n  <li> <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\"https://docs.aws.amazon.com/efs/latest/ug/encryption.html\">AWS Documentation</a> - Data encryption in Amazon EFS </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/311\">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6332"
      }
    },
    {
      "name": "Creating public APIs is security-sensitive",
      "description": "<p>A public API, which can be requested by any authenticated or unauthenticated identities, can lead to unauthorized actions and information\ndisclosures.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The public API:</p>\n<ul>\n  <li> exposes sensitive data like personal information. </li>\n  <li> can be used to perform sensitive operations. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It’s recommended to restrict API access to authorized entities, unless the API offers a non-sensitive service designed to be public.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nresource = api.root.add_resource(\"example\")\nresource.add_method(\n    \"GET\",\n    authorization_type=apigateway.AuthorizationType.NONE  # Sensitive\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"no-auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"NONE\"  # Sensitive\n)\n</pre>\n<h2>Compliant Solution</h2>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_apigateway/Resource.html\">aws_cdk.aws_apigateway.Resource</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigateway as apigateway\n)\n\nopts = apigateway.MethodOptions(\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource = api.root.add_resource(\n    \"example\",\n    default_method_options=opts\n)\nresource.add_method(\n    \"POST\",\n    authorization_type=apigateway.AuthorizationType.IAM\n)\nresource.add_method(  # authorization_type is inherited from the Resource's configured default_method_options\n    \"POST\"\n)\n</pre>\n<p>For <a href=\"https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigatewayv2.CfnRoute.html\">aws_cdk.aws_apigatewayv2.CfnRoute</a>:</p>\n<pre>\nfrom aws_cdk import (\n    aws_apigatewayv2 as apigateway\n)\n\napigateway.CfnRoute(\n    self,\n    \"auth\",\n    api_id=api.ref,\n    route_key=\"GET /test\",\n    authorization_type=\"AWS_IAM\"\n)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">OWASP Top 10 2021 Category A1</a> - Broken Access Control </li>\n  <li> <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\">AWS Documentation</a> -\n  Controlling and managing access to a REST API in API Gateway </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control\n  </li>\n</ul>",
      "type": "SECURITY_HOTSPOT",
      "severity": null,
      "status": "OPEN",
      "file_path": null,
      "line_number": null,
      "code_snippet": null,
      "labels": [
        "TP"
      ],
      "project": null,
      "component": null,
      "metadata": {
        "key": "python:S6333"
      }
    }
  ],
  "collection_name": "bug_rag_documents",
  "generate_embeddings": true
}